/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["sentry-node_modules_sentry_browser_cjs_index_js-node_modules_sentry_integrations_cjs_index_js"],{

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/backgroundtab.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/backgroundtab.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar types = __webpack_require__(/*! ./types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (types.WINDOW && types.WINDOW.document) {\n    types.WINDOW.document.addEventListener('visibilitychange', function () {\n      var activeTransaction = core.getActiveTransaction();\n      if (types.WINDOW.document.hidden && activeTransaction) {\n        var statusType = 'cancelled';\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Transaction: \".concat(statusType, \" -> since tab moved to the background, op: \").concat(activeTransaction.op));\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(statusType);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\nexports.registerBackgroundTabDetection = registerBackgroundTabDetection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL2JhY2tncm91bmR0YWIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsK0JBQUE7RUFDQSxJQUFBQyxLQUFBLENBQUFDLE1BQUEsSUFBQUQsS0FBQSxDQUFBQyxNQUFBLENBQUFDLFFBQUE7SUFDQUYsS0FBQSxDQUFBQyxNQUFBLENBQUFDLFFBQUEsQ0FBQUMsZ0JBQUE7TUFDQSxJQUFBQyxpQkFBQSxHQUFBQyxJQUFBLENBQUFDLG9CQUFBO01BQ0EsSUFBQU4sS0FBQSxDQUFBQyxNQUFBLENBQUFDLFFBQUEsQ0FBQUssTUFBQSxJQUFBSCxpQkFBQTtRQUNBLElBQUFJLFVBQUE7UUFFQSxRQUFBQyxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsMkJBQUFDLE1BQUEsQ0FDQUwsVUFBQSxpREFBQUssTUFBQSxDQUFBVCxpQkFBQSxDQUFBVSxFQUFBLENBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBQVYsaUJBQUEsQ0FBQVcsTUFBQTtVQUNBWCxpQkFBQSxDQUFBWSxTQUFBLENBQUFSLFVBQUE7UUFDQTtRQUNBSixpQkFBQSxDQUFBYSxNQUFBO1FBQ0FiLGlCQUFBLENBQUFjLE1BQUE7TUFDQTtJQUNBO0VBQ0E7SUFDQSxRQUFBVCxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFRLElBQUE7RUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2Jyb3dzZXIvYmFja2dyb3VuZHRhYi50cz9mY2YxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSWRsZVRyYW5zYWN0aW9uLCBTcGFuU3RhdHVzVHlwZSB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBnZXRBY3RpdmVUcmFuc2FjdGlvbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgdGhhdCBjYW5jZWxzIGFuZCBmaW5pc2hlcyBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlIGdsb2JhbFxuICogZG9jdW1lbnQgaXMgaGlkZGVuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJCYWNrZ3JvdW5kVGFiRGV0ZWN0aW9uKCk6IHZvaWQge1xuICBpZiAoV0lORE9XICYmIFdJTkRPVy5kb2N1bWVudCkge1xuICAgIFdJTkRPVy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlVHJhbnNhY3Rpb24gPSBnZXRBY3RpdmVUcmFuc2FjdGlvbigpIGFzIElkbGVUcmFuc2FjdGlvbjtcbiAgICAgIGlmIChXSU5ET1cuZG9jdW1lbnQuaGlkZGVuICYmIGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHN0YXR1c1R5cGU6IFNwYW5TdGF0dXNUeXBlID0gJ2NhbmNlbGxlZCc7XG5cbiAgICAgICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgICAgIGBbVHJhY2luZ10gVHJhbnNhY3Rpb246ICR7c3RhdHVzVHlwZX0gLT4gc2luY2UgdGFiIG1vdmVkIHRvIHRoZSBiYWNrZ3JvdW5kLCBvcDogJHthY3RpdmVUcmFuc2FjdGlvbi5vcH1gLFxuICAgICAgICAgICk7XG4gICAgICAgIC8vIFdlIHNob3VsZCBub3Qgc2V0IHN0YXR1cyBpZiBpdCBpcyBhbHJlYWR5IHNldCwgdGhpcyBwcmV2ZW50IGltcG9ydGFudCBzdGF0dXNlcyBsaWtlXG4gICAgICAgIC8vIGVycm9yIG9yIGRhdGEgbG9zcyBmcm9tIGJlaW5nIG92ZXJ3cml0dGVuIG9uIHRyYW5zYWN0aW9uLlxuICAgICAgICBpZiAoIWFjdGl2ZVRyYW5zYWN0aW9uLnN0YXR1cykge1xuICAgICAgICAgIGFjdGl2ZVRyYW5zYWN0aW9uLnNldFN0YXR1cyhzdGF0dXNUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVUcmFuc2FjdGlvbi5zZXRUYWcoJ3Zpc2liaWxpdHljaGFuZ2UnLCAnZG9jdW1lbnQuaGlkZGVuJyk7XG4gICAgICAgIGFjdGl2ZVRyYW5zYWN0aW9uLmZpbmlzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF9fREVCVUdfQlVJTERfXyAmJlxuICAgICAgbG9nZ2VyLndhcm4oJ1tUcmFjaW5nXSBDb3VsZCBub3Qgc2V0IHVwIGJhY2tncm91bmQgdGFiIGRldGVjdGlvbiBkdWUgdG8gbGFjayBvZiBnbG9iYWwgZG9jdW1lbnQnKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlZ2lzdGVyQmFja2dyb3VuZFRhYkRldGVjdGlvbiIsInR5cGVzIiwiV0lORE9XIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYWN0aXZlVHJhbnNhY3Rpb24iLCJjb3JlIiwiZ2V0QWN0aXZlVHJhbnNhY3Rpb24iLCJoaWRkZW4iLCJzdGF0dXNUeXBlIiwiX19TRU5UUllfREVCVUdfXyIsInV0aWxzIiwibG9nZ2VyIiwibG9nIiwiY29uY2F0Iiwib3AiLCJzdGF0dXMiLCJzZXRTdGF0dXMiLCJzZXRUYWciLCJmaW5pc2giLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/backgroundtab.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/browsertracing.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/browsertracing.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar backgroundtab = __webpack_require__(/*! ./backgroundtab.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/backgroundtab.js\");\nvar index = __webpack_require__(/*! ./metrics/index.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/metrics/index.js\");\nvar request = __webpack_require__(/*! ./request.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/request.js\");\nvar router = __webpack_require__(/*! ./router.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/router.js\");\nvar types = __webpack_require__(/*! ./types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\nvar BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = _objectSpread(_objectSpread({}, core.TRACING_DEFAULTS), {}, {\n  markBackgroundTransactions: true,\n  routingInstrumentation: router.instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {}\n}, request.defaultRequestInstrumentationOptions);\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nvar BrowserTracing = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BrowserTracing(_options) {\n    _classCallCheck(this, BrowserTracing);\n    BrowserTracing.prototype.__init.call(this);\n    core.addTracingExtensions();\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options);\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n    this._collectWebVitals = index.startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      index.startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      index.startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(BrowserTracing, [{\n    key: \"__init\",\n    value:\n    // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n    // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n    // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n    // integrations.\n\n    /** Browser Tracing integration options */\n\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = BROWSER_TRACING_INTEGRATION_ID;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var _this = this;\n      this._getCurrentHub = getCurrentHub;\n      var _this$options = this.options,\n        instrumentRouting = _this$options.routingInstrumentation,\n        startTransactionOnLocationChange = _this$options.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _this$options.startTransactionOnPageLoad,\n        markBackgroundTransactions = _this$options.markBackgroundTransactions,\n        traceFetch = _this$options.traceFetch,\n        traceXHR = _this$options.traceXHR,\n        tracePropagationTargets = _this$options.tracePropagationTargets,\n        shouldCreateSpanForRequest = _this$options.shouldCreateSpanForRequest,\n        _experiments = _this$options._experiments;\n      instrumentRouting(function (context) {\n        var transaction = _this._createRouteTransaction(context);\n        _this.options._experiments.onStartRouteTransaction && _this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n        return transaction;\n      }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n      if (markBackgroundTransactions) {\n        backgroundtab.registerBackgroundTabDetection();\n      }\n      if (_experiments.enableInteractions) {\n        this._registerInteractionListener();\n      }\n      request.instrumentOutgoingRequests({\n        traceFetch: traceFetch,\n        traceXHR: traceXHR,\n        tracePropagationTargets: tracePropagationTargets,\n        shouldCreateSpanForRequest: shouldCreateSpanForRequest\n      });\n    }\n\n    /** Create routing idle transaction. */\n  }, {\n    key: \"_createRouteTransaction\",\n    value: function _createRouteTransaction(context) {\n      var _this2 = this;\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Did not create \".concat(context.op, \" transaction because _getCurrentHub is invalid.\"));\n        return undefined;\n      }\n      var _this$options2 = this.options,\n        beforeNavigate = _this$options2.beforeNavigate,\n        idleTimeout = _this$options2.idleTimeout,\n        finalTimeout = _this$options2.finalTimeout,\n        heartbeatInterval = _this$options2.heartbeatInterval;\n      var isPageloadTransaction = context.op === 'pageload';\n      var sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n      var baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n      var traceParentData = sentryTraceMetaTagValue ? core.extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n      var dynamicSamplingContext = baggageMetaTagValue ? utils.baggageHeaderToDynamicSamplingContext(baggageMetaTagValue) : undefined;\n      var expandedContext = _objectSpread(_objectSpread(_objectSpread({}, context), traceParentData), {}, {\n        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {\n          dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n        }),\n        trimEnd: true\n      });\n      var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n      // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n      // from being sent to Sentry).\n      var finalContext = modifiedContext === undefined ? _objectSpread(_objectSpread({}, expandedContext), {}, {\n        sampled: false\n      }) : modifiedContext;\n\n      // If `beforeNavigate` set a custom name, record that fact\n      finalContext.metadata = finalContext.name !== expandedContext.name ? _objectSpread(_objectSpread({}, finalContext.metadata), {}, {\n        source: 'custom'\n      }) : finalContext.metadata;\n      this._latestRouteName = finalContext.name;\n      this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n      if (finalContext.sampled === false) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Will not send \".concat(finalContext.op, \" transaction because of beforeNavigate.\"));\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Starting \".concat(finalContext.op, \" transaction on scope\"));\n      var hub = this._getCurrentHub();\n      var location = types.WINDOW.location;\n      var idleTransaction = core.startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, {\n        location: location\n      },\n      // for use in the tracesSampler\n      heartbeatInterval);\n      idleTransaction.registerBeforeFinishCallback(function (transaction) {\n        _this2._collectWebVitals();\n        index.addPerformanceEntries(transaction);\n      });\n      return idleTransaction;\n    }\n\n    /** Start listener for interaction transactions */\n  }, {\n    key: \"_registerInteractionListener\",\n    value: function _registerInteractionListener() {\n      var _this3 = this;\n      var inflightInteractionTransaction;\n      var registerInteractionTransaction = function registerInteractionTransaction() {\n        var _this3$options = _this3.options,\n          idleTimeout = _this3$options.idleTimeout,\n          finalTimeout = _this3$options.finalTimeout,\n          heartbeatInterval = _this3$options.heartbeatInterval;\n        var op = 'ui.action.click';\n        var currentTransaction = core.getActiveTransaction();\n        if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because a pageload or navigation transaction is in progress.\"));\n          return undefined;\n        }\n        if (inflightInteractionTransaction) {\n          inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n          inflightInteractionTransaction.finish();\n          inflightInteractionTransaction = undefined;\n        }\n        if (!_this3._getCurrentHub) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because _getCurrentHub is invalid.\"));\n          return undefined;\n        }\n        if (!_this3._latestRouteName) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because _latestRouteName is missing.\"));\n          return undefined;\n        }\n        var hub = _this3._getCurrentHub();\n        var location = types.WINDOW.location;\n        var context = {\n          name: _this3._latestRouteName,\n          op: op,\n          trimEnd: true,\n          metadata: {\n            source: _this3._latestRouteSource || 'url'\n          }\n        };\n        inflightInteractionTransaction = core.startIdleTransaction(hub, context, idleTimeout, finalTimeout, true, {\n          location: location\n        },\n        // for use in the tracesSampler\n        heartbeatInterval);\n      };\n      ['click'].forEach(function (type) {\n        addEventListener(type, registerInteractionTransaction, {\n          once: false,\n          capture: true\n        });\n      });\n    }\n  }]);\n  return BrowserTracing;\n}();\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  var metaTag = utils.getDomElement(\"meta[name=\".concat(metaName, \"]\"));\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\nexports.BROWSER_TRACING_INTEGRATION_ID = BROWSER_TRACING_INTEGRATION_ID;\nexports.BrowserTracing = BrowserTracing;\nexports.getMetaContent = getMetaContent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/browsertracing.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/metrics/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/metrics/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar types = __webpack_require__(/*! ../types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\nvar getCLS = __webpack_require__(/*! ../web-vitals/getCLS.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getCLS.js\");\nvar getFID = __webpack_require__(/*! ../web-vitals/getFID.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getFID.js\");\nvar getLCP = __webpack_require__(/*! ../web-vitals/getLCP.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getLCP.js\");\nvar getVisibilityWatcher = __webpack_require__(/*! ../web-vitals/lib/getVisibilityWatcher.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js\");\nvar observe = __webpack_require__(/*! ../web-vitals/lib/observe.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js\");\nvar utils$1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/metrics/utils.js\");\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\nfunction getBrowserPerformanceAPI() {\n  return types.WINDOW && types.WINDOW.addEventListener && types.WINDOW.performance;\n}\nvar _performanceCursor = 0;\nvar _measurements = {};\nvar _lcpEntry;\nvar _clsEntry;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  var performance = getBrowserPerformanceAPI();\n  if (performance && utils.browserPerformanceTimeOrigin) {\n    if (performance.mark) {\n      types.WINDOW.performance.mark('sentry-tracing-init');\n    }\n    _trackFID();\n    var clsCallback = _trackCLS();\n    var lcpCallback = _trackLCP();\n    return function () {\n      if (clsCallback) {\n        clsCallback();\n      }\n      if (lcpCallback) {\n        lcpCallback();\n      }\n    };\n  }\n  return function () {\n    return undefined;\n  };\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  var entryHandler = function entryHandler(entries) {\n    var _iterator = _createForOfIteratorHelper(entries),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var entry = _step.value;\n        var transaction = core.getActiveTransaction();\n        if (!transaction) {\n          return;\n        }\n        var startTime = msToSec(utils.browserPerformanceTimeOrigin + entry.startTime);\n        var duration = msToSec(entry.duration);\n        transaction.startChild({\n          description: 'Main UI thread blocked',\n          op: 'ui.long-task',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  };\n  observe.observe('longtask', entryHandler);\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  var entryHandler = function entryHandler(entries) {\n    var _iterator2 = _createForOfIteratorHelper(entries),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var entry = _step2.value;\n        var transaction = core.getActiveTransaction();\n        if (!transaction) {\n          return;\n        }\n        if (entry.name === 'click') {\n          var startTime = msToSec(utils.browserPerformanceTimeOrigin + entry.startTime);\n          var duration = msToSec(entry.duration);\n          transaction.startChild({\n            description: utils.htmlTreeAsString(entry.target),\n            op: \"ui.interaction.\".concat(entry.name),\n            startTimestamp: startTime,\n            endTimestamp: startTime + duration\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n  observe.observe('event', entryHandler, {\n    durationThreshold: 0\n  });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  return getCLS.onCLS(function (metric) {\n    var entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = {\n      value: metric.value,\n      unit: ''\n    };\n    _clsEntry = entry;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return getLCP.onLCP(function (metric) {\n    var entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _lcpEntry = entry;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  getFID.onFID(function (metric) {\n    var entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    var timeOrigin = msToSec(utils.browserPerformanceTimeOrigin);\n    var startTime = msToSec(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.fid'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(transaction) {\n  var performance = getBrowserPerformanceAPI();\n  if (!performance || !types.WINDOW.performance.getEntries || !utils.browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  var timeOrigin = msToSec(utils.browserPerformanceTimeOrigin);\n  var performanceEntries = performance.getEntries();\n  var responseStartTimestamp;\n  var requestStartTimestamp;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach(function (entry) {\n    var startTime = msToSec(entry.startTime);\n    var duration = msToSec(entry.duration);\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n    switch (entry.entryType) {\n      case 'navigation':\n        {\n          _addNavigationSpans(transaction, entry, timeOrigin);\n          responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n          requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n          break;\n        }\n      case 'mark':\n      case 'paint':\n      case 'measure':\n        {\n          _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n          // capture web vitals\n          var firstHidden = getVisibilityWatcher.getVisibilityWatcher();\n          // Only report if the page wasn't hidden prior to the web vital.\n          var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n          if (entry.name === 'first-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding FP');\n            _measurements['fp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          if (entry.name === 'first-contentful-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding FCP');\n            _measurements['fcp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          break;\n        }\n      case 'resource':\n        {\n          var resourceName = entry.name.replace(types.WINDOW.location.origin, '');\n          _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n          break;\n        }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond'\n      };\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond'\n        };\n      }\n    }\n    ['fcp', 'fp', 'lcp'].forEach(function (name) {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      var oldValue = _measurements[name].value;\n      var measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      var delta = normalizedValue - oldValue;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Measurements] Normalized \".concat(name, \" from \").concat(oldValue, \" to \").concat(normalizedValue, \" (\").concat(delta, \")\"));\n      _measurements[name].value = normalizedValue;\n    });\n    var fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      utils$1._startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        startTimestamp: fidMark.value\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n    Object.keys(_measurements).forEach(function (measurementName) {\n      transaction.setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n    _tagMetricInfo(transaction);\n  }\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n  utils$1._startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, event, timeOrigin, description, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[\"\".concat(event, \"End\")];\n  var start = entry[\"\".concat(event, \"Start\")];\n  if (!start || !end) {\n    return;\n  }\n  utils$1._startChild(transaction, {\n    op: 'browser',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction, entry, timeOrigin) {\n  utils$1._startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n  utils$1._startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var data = {};\n  if ('transferSize' in entry) {\n    data['http.response_transfer_size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['http.response_content_length'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['http.decoded_response_content_length'] = entry.decodedBodySize;\n  }\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n  utils$1._startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\".concat(entry.initiatorType) : 'resource.other',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction) {\n  var navigator = types.WINDOW.navigator;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  var connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n    if (utils$1.isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = {\n        value: connection.rtt,\n        unit: 'millisecond'\n      };\n    }\n  }\n  if (utils$1.isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', \"\".concat(navigator.deviceMemory, \" GB\"));\n  }\n  if (utils$1.isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', utils.htmlTreeAsString(_lcpEntry.element));\n    }\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach(function (source, index) {\n      return transaction.setTag(\"cls.source.\".concat(index + 1), utils.htmlTreeAsString(source.node));\n    });\n  }\n}\nexports._addMeasureSpans = _addMeasureSpans;\nexports._addResourceSpans = _addResourceSpans;\nexports.addPerformanceEntries = addPerformanceEntries;\nexports.startTrackingInteractions = startTrackingInteractions;\nexports.startTrackingLongTasks = startTrackingLongTasks;\nexports.startTrackingWebVitals = startTrackingWebVitals;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/metrics/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/metrics/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/metrics/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nvar _excluded = [\"startTimestamp\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction _startChild(transaction, _ref) {\n  var startTimestamp = _ref.startTimestamp,\n    ctx = _objectWithoutProperties(_ref, _excluded);\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild(_objectSpread({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\nexports._startChild = _startChild;\nexports.isMeasurementValue = isMeasurementValue;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL21ldHJpY3MvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLG1CQUFBQyxLQUFBO0VBQ0EsY0FBQUEsS0FBQSxpQkFBQUMsUUFBQSxDQUFBRCxLQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFFLFlBQUFDLFdBQUEsRUFBQUMsSUFBQTtFQUFBLElBQUFDLGNBQUEsR0FBQUQsSUFBQSxDQUFBQyxjQUFBO0lBQUFDLEdBQUEsR0FBQUMsd0JBQUEsQ0FBQUgsSUFBQSxFQUFBSSxTQUFBO0VBQ0EsSUFBQUgsY0FBQSxJQUFBRixXQUFBLENBQUFFLGNBQUEsR0FBQUEsY0FBQTtJQUNBRixXQUFBLENBQUFFLGNBQUEsR0FBQUEsY0FBQTtFQUNBO0VBRUEsT0FBQUYsV0FBQSxDQUFBTSxVQUFBLENBQUFDLGFBQUE7SUFDQUwsY0FBQSxFQUFBQTtFQUFBLEdBQ0FDLEdBQUEsQ0FDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvbWV0cmljcy91dGlscy50cz83MzA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVHJhbnNhY3Rpb24gfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBTcGFuLCBTcGFuQ29udGV4dCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgbWVhc3VyZW1lbnQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01lYXN1cmVtZW50VmFsdWUodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBudW1iZXIge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHN0YXJ0IGNoaWxkIG9uIHRyYW5zYWN0aW9ucy4gVGhpcyBmdW5jdGlvbiB3aWxsIG1ha2Ugc3VyZSB0aGF0IHRoZSB0cmFuc2FjdGlvbiB3aWxsXG4gKiB1c2UgdGhlIHN0YXJ0IHRpbWVzdGFtcCBvZiB0aGUgY3JlYXRlZCBjaGlsZCBzcGFuIGlmIGl0IGlzIGVhcmxpZXIgdGhhbiB0aGUgdHJhbnNhY3Rpb25zIGFjdHVhbFxuICogc3RhcnQgdGltZXN0YW1wLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX3N0YXJ0Q2hpbGQodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCB7IHN0YXJ0VGltZXN0YW1wLCAuLi5jdHggfTogU3BhbkNvbnRleHQpOiBTcGFuIHtcbiAgaWYgKHN0YXJ0VGltZXN0YW1wICYmIHRyYW5zYWN0aW9uLnN0YXJ0VGltZXN0YW1wID4gc3RhcnRUaW1lc3RhbXApIHtcbiAgICB0cmFuc2FjdGlvbi5zdGFydFRpbWVzdGFtcCA9IHN0YXJ0VGltZXN0YW1wO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zYWN0aW9uLnN0YXJ0Q2hpbGQoe1xuICAgIHN0YXJ0VGltZXN0YW1wLFxuICAgIC4uLmN0eCxcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiaXNNZWFzdXJlbWVudFZhbHVlIiwidmFsdWUiLCJpc0Zpbml0ZSIsIl9zdGFydENoaWxkIiwidHJhbnNhY3Rpb24iLCJfcmVmIiwic3RhcnRUaW1lc3RhbXAiLCJjdHgiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJzdGFydENoaWxkIiwiX29iamVjdFNwcmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/metrics/utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/request.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/request.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nvar DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\n\nvar defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS\n};\n\n/** Registers span creators for xhr and fetch requests  */\nfunction instrumentOutgoingRequests(_options) {\n  // eslint-disable-next-line deprecation/deprecation\n  var _traceFetch$traceXHR$ = _objectSpread({\n      traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n      traceXHR: defaultRequestInstrumentationOptions.traceXHR\n    }, _options),\n    traceFetch = _traceFetch$traceXHR$.traceFetch,\n    traceXHR = _traceFetch$traceXHR$.traceXHR,\n    tracePropagationTargets = _traceFetch$traceXHR$.tracePropagationTargets,\n    tracingOrigins = _traceFetch$traceXHR$.tracingOrigins,\n    shouldCreateSpanForRequest = _traceFetch$traceXHR$.shouldCreateSpanForRequest;\n  var shouldCreateSpan = typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : function (_) {\n    return true;\n  };\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  var shouldAttachHeadersWithTargets = function shouldAttachHeadersWithTargets(url) {\n    return shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n  };\n  var spans = {};\n  if (traceFetch) {\n    utils.addInstrumentationHandler('fetch', function (handlerData) {\n      fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n  if (traceXHR) {\n    utils.addInstrumentationHandler('xhr', function (handlerData) {\n      xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n    });\n  }\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nfunction shouldAttachHeaders(url, tracePropagationTargets) {\n  return utils.stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n */\nfunction fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeaders, spans) {\n  if (!core.hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n  if (handlerData.endTimestamp) {\n    var spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    var span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  var contentLength =\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n  var currentScope = core.getCurrentHub().getScope();\n  var currentSpan = currentScope && currentScope.getSpan();\n  var activeTransaction = currentSpan && currentSpan.transaction;\n  if (currentSpan && activeTransaction) {\n    var _handlerData$fetchDat = handlerData.fetchData,\n      method = _handlerData$fetchDat.method,\n      url = _handlerData$fetchDat.url;\n    var _span = currentSpan.startChild({\n      data: _objectSpread(_objectSpread({\n        url: url,\n        type: 'fetch'\n      }, contentLength ? {\n        'http.response_content_length': contentLength\n      } : {}), {}, {\n        'http.method': method\n      }),\n      description: \"\".concat(method, \" \").concat(url),\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = _span.spanId;\n    spans[_span.spanId] = _span;\n    var request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var options = handlerData.args[1];\n    if (shouldAttachHeaders(handlerData.fetchData.url)) {\n      options.headers = addTracingHeadersToFetchRequest(request, activeTransaction.getDynamicSamplingContext(), _span, options);\n    }\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(request,\n// unknown is actually type Request but we can't export DOM types from this package,\ndynamicSamplingContext, span, options) {\n  var sentryBaggageHeader = utils.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  var sentryTraceHeader = span.toTraceparent();\n  var headers = typeof Request !== 'undefined' && utils.isInstanceOf(request, Request) ? request.headers : options.headers;\n  if (!headers) {\n    return {\n      'sentry-trace': sentryTraceHeader,\n      baggage: sentryBaggageHeader\n    };\n  } else if (typeof Headers !== 'undefined' && utils.isInstanceOf(headers, Headers)) {\n    var newHeaders = new Headers(headers);\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(utils.BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n    return newHeaders;\n  } else if (Array.isArray(headers)) {\n    var _newHeaders = [].concat(_toConsumableArray(headers), [['sentry-trace', sentryTraceHeader]]);\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      _newHeaders.push([utils.BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n    return _newHeaders;\n  } else {\n    var existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    var newBaggageHeaders = [];\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push.apply(newBaggageHeaders, _toConsumableArray(existingBaggageHeader));\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n    return _objectSpread(_objectSpread({}, headers), {}, {\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    });\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nfunction xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeaders, spans) {\n  var xhr = handlerData.xhr;\n  var sentryXhrData = xhr && xhr[utils.SENTRY_XHR_DATA_KEY];\n  if (!core.hasTracingEnabled() || xhr && xhr.__sentry_own_request__ || !(xhr && sentryXhrData && shouldCreateSpan(sentryXhrData.url))) {\n    return;\n  }\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    var spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n    var span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  var currentScope = core.getCurrentHub().getScope();\n  var currentSpan = currentScope && currentScope.getSpan();\n  var activeTransaction = currentSpan && currentSpan.transaction;\n  if (currentSpan && activeTransaction) {\n    var _span2 = currentSpan.startChild({\n      data: _objectSpread(_objectSpread({}, sentryXhrData.data), {}, {\n        type: 'xhr',\n        'http.method': sentryXhrData.method,\n        url: sentryXhrData.url\n      }),\n      description: \"\".concat(sentryXhrData.method, \" \").concat(sentryXhrData.url),\n      op: 'http.client'\n    });\n    xhr.__sentry_xhr_span_id__ = _span2.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = _span2;\n    if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n      try {\n        xhr.setRequestHeader('sentry-trace', _span2.toTraceparent());\n        var dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();\n        var sentryBaggageHeader = utils.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n        if (sentryBaggageHeader) {\n          // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n          // We can therefore simply set a baggage header without checking what was there before\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n          xhr.setRequestHeader(utils.BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n        }\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\nexports.DEFAULT_TRACE_PROPAGATION_TARGETS = DEFAULT_TRACE_PROPAGATION_TARGETS;\nexports.addTracingHeadersToFetchRequest = addTracingHeadersToFetchRequest;\nexports.defaultRequestInstrumentationOptions = defaultRequestInstrumentationOptions;\nexports.fetchCallback = fetchCallback;\nexports.instrumentOutgoingRequests = instrumentOutgoingRequests;\nexports.shouldAttachHeaders = shouldAttachHeaders;\nexports.xhrCallback = xhrCallback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/request.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/router.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/router.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar types = __webpack_require__(/*! ./types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nfunction instrumentRoutingWithDefaults(customStartTransaction) {\n  var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!types.WINDOW || !types.WINDOW.location) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n  var startingUrl = types.WINDOW.location.href;\n  var activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: types.WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: utils.browserPerformanceTimeOrigin ? utils.browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      metadata: {\n        source: 'url'\n      }\n    });\n  }\n  if (startTransactionOnLocationChange) {\n    utils.addInstrumentationHandler('history', function (_ref) {\n      var to = _ref.to,\n        from = _ref.from;\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Finishing current transaction with op: \".concat(activeTransaction.op));\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: types.WINDOW.location.pathname,\n          op: 'navigation',\n          metadata: {\n            source: 'url'\n          }\n        });\n      }\n    });\n  }\n}\nexports.instrumentRoutingWithDefaults = instrumentRoutingWithDefaults;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3JvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSw4QkFDQUMsc0JBQUEsRUFHQTtFQUFBLElBRkFDLDBCQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUFBLElBQ0FHLGdDQUFBLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUVBLEtBQUFJLEtBQUEsQ0FBQUMsTUFBQSxLQUFBRCxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsUUFBQTtJQUNBLFFBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQTtJQUNBO0VBQ0E7RUFFQSxJQUFBQyxXQUFBLEdBQUFQLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFNLElBQUE7RUFFQSxJQUFBQyxpQkFBQTtFQUNBLElBQUFkLDBCQUFBO0lBQ0FjLGlCQUFBLEdBQUFmLHNCQUFBO01BQ0FnQixJQUFBLEVBQUFWLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFTLFFBQUE7TUFDQTtNQUNBQyxjQUFBLEVBQUFSLEtBQUEsQ0FBQVMsNEJBQUEsR0FBQVQsS0FBQSxDQUFBUyw0QkFBQSxVQUFBZixTQUFBO01BQ0FnQixFQUFBO01BQ0FDLFFBQUE7UUFBQUMsTUFBQTtNQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFqQixnQ0FBQTtJQUNBSyxLQUFBLENBQUFhLHlCQUFBLHNCQUFBQyxJQUFBO01BQUEsSUFBQUMsRUFBQSxHQUFBRCxJQUFBLENBQUFDLEVBQUE7UUFBQUMsSUFBQSxHQUFBRixJQUFBLENBQUFFLElBQUE7TUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7TUFDQSxJQUFBQSxJQUFBLEtBQUF0QixTQUFBLElBQUFTLFdBQUEsSUFBQUEsV0FBQSxDQUFBYyxPQUFBLENBQUFGLEVBQUE7UUFDQVosV0FBQSxHQUFBVCxTQUFBO1FBQ0E7TUFDQTtNQUVBLElBQUFzQixJQUFBLEtBQUFELEVBQUE7UUFDQVosV0FBQSxHQUFBVCxTQUFBO1FBQ0EsSUFBQVcsaUJBQUE7VUFDQSxRQUFBTixnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFpQixHQUFBLHFEQUFBQyxNQUFBLENBQUFkLGlCQUFBLENBQUFLLEVBQUE7VUFDQTtVQUNBTCxpQkFBQSxDQUFBZSxNQUFBO1FBQ0E7UUFDQWYsaUJBQUEsR0FBQWYsc0JBQUE7VUFDQWdCLElBQUEsRUFBQVYsS0FBQSxDQUFBQyxNQUFBLENBQUFDLFFBQUEsQ0FBQVMsUUFBQTtVQUNBRyxFQUFBO1VBQ0FDLFFBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQ0E7TUFDQTtJQUNBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9icm93c2VyL3JvdXRlci50cz80Mjk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVHJhbnNhY3Rpb24sIFRyYW5zYWN0aW9uQ29udGV4dCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IFdJTkRPVyB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIERlZmF1bHQgZnVuY3Rpb24gaW1wbGVtZW50aW5nIHBhZ2Vsb2FkIGFuZCBuYXZpZ2F0aW9uIHRyYW5zYWN0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdHJ1bWVudFJvdXRpbmdXaXRoRGVmYXVsdHM8VCBleHRlbmRzIFRyYW5zYWN0aW9uPihcbiAgY3VzdG9tU3RhcnRUcmFuc2FjdGlvbjogKGNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCkgPT4gVCB8IHVuZGVmaW5lZCxcbiAgc3RhcnRUcmFuc2FjdGlvbk9uUGFnZUxvYWQ6IGJvb2xlYW4gPSB0cnVlLFxuICBzdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZTogYm9vbGVhbiA9IHRydWUsXG4pOiB2b2lkIHtcbiAgaWYgKCFXSU5ET1cgfHwgIVdJTkRPVy5sb2NhdGlvbikge1xuICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIud2FybignQ291bGQgbm90IGluaXRpYWxpemUgcm91dGluZyBpbnN0cnVtZW50YXRpb24gZHVlIHRvIGludmFsaWQgbG9jYXRpb24nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgc3RhcnRpbmdVcmw6IHN0cmluZyB8IHVuZGVmaW5lZCA9IFdJTkRPVy5sb2NhdGlvbi5ocmVmO1xuXG4gIGxldCBhY3RpdmVUcmFuc2FjdGlvbjogVCB8IHVuZGVmaW5lZDtcbiAgaWYgKHN0YXJ0VHJhbnNhY3Rpb25PblBhZ2VMb2FkKSB7XG4gICAgYWN0aXZlVHJhbnNhY3Rpb24gPSBjdXN0b21TdGFydFRyYW5zYWN0aW9uKHtcbiAgICAgIG5hbWU6IFdJTkRPVy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIC8vIHBhZ2Vsb2FkIHNob3VsZCBhbHdheXMgc3RhcnQgYXQgdGltZU9yaWdpbiAoYW5kIG5lZWRzIHRvIGJlIGluIHMsIG5vdCBtcylcbiAgICAgIHN0YXJ0VGltZXN0YW1wOiBicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luID8gYnJvd3NlclBlcmZvcm1hbmNlVGltZU9yaWdpbiAvIDEwMDAgOiB1bmRlZmluZWQsXG4gICAgICBvcDogJ3BhZ2Vsb2FkJyxcbiAgICAgIG1ldGFkYXRhOiB7IHNvdXJjZTogJ3VybCcgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzdGFydFRyYW5zYWN0aW9uT25Mb2NhdGlvbkNoYW5nZSkge1xuICAgIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoJ2hpc3RvcnknLCAoeyB0bywgZnJvbSB9OiB7IHRvOiBzdHJpbmc7IGZyb20/OiBzdHJpbmcgfSkgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIGVhcmx5IHJldHVybiBpcyB0aGVyZSB0byBhY2NvdW50IGZvciBzb21lIGNhc2VzIHdoZXJlIGEgbmF2aWdhdGlvbiB0cmFuc2FjdGlvbiBzdGFydHMgcmlnaHQgYWZ0ZXJcbiAgICAgICAqIGxvbmctcnVubmluZyBwYWdlbG9hZC4gV2UgbWFrZSBzdXJlIHRoYXQgaWYgYGZyb21gIGlzIHVuZGVmaW5lZCBhbmQgYSB2YWxpZCBgc3RhcnRpbmdVUkxgIGV4aXN0cywgd2UgZG9uJ3RcbiAgICAgICAqIGNyZWF0ZSBhbiB1bmVjY2Vzc2FyeSBuYXZpZ2F0aW9uIHRyYW5zYWN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgd2FzIGhhcmQgdG8gZHVwbGljYXRlLCBidXQgdGhpcyBiZWhhdmlvciBzdG9wcGVkIGFzIHNvb24gYXMgdGhpcyBmaXggd2FzIGFwcGxpZWQuIFRoaXMgaXNzdWUgbWlnaHQgYWxzb1xuICAgICAgICogb25seSBiZSBjYXVzZWQgaW4gY2VydGFpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIHVzYWdlIG9mIGEgaG90IG1vZHVsZSByZWxvYWRlciBpcyBjYXVzaW5nXG4gICAgICAgKiBlcnJvcnMuXG4gICAgICAgKi9cbiAgICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQgJiYgc3RhcnRpbmdVcmwgJiYgc3RhcnRpbmdVcmwuaW5kZXhPZih0bykgIT09IC0xKSB7XG4gICAgICAgIHN0YXJ0aW5nVXJsID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChmcm9tICE9PSB0bykge1xuICAgICAgICBzdGFydGluZ1VybCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGFjdGl2ZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5sb2coYFtUcmFjaW5nXSBGaW5pc2hpbmcgY3VycmVudCB0cmFuc2FjdGlvbiB3aXRoIG9wOiAke2FjdGl2ZVRyYW5zYWN0aW9uLm9wfWApO1xuICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gb3BlbiB0cmFuc2FjdGlvbiBvbiB0aGUgc2NvcGUsIHdlIG5lZWQgdG8gZmluaXNoIGl0IGJlZm9yZSBjcmVhdGluZyBhbiBuZXcgb25lLlxuICAgICAgICAgIGFjdGl2ZVRyYW5zYWN0aW9uLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZVRyYW5zYWN0aW9uID0gY3VzdG9tU3RhcnRUcmFuc2FjdGlvbih7XG4gICAgICAgICAgbmFtZTogV0lORE9XLmxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIG9wOiAnbmF2aWdhdGlvbicsXG4gICAgICAgICAgbWV0YWRhdGE6IHsgc291cmNlOiAndXJsJyB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImluc3RydW1lbnRSb3V0aW5nV2l0aERlZmF1bHRzIiwiY3VzdG9tU3RhcnRUcmFuc2FjdGlvbiIsInN0YXJ0VHJhbnNhY3Rpb25PblBhZ2VMb2FkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwic3RhcnRUcmFuc2FjdGlvbk9uTG9jYXRpb25DaGFuZ2UiLCJ0eXBlcyIsIldJTkRPVyIsImxvY2F0aW9uIiwiX19TRU5UUllfREVCVUdfXyIsInV0aWxzIiwibG9nZ2VyIiwid2FybiIsInN0YXJ0aW5nVXJsIiwiaHJlZiIsImFjdGl2ZVRyYW5zYWN0aW9uIiwibmFtZSIsInBhdGhuYW1lIiwic3RhcnRUaW1lc3RhbXAiLCJicm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luIiwib3AiLCJtZXRhZGF0YSIsInNvdXJjZSIsImFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJfcmVmIiwidG8iLCJmcm9tIiwiaW5kZXhPZiIsImxvZyIsImNvbmNhdCIsImZpbmlzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/router.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar WINDOW = utils.GLOBAL_OBJ;\nexports.WINDOW = WINDOW;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3R5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLEtBQUEsQ0FBQUMsVUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9icm93c2VyL3R5cGVzLnRzP2NjODYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgV0lORE9XID0gR0xPQkFMX09CSiBhcyB0eXBlb2YgR0xPQkFMX09CSiAmIFdpbmRvdztcbiJdLCJuYW1lcyI6WyJXSU5ET1ciLCJ1dGlscyIsIkdMT0JBTF9PQkoiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/types.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getCLS.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getCLS.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar bindReporter = __webpack_require__(/*! ./lib/bindReporter.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js\");\nvar initMetric = __webpack_require__(/*! ./lib/initMetric.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js\");\nvar observe = __webpack_require__(/*! ./lib/observe.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js\");\nvar onHidden = __webpack_require__(/*! ./lib/onHidden.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nvar onCLS = function onCLS(onReport) {\n  var metric = initMetric.initMetric('CLS', 0);\n  var report;\n  var sessionValue = 0;\n  var sessionEntries = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  var handleEntries = function handleEntries(entries) {\n    entries.forEach(function (entry) {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        var firstSessionEntry = sessionEntries[0];\n        var lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n  var po = observe.observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter.bindReporter(onReport, metric);\n    var stopListening = function stopListening() {\n      handleEntries(po.takeRecords());\n      report(true);\n    };\n    onHidden.onHidden(stopListening);\n    return stopListening;\n  }\n  return;\n};\nexports.onCLS = onCLS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvZ2V0Q0xTLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFBQSxLQUFBLFlBQUFBLE1BQUFDLFFBQUE7RUFDQSxJQUFBQyxNQUFBLEdBQUFDLFVBQUEsQ0FBQUEsVUFBQTtFQUNBLElBQUFDLE1BQUE7RUFFQSxJQUFBQyxZQUFBO0VBQ0EsSUFBQUMsY0FBQTs7RUFFQTtFQUNBLElBQUFDLGFBQUEsWUFBQUEsY0FBQUMsT0FBQTtJQUNBQSxPQUFBLENBQUFDLE9BQUEsV0FBQUMsS0FBQTtNQUNBO01BQ0EsS0FBQUEsS0FBQSxDQUFBQyxjQUFBO1FBQ0EsSUFBQUMsaUJBQUEsR0FBQU4sY0FBQTtRQUNBLElBQUFPLGdCQUFBLEdBQUFQLGNBQUEsQ0FBQUEsY0FBQSxDQUFBUSxNQUFBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLElBQ0FULFlBQUEsSUFDQUMsY0FBQSxDQUFBUSxNQUFBLFVBQ0FKLEtBQUEsQ0FBQUssU0FBQSxHQUFBRixnQkFBQSxDQUFBRSxTQUFBLFdBQ0FMLEtBQUEsQ0FBQUssU0FBQSxHQUFBSCxpQkFBQSxDQUFBRyxTQUFBLFNBQ0E7VUFDQVYsWUFBQSxJQUFBSyxLQUFBLENBQUFNLEtBQUE7VUFDQVYsY0FBQSxDQUFBVyxJQUFBLENBQUFQLEtBQUE7UUFDQTtVQUNBTCxZQUFBLEdBQUFLLEtBQUEsQ0FBQU0sS0FBQTtVQUNBVixjQUFBLElBQUFJLEtBQUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0EsSUFBQUwsWUFBQSxHQUFBSCxNQUFBLENBQUFjLEtBQUE7VUFDQWQsTUFBQSxDQUFBYyxLQUFBLEdBQUFYLFlBQUE7VUFDQUgsTUFBQSxDQUFBTSxPQUFBLEdBQUFGLGNBQUE7VUFDQSxJQUFBRixNQUFBO1lBQ0FBLE1BQUE7VUFDQTtRQUNBO01BQ0E7SUFDQTtFQUNBO0VBRUEsSUFBQWMsRUFBQSxHQUFBQyxPQUFBLENBQUFBLE9BQUEsaUJBQUFaLGFBQUE7RUFDQSxJQUFBVyxFQUFBO0lBQ0FkLE1BQUEsR0FBQWdCLFlBQUEsQ0FBQUEsWUFBQSxDQUFBbkIsUUFBQSxFQUFBQyxNQUFBO0lBRUEsSUFBQW1CLGFBQUEsWUFBQUEsY0FBQTtNQUNBZCxhQUFBLENBQUFXLEVBQUEsQ0FBQUksV0FBQTtNQUNBbEIsTUFBQTtJQUNBO0lBRUFtQixRQUFBLENBQUFBLFFBQUEsQ0FBQUYsYUFBQTtJQUVBLE9BQUFBLGFBQUE7RUFDQTtFQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci93ZWItdml0YWxzL2dldENMUy50cz85OTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBiaW5kUmVwb3J0ZXIgfSBmcm9tICcuL2xpYi9iaW5kUmVwb3J0ZXInO1xuaW1wb3J0IHsgaW5pdE1ldHJpYyB9IGZyb20gJy4vbGliL2luaXRNZXRyaWMnO1xuaW1wb3J0IHsgb2JzZXJ2ZSB9IGZyb20gJy4vbGliL29ic2VydmUnO1xuaW1wb3J0IHsgb25IaWRkZW4gfSBmcm9tICcuL2xpYi9vbkhpZGRlbic7XG5pbXBvcnQgdHlwZSB7IENMU01ldHJpYywgUmVwb3J0Q2FsbGJhY2ssIFN0b3BMaXN0ZW5pbmcgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBbQ0xTXShodHRwczovL3dlYi5kZXYvY2xzLykgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHBhZ2UgYW5kXG4gKiBjYWxscyB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbiBvbmNlIHRoZSB2YWx1ZSBpcyByZWFkeSB0byBiZSByZXBvcnRlZCwgYWxvbmdcbiAqIHdpdGggYWxsIGBsYXlvdXQtc2hpZnRgIHBlcmZvcm1hbmNlIGVudHJpZXMgdGhhdCB3ZXJlIHVzZWQgaW4gdGhlIG1ldHJpY1xuICogdmFsdWUgY2FsY3VsYXRpb24uIFRoZSByZXBvcnRlZCB2YWx1ZSBpcyBhIGBkb3VibGVgIChjb3JyZXNwb25kaW5nIHRvIGFcbiAqIFtsYXlvdXQgc2hpZnQgc2NvcmVdKGh0dHBzOi8vd2ViLmRldi9jbHMvI2xheW91dC1zaGlmdC1zY29yZSkpLlxuICpcbiAqIElmIHRoZSBgcmVwb3J0QWxsQ2hhbmdlc2AgY29uZmlndXJhdGlvbiBvcHRpb24gaXMgc2V0IHRvIGB0cnVlYCwgdGhlXG4gKiBgY2FsbGJhY2tgIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFzIHNvb24gYXMgdGhlIHZhbHVlIGlzIGluaXRpYWxseVxuICogZGV0ZXJtaW5lZCBhcyB3ZWxsIGFzIGFueSB0aW1lIHRoZSB2YWx1ZSBjaGFuZ2VzIHRocm91Z2hvdXQgdGhlIHBhZ2VcbiAqIGxpZmVzcGFuLlxuICpcbiAqIF8qKkltcG9ydGFudDoqKiBDTFMgc2hvdWxkIGJlIGNvbnRpbnVhbGx5IG1vbml0b3JlZCBmb3IgY2hhbmdlcyB0aHJvdWdob3V0XG4gKiB0aGUgZW50aXJlIGxpZmVzcGFuIG9mIGEgcGFnZeKAlGluY2x1ZGluZyBpZiB0aGUgdXNlciByZXR1cm5zIHRvIHRoZSBwYWdlIGFmdGVyXG4gKiBpdCdzIGJlZW4gaGlkZGVuL2JhY2tncm91bmRlZC4gSG93ZXZlciwgc2luY2UgYnJvd3NlcnMgb2Z0ZW4gW3dpbGwgbm90IGZpcmVcbiAqIGFkZGl0aW9uYWwgY2FsbGJhY2tzIG9uY2UgdGhlIHVzZXIgaGFzIGJhY2tncm91bmRlZCBhXG4gKiBwYWdlXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2Jsb2cvcGFnZS1saWZlY3ljbGUtYXBpLyNhZHZpY2UtaGlkZGVuKSxcbiAqIGBjYWxsYmFja2AgaXMgYWx3YXlzIGNhbGxlZCB3aGVuIHRoZSBwYWdlJ3MgdmlzaWJpbGl0eSBzdGF0ZSBjaGFuZ2VzIHRvXG4gKiBoaWRkZW4uIEFzIGEgcmVzdWx0LCB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbiBtaWdodCBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbiAqIGR1cmluZyB0aGUgc2FtZSBwYWdlIGxvYWQuX1xuICovXG5leHBvcnQgY29uc3Qgb25DTFMgPSAob25SZXBvcnQ6IFJlcG9ydENhbGxiYWNrKTogU3RvcExpc3RlbmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IG1ldHJpYyA9IGluaXRNZXRyaWMoJ0NMUycsIDApO1xuICBsZXQgcmVwb3J0OiBSZXR1cm5UeXBlPHR5cGVvZiBiaW5kUmVwb3J0ZXI+O1xuXG4gIGxldCBzZXNzaW9uVmFsdWUgPSAwO1xuICBsZXQgc2Vzc2lvbkVudHJpZXM6IFBlcmZvcm1hbmNlRW50cnlbXSA9IFtdO1xuXG4gIC8vIGNvbnN0IGhhbmRsZUVudHJpZXMgPSAoZW50cmllczogTWV0cmljWydlbnRyaWVzJ10pID0+IHtcbiAgY29uc3QgaGFuZGxlRW50cmllcyA9IChlbnRyaWVzOiBMYXlvdXRTaGlmdFtdKTogdm9pZCA9PiB7XG4gICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgIC8vIE9ubHkgY291bnQgbGF5b3V0IHNoaWZ0cyB3aXRob3V0IHJlY2VudCB1c2VyIGlucHV0LlxuICAgICAgaWYgKCFlbnRyeS5oYWRSZWNlbnRJbnB1dCkge1xuICAgICAgICBjb25zdCBmaXJzdFNlc3Npb25FbnRyeSA9IHNlc3Npb25FbnRyaWVzWzBdO1xuICAgICAgICBjb25zdCBsYXN0U2Vzc2lvbkVudHJ5ID0gc2Vzc2lvbkVudHJpZXNbc2Vzc2lvbkVudHJpZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgLy8gSWYgdGhlIGVudHJ5IG9jY3VycmVkIGxlc3MgdGhhbiAxIHNlY29uZCBhZnRlciB0aGUgcHJldmlvdXMgZW50cnkgYW5kXG4gICAgICAgIC8vIGxlc3MgdGhhbiA1IHNlY29uZHMgYWZ0ZXIgdGhlIGZpcnN0IGVudHJ5IGluIHRoZSBzZXNzaW9uLCBpbmNsdWRlIHRoZVxuICAgICAgICAvLyBlbnRyeSBpbiB0aGUgY3VycmVudCBzZXNzaW9uLiBPdGhlcndpc2UsIHN0YXJ0IGEgbmV3IHNlc3Npb24uXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZXNzaW9uVmFsdWUgJiZcbiAgICAgICAgICBzZXNzaW9uRW50cmllcy5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICBlbnRyeS5zdGFydFRpbWUgLSBsYXN0U2Vzc2lvbkVudHJ5LnN0YXJ0VGltZSA8IDEwMDAgJiZcbiAgICAgICAgICBlbnRyeS5zdGFydFRpbWUgLSBmaXJzdFNlc3Npb25FbnRyeS5zdGFydFRpbWUgPCA1MDAwXG4gICAgICAgICkge1xuICAgICAgICAgIHNlc3Npb25WYWx1ZSArPSBlbnRyeS52YWx1ZTtcbiAgICAgICAgICBzZXNzaW9uRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXNzaW9uVmFsdWUgPSBlbnRyeS52YWx1ZTtcbiAgICAgICAgICBzZXNzaW9uRW50cmllcyA9IFtlbnRyeV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBzZXNzaW9uIHZhbHVlIGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IENMUyB2YWx1ZSxcbiAgICAgICAgLy8gdXBkYXRlIENMUyBhbmQgdGhlIGVudHJpZXMgY29udHJpYnV0aW5nIHRvIGl0LlxuICAgICAgICBpZiAoc2Vzc2lvblZhbHVlID4gbWV0cmljLnZhbHVlKSB7XG4gICAgICAgICAgbWV0cmljLnZhbHVlID0gc2Vzc2lvblZhbHVlO1xuICAgICAgICAgIG1ldHJpYy5lbnRyaWVzID0gc2Vzc2lvbkVudHJpZXM7XG4gICAgICAgICAgaWYgKHJlcG9ydCkge1xuICAgICAgICAgICAgcmVwb3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgcG8gPSBvYnNlcnZlKCdsYXlvdXQtc2hpZnQnLCBoYW5kbGVFbnRyaWVzKTtcbiAgaWYgKHBvKSB7XG4gICAgcmVwb3J0ID0gYmluZFJlcG9ydGVyKG9uUmVwb3J0LCBtZXRyaWMpO1xuXG4gICAgY29uc3Qgc3RvcExpc3RlbmluZyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGhhbmRsZUVudHJpZXMocG8udGFrZVJlY29yZHMoKSBhcyBDTFNNZXRyaWNbJ2VudHJpZXMnXSk7XG4gICAgICByZXBvcnQodHJ1ZSk7XG4gICAgfTtcblxuICAgIG9uSGlkZGVuKHN0b3BMaXN0ZW5pbmcpO1xuXG4gICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmc7XG4gIH1cblxuICByZXR1cm47XG59O1xuIl0sIm5hbWVzIjpbIm9uQ0xTIiwib25SZXBvcnQiLCJtZXRyaWMiLCJpbml0TWV0cmljIiwicmVwb3J0Iiwic2Vzc2lvblZhbHVlIiwic2Vzc2lvbkVudHJpZXMiLCJoYW5kbGVFbnRyaWVzIiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsImhhZFJlY2VudElucHV0IiwiZmlyc3RTZXNzaW9uRW50cnkiLCJsYXN0U2Vzc2lvbkVudHJ5IiwibGVuZ3RoIiwic3RhcnRUaW1lIiwidmFsdWUiLCJwdXNoIiwicG8iLCJvYnNlcnZlIiwiYmluZFJlcG9ydGVyIiwic3RvcExpc3RlbmluZyIsInRha2VSZWNvcmRzIiwib25IaWRkZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getCLS.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getFID.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getFID.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar bindReporter = __webpack_require__(/*! ./lib/bindReporter.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js\");\nvar getVisibilityWatcher = __webpack_require__(/*! ./lib/getVisibilityWatcher.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js\");\nvar initMetric = __webpack_require__(/*! ./lib/initMetric.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js\");\nvar observe = __webpack_require__(/*! ./lib/observe.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js\");\nvar onHidden = __webpack_require__(/*! ./lib/onHidden.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nvar onFID = function onFID(onReport) {\n  var visibilityWatcher = getVisibilityWatcher.getVisibilityWatcher();\n  var metric = initMetric.initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  var report;\n  var handleEntry = function handleEntry(entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n  var handleEntries = function handleEntries(entries) {\n    entries.forEach(handleEntry);\n  };\n  var po = observe.observe('first-input', handleEntries);\n  report = bindReporter.bindReporter(onReport, metric);\n  if (po) {\n    onHidden.onHidden(function () {\n      handleEntries(po.takeRecords());\n      po.disconnect();\n    }, true);\n  }\n};\nexports.onFID = onFID;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvZ2V0RklELmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBQUEsS0FBQSxZQUFBQSxNQUFBQyxRQUFBO0VBQ0EsSUFBQUMsaUJBQUEsR0FBQUMsb0JBQUEsQ0FBQUEsb0JBQUE7RUFDQSxJQUFBQyxNQUFBLEdBQUFDLFVBQUEsQ0FBQUEsVUFBQTtFQUNBO0VBQ0EsSUFBQUMsTUFBQTtFQUVBLElBQUFDLFdBQUEsWUFBQUEsWUFBQUMsS0FBQTtJQUNBO0lBQ0EsSUFBQUEsS0FBQSxDQUFBQyxTQUFBLEdBQUFQLGlCQUFBLENBQUFRLGVBQUE7TUFDQU4sTUFBQSxDQUFBTyxLQUFBLEdBQUFILEtBQUEsQ0FBQUksZUFBQSxHQUFBSixLQUFBLENBQUFDLFNBQUE7TUFDQUwsTUFBQSxDQUFBUyxPQUFBLENBQUFDLElBQUEsQ0FBQU4sS0FBQTtNQUNBRixNQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFTLGFBQUEsWUFBQUEsY0FBQUYsT0FBQTtJQUNBQSxPQUFBLENBQUFHLE9BQUEsQ0FBQVQsV0FBQTtFQUNBO0VBRUEsSUFBQVUsRUFBQSxHQUFBQyxPQUFBLENBQUFBLE9BQUEsZ0JBQUFILGFBQUE7RUFDQVQsTUFBQSxHQUFBYSxZQUFBLENBQUFBLFlBQUEsQ0FBQWxCLFFBQUEsRUFBQUcsTUFBQTtFQUVBLElBQUFhLEVBQUE7SUFDQUcsUUFBQSxDQUFBQSxRQUFBO01BQ0FMLGFBQUEsQ0FBQUUsRUFBQSxDQUFBSSxXQUFBO01BQ0FKLEVBQUEsQ0FBQUssVUFBQTtJQUNBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3dlYi12aXRhbHMvZ2V0RklELnRzP2Q1ODQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJpbmRSZXBvcnRlciB9IGZyb20gJy4vbGliL2JpbmRSZXBvcnRlcic7XG5pbXBvcnQgeyBnZXRWaXNpYmlsaXR5V2F0Y2hlciB9IGZyb20gJy4vbGliL2dldFZpc2liaWxpdHlXYXRjaGVyJztcbmltcG9ydCB7IGluaXRNZXRyaWMgfSBmcm9tICcuL2xpYi9pbml0TWV0cmljJztcbmltcG9ydCB7IG9ic2VydmUgfSBmcm9tICcuL2xpYi9vYnNlcnZlJztcbmltcG9ydCB7IG9uSGlkZGVuIH0gZnJvbSAnLi9saWIvb25IaWRkZW4nO1xuaW1wb3J0IHR5cGUgeyBGSURNZXRyaWMsIFBlcmZvcm1hbmNlRXZlbnRUaW1pbmcsIFJlcG9ydENhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgW0ZJRF0oaHR0cHM6Ly93ZWIuZGV2L2ZpZC8pIHZhbHVlIGZvciB0aGUgY3VycmVudCBwYWdlIGFuZFxuICogY2FsbHMgdGhlIGBjYWxsYmFja2AgZnVuY3Rpb24gb25jZSB0aGUgdmFsdWUgaXMgcmVhZHksIGFsb25nIHdpdGggdGhlXG4gKiByZWxldmFudCBgZmlyc3QtaW5wdXRgIHBlcmZvcm1hbmNlIGVudHJ5IHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSB2YWx1ZS4gVGhlXG4gKiByZXBvcnRlZCB2YWx1ZSBpcyBhIGBET01IaWdoUmVzVGltZVN0YW1wYC5cbiAqXG4gKiBfKipJbXBvcnRhbnQ6Kiogc2luY2UgRklEIGlzIG9ubHkgcmVwb3J0ZWQgYWZ0ZXIgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlXG4gKiBwYWdlLCBpdCdzIHBvc3NpYmxlIHRoYXQgaXQgd2lsbCBub3QgYmUgcmVwb3J0ZWQgZm9yIHNvbWUgcGFnZSBsb2Fkcy5fXG4gKi9cbmV4cG9ydCBjb25zdCBvbkZJRCA9IChvblJlcG9ydDogUmVwb3J0Q2FsbGJhY2spOiB2b2lkID0+IHtcbiAgY29uc3QgdmlzaWJpbGl0eVdhdGNoZXIgPSBnZXRWaXNpYmlsaXR5V2F0Y2hlcigpO1xuICBjb25zdCBtZXRyaWMgPSBpbml0TWV0cmljKCdGSUQnKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICBsZXQgcmVwb3J0OiBSZXR1cm5UeXBlPHR5cGVvZiBiaW5kUmVwb3J0ZXI+O1xuXG4gIGNvbnN0IGhhbmRsZUVudHJ5ID0gKGVudHJ5OiBQZXJmb3JtYW5jZUV2ZW50VGltaW5nKTogdm9pZCA9PiB7XG4gICAgLy8gT25seSByZXBvcnQgaWYgdGhlIHBhZ2Ugd2Fzbid0IGhpZGRlbiBwcmlvciB0byB0aGUgZmlyc3QgaW5wdXQuXG4gICAgaWYgKGVudHJ5LnN0YXJ0VGltZSA8IHZpc2liaWxpdHlXYXRjaGVyLmZpcnN0SGlkZGVuVGltZSkge1xuICAgICAgbWV0cmljLnZhbHVlID0gZW50cnkucHJvY2Vzc2luZ1N0YXJ0IC0gZW50cnkuc3RhcnRUaW1lO1xuICAgICAgbWV0cmljLmVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICByZXBvcnQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUVudHJpZXMgPSAoZW50cmllczogRklETWV0cmljWydlbnRyaWVzJ10pOiB2b2lkID0+IHtcbiAgICAoZW50cmllcyBhcyBQZXJmb3JtYW5jZUV2ZW50VGltaW5nW10pLmZvckVhY2goaGFuZGxlRW50cnkpO1xuICB9O1xuXG4gIGNvbnN0IHBvID0gb2JzZXJ2ZSgnZmlyc3QtaW5wdXQnLCBoYW5kbGVFbnRyaWVzKTtcbiAgcmVwb3J0ID0gYmluZFJlcG9ydGVyKG9uUmVwb3J0LCBtZXRyaWMpO1xuXG4gIGlmIChwbykge1xuICAgIG9uSGlkZGVuKCgpID0+IHtcbiAgICAgIGhhbmRsZUVudHJpZXMocG8udGFrZVJlY29yZHMoKSBhcyBGSURNZXRyaWNbJ2VudHJpZXMnXSk7XG4gICAgICBwby5kaXNjb25uZWN0KCk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsib25GSUQiLCJvblJlcG9ydCIsInZpc2liaWxpdHlXYXRjaGVyIiwiZ2V0VmlzaWJpbGl0eVdhdGNoZXIiLCJtZXRyaWMiLCJpbml0TWV0cmljIiwicmVwb3J0IiwiaGFuZGxlRW50cnkiLCJlbnRyeSIsInN0YXJ0VGltZSIsImZpcnN0SGlkZGVuVGltZSIsInZhbHVlIiwicHJvY2Vzc2luZ1N0YXJ0IiwiZW50cmllcyIsInB1c2giLCJoYW5kbGVFbnRyaWVzIiwiZm9yRWFjaCIsInBvIiwib2JzZXJ2ZSIsImJpbmRSZXBvcnRlciIsIm9uSGlkZGVuIiwidGFrZVJlY29yZHMiLCJkaXNjb25uZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getFID.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getLCP.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getLCP.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar bindReporter = __webpack_require__(/*! ./lib/bindReporter.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js\");\nvar getActivationStart = __webpack_require__(/*! ./lib/getActivationStart.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getActivationStart.js\");\nvar getVisibilityWatcher = __webpack_require__(/*! ./lib/getVisibilityWatcher.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js\");\nvar initMetric = __webpack_require__(/*! ./lib/initMetric.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js\");\nvar observe = __webpack_require__(/*! ./lib/observe.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js\");\nvar onHidden = __webpack_require__(/*! ./lib/onHidden.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nvar onLCP = function onLCP(onReport) {\n  var visibilityWatcher = getVisibilityWatcher.getVisibilityWatcher();\n  var metric = initMetric.initMetric('LCP');\n  var report;\n  var handleEntries = function handleEntries(entries) {\n    var lastEntry = entries[entries.length - 1];\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      var value = Math.max(lastEntry.startTime - getActivationStart.getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n  var po = observe.observe('largest-contentful-paint', handleEntries);\n  if (po) {\n    report = bindReporter.bindReporter(onReport, metric);\n    var stopListening = function stopListening() {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords());\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(function (type) {\n      addEventListener(type, stopListening, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden.onHidden(stopListening, true);\n    return stopListening;\n  }\n  return;\n};\nexports.onLCP = onLCP;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvZ2V0TENQLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBVUEsSUFBQUEsaUJBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBQUMsS0FBQSxZQUFBQSxNQUFBQyxRQUFBO0VBQ0EsSUFBQUMsaUJBQUEsR0FBQUMsb0JBQUEsQ0FBQUEsb0JBQUE7RUFDQSxJQUFBQyxNQUFBLEdBQUFDLFVBQUEsQ0FBQUEsVUFBQTtFQUNBLElBQUFDLE1BQUE7RUFFQSxJQUFBQyxhQUFBLFlBQUFBLGNBQUFDLE9BQUE7SUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUEsQ0FBQUEsT0FBQSxDQUFBRSxNQUFBO0lBQ0EsSUFBQUQsU0FBQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0EsSUFBQUUsS0FBQSxHQUFBQyxJQUFBLENBQUFDLEdBQUEsQ0FBQUosU0FBQSxDQUFBSyxTQUFBLEdBQUFDLGtCQUFBLENBQUFBLGtCQUFBOztNQUVBO01BQ0EsSUFBQUosS0FBQSxHQUFBVCxpQkFBQSxDQUFBYyxlQUFBO1FBQ0FaLE1BQUEsQ0FBQU8sS0FBQSxHQUFBQSxLQUFBO1FBQ0FQLE1BQUEsQ0FBQUksT0FBQSxJQUFBQyxTQUFBO1FBQ0FILE1BQUE7TUFDQTtJQUNBO0VBQ0E7RUFFQSxJQUFBVyxFQUFBLEdBQUFDLE9BQUEsQ0FBQUEsT0FBQSw2QkFBQVgsYUFBQTtFQUVBLElBQUFVLEVBQUE7SUFDQVgsTUFBQSxHQUFBYSxZQUFBLENBQUFBLFlBQUEsQ0FBQWxCLFFBQUEsRUFBQUcsTUFBQTtJQUVBLElBQUFnQixhQUFBLFlBQUFBLGNBQUE7TUFDQSxLQUFBckIsaUJBQUEsQ0FBQUssTUFBQSxDQUFBaUIsRUFBQTtRQUNBZCxhQUFBLENBQUFVLEVBQUEsQ0FBQUssV0FBQTtRQUNBTCxFQUFBLENBQUFNLFVBQUE7UUFDQXhCLGlCQUFBLENBQUFLLE1BQUEsQ0FBQWlCLEVBQUE7UUFDQWYsTUFBQTtNQUNBO0lBQ0E7O0lBRUE7SUFDQTtJQUNBO0lBQ0EscUJBQUFrQixPQUFBLFdBQUFDLElBQUE7TUFDQUMsZ0JBQUEsQ0FBQUQsSUFBQSxFQUFBTCxhQUFBO1FBQUFPLElBQUE7UUFBQUMsT0FBQTtNQUFBO0lBQ0E7SUFFQUMsUUFBQSxDQUFBQSxRQUFBLENBQUFULGFBQUE7SUFFQSxPQUFBQSxhQUFBO0VBQ0E7RUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvd2ViLXZpdGFscy9nZXRMQ1AudHM/YjJiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYmluZFJlcG9ydGVyIH0gZnJvbSAnLi9saWIvYmluZFJlcG9ydGVyJztcbmltcG9ydCB7IGdldEFjdGl2YXRpb25TdGFydCB9IGZyb20gJy4vbGliL2dldEFjdGl2YXRpb25TdGFydCc7XG5pbXBvcnQgeyBnZXRWaXNpYmlsaXR5V2F0Y2hlciB9IGZyb20gJy4vbGliL2dldFZpc2liaWxpdHlXYXRjaGVyJztcbmltcG9ydCB7IGluaXRNZXRyaWMgfSBmcm9tICcuL2xpYi9pbml0TWV0cmljJztcbmltcG9ydCB7IG9ic2VydmUgfSBmcm9tICcuL2xpYi9vYnNlcnZlJztcbmltcG9ydCB7IG9uSGlkZGVuIH0gZnJvbSAnLi9saWIvb25IaWRkZW4nO1xuaW1wb3J0IHR5cGUgeyBMQ1BNZXRyaWMsIFJlcG9ydENhbGxiYWNrLCBTdG9wTGlzdGVuaW5nIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IHJlcG9ydGVkTWV0cmljSURzOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIFtMQ1BdKGh0dHBzOi8vd2ViLmRldi9sY3AvKSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgcGFnZSBhbmRcbiAqIGNhbGxzIHRoZSBgY2FsbGJhY2tgIGZ1bmN0aW9uIG9uY2UgdGhlIHZhbHVlIGlzIHJlYWR5IChhbG9uZyB3aXRoIHRoZVxuICogcmVsZXZhbnQgYGxhcmdlc3QtY29udGVudGZ1bC1wYWludGAgcGVyZm9ybWFuY2UgZW50cnkgdXNlZCB0byBkZXRlcm1pbmUgdGhlXG4gKiB2YWx1ZSkuIFRoZSByZXBvcnRlZCB2YWx1ZSBpcyBhIGBET01IaWdoUmVzVGltZVN0YW1wYC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9uTENQID0gKG9uUmVwb3J0OiBSZXBvcnRDYWxsYmFjayk6IFN0b3BMaXN0ZW5pbmcgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCB2aXNpYmlsaXR5V2F0Y2hlciA9IGdldFZpc2liaWxpdHlXYXRjaGVyKCk7XG4gIGNvbnN0IG1ldHJpYyA9IGluaXRNZXRyaWMoJ0xDUCcpO1xuICBsZXQgcmVwb3J0OiBSZXR1cm5UeXBlPHR5cGVvZiBiaW5kUmVwb3J0ZXI+O1xuXG4gIGNvbnN0IGhhbmRsZUVudHJpZXMgPSAoZW50cmllczogTENQTWV0cmljWydlbnRyaWVzJ10pOiB2b2lkID0+IHtcbiAgICBjb25zdCBsYXN0RW50cnkgPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV0gYXMgTGFyZ2VzdENvbnRlbnRmdWxQYWludDtcbiAgICBpZiAobGFzdEVudHJ5KSB7XG4gICAgICAvLyBUaGUgc3RhcnRUaW1lIGF0dHJpYnV0ZSByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgcmVuZGVyVGltZSBpZiBpdCBpc1xuICAgICAgLy8gbm90IDAsIGFuZCB0aGUgdmFsdWUgb2YgdGhlIGxvYWRUaW1lIG90aGVyd2lzZS4gVGhlIGFjdGl2YXRpb25TdGFydFxuICAgICAgLy8gcmVmZXJlbmNlIGlzIHVzZWQgYmVjYXVzZSBMQ1Agc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHBhZ2UgYWN0aXZhdGlvblxuICAgICAgLy8gcmF0aGVyIHRoYW4gbmF2aWdhdGlvbiBzdGFydCBpZiB0aGUgcGFnZSB3YXMgcHJlcmVuZGVyZWQuXG4gICAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KGxhc3RFbnRyeS5zdGFydFRpbWUgLSBnZXRBY3RpdmF0aW9uU3RhcnQoKSwgMCk7XG5cbiAgICAgIC8vIE9ubHkgcmVwb3J0IGlmIHRoZSBwYWdlIHdhc24ndCBoaWRkZW4gcHJpb3IgdG8gTENQLlxuICAgICAgaWYgKHZhbHVlIDwgdmlzaWJpbGl0eVdhdGNoZXIuZmlyc3RIaWRkZW5UaW1lKSB7XG4gICAgICAgIG1ldHJpYy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBtZXRyaWMuZW50cmllcyA9IFtsYXN0RW50cnldO1xuICAgICAgICByZXBvcnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcG8gPSBvYnNlcnZlKCdsYXJnZXN0LWNvbnRlbnRmdWwtcGFpbnQnLCBoYW5kbGVFbnRyaWVzKTtcblxuICBpZiAocG8pIHtcbiAgICByZXBvcnQgPSBiaW5kUmVwb3J0ZXIob25SZXBvcnQsIG1ldHJpYyk7XG5cbiAgICBjb25zdCBzdG9wTGlzdGVuaW5nID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFyZXBvcnRlZE1ldHJpY0lEc1ttZXRyaWMuaWRdKSB7XG4gICAgICAgIGhhbmRsZUVudHJpZXMocG8udGFrZVJlY29yZHMoKSBhcyBMQ1BNZXRyaWNbJ2VudHJpZXMnXSk7XG4gICAgICAgIHBvLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgcmVwb3J0ZWRNZXRyaWNJRHNbbWV0cmljLmlkXSA9IHRydWU7XG4gICAgICAgIHJlcG9ydCh0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gU3RvcCBsaXN0ZW5pbmcgYWZ0ZXIgaW5wdXQuIE5vdGU6IHdoaWxlIHNjcm9sbGluZyBpcyBhbiBpbnB1dCB0aGF0XG4gICAgLy8gc3RvcCBMQ1Agb2JzZXJ2YXRpb24sIGl0J3MgdW5yZWxpYWJsZSBzaW5jZSBpdCBjYW4gYmUgcHJvZ3JhbW1hdGljYWxseVxuICAgIC8vIGdlbmVyYXRlZC4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lL3dlYi12aXRhbHMvaXNzdWVzLzc1XG4gICAgWydrZXlkb3duJywgJ2NsaWNrJ10uZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgc3RvcExpc3RlbmluZywgeyBvbmNlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0pO1xuICAgIH0pO1xuXG4gICAgb25IaWRkZW4oc3RvcExpc3RlbmluZywgdHJ1ZSk7XG5cbiAgICByZXR1cm4gc3RvcExpc3RlbmluZztcbiAgfVxuXG4gIHJldHVybjtcbn07XG4iXSwibmFtZXMiOlsicmVwb3J0ZWRNZXRyaWNJRHMiLCJvbkxDUCIsIm9uUmVwb3J0IiwidmlzaWJpbGl0eVdhdGNoZXIiLCJnZXRWaXNpYmlsaXR5V2F0Y2hlciIsIm1ldHJpYyIsImluaXRNZXRyaWMiLCJyZXBvcnQiLCJoYW5kbGVFbnRyaWVzIiwiZW50cmllcyIsImxhc3RFbnRyeSIsImxlbmd0aCIsInZhbHVlIiwiTWF0aCIsIm1heCIsInN0YXJ0VGltZSIsImdldEFjdGl2YXRpb25TdGFydCIsImZpcnN0SGlkZGVuVGltZSIsInBvIiwib2JzZXJ2ZSIsImJpbmRSZXBvcnRlciIsInN0b3BMaXN0ZW5pbmciLCJpZCIsInRha2VSZWNvcmRzIiwiZGlzY29ubmVjdCIsImZvckVhY2giLCJ0eXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uY2UiLCJjYXB0dXJlIiwib25IaWRkZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/getLCP.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar bindReporter = function bindReporter(callback, metric, reportAllChanges) {\n  var prevValue;\n  var delta;\n  return function (forceReport) {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\nexports.bindReporter = bindReporter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2JpbmRSZXBvcnRlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFrQkEsSUFBQUEsWUFBQSxZQUFBQSxhQUNBQyxRQUFBLEVBQ0FDLE1BQUEsRUFDQUMsZ0JBQUEsRUFDQTtFQUNBLElBQUFDLFNBQUE7RUFDQSxJQUFBQyxLQUFBO0VBQ0EsaUJBQUFDLFdBQUE7SUFDQSxJQUFBSixNQUFBLENBQUFLLEtBQUE7TUFDQSxJQUFBRCxXQUFBLElBQUFILGdCQUFBO1FBQ0FFLEtBQUEsR0FBQUgsTUFBQSxDQUFBSyxLQUFBLElBQUFILFNBQUE7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQSxJQUFBQyxLQUFBLElBQUFELFNBQUEsS0FBQUksU0FBQTtVQUNBSixTQUFBLEdBQUFGLE1BQUEsQ0FBQUssS0FBQTtVQUNBTCxNQUFBLENBQUFHLEtBQUEsR0FBQUEsS0FBQTtVQUNBSixRQUFBLENBQUFDLE1BQUE7UUFDQTtNQUNBO0lBQ0E7RUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvYmluZFJlcG9ydGVyLnRzPzE5YjEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB0eXBlIHsgTWV0cmljLCBSZXBvcnRDYWxsYmFjayB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGJpbmRSZXBvcnRlciA9IChcbiAgY2FsbGJhY2s6IFJlcG9ydENhbGxiYWNrLFxuICBtZXRyaWM6IE1ldHJpYyxcbiAgcmVwb3J0QWxsQ2hhbmdlcz86IGJvb2xlYW4sXG4pOiAoKGZvcmNlUmVwb3J0PzogYm9vbGVhbikgPT4gdm9pZCkgPT4ge1xuICBsZXQgcHJldlZhbHVlOiBudW1iZXI7XG4gIGxldCBkZWx0YTogbnVtYmVyO1xuICByZXR1cm4gKGZvcmNlUmVwb3J0PzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChtZXRyaWMudmFsdWUgPj0gMCkge1xuICAgICAgaWYgKGZvcmNlUmVwb3J0IHx8IHJlcG9ydEFsbENoYW5nZXMpIHtcbiAgICAgICAgZGVsdGEgPSBtZXRyaWMudmFsdWUgLSAocHJldlZhbHVlIHx8IDApO1xuXG4gICAgICAgIC8vIFJlcG9ydCB0aGUgbWV0cmljIGlmIHRoZXJlJ3MgYSBub24temVybyBkZWx0YSBvciBpZiBubyBwcmV2aW91c1xuICAgICAgICAvLyB2YWx1ZSBleGlzdHMgKHdoaWNoIGNhbiBoYXBwZW4gaW4gdGhlIGNhc2Ugb2YgdGhlIGRvY3VtZW50IGJlY29taW5nXG4gICAgICAgIC8vIGhpZGRlbiB3aGVuIHRoZSBtZXRyaWMgdmFsdWUgaXMgMCkuXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS93ZWItdml0YWxzL2lzc3Vlcy8xNFxuICAgICAgICBpZiAoZGVsdGEgfHwgcHJldlZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcmV2VmFsdWUgPSBtZXRyaWMudmFsdWU7XG4gICAgICAgICAgbWV0cmljLmRlbHRhID0gZGVsdGE7XG4gICAgICAgICAgY2FsbGJhY2sobWV0cmljKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4iXSwibmFtZXMiOlsiYmluZFJlcG9ydGVyIiwiY2FsbGJhY2siLCJtZXRyaWMiLCJyZXBvcnRBbGxDaGFuZ2VzIiwicHJldlZhbHVlIiwiZGVsdGEiLCJmb3JjZVJlcG9ydCIsInZhbHVlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/bindReporter.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/generateUniqueID.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/generateUniqueID.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nvar generateUniqueID = function generateUniqueID() {\n  return \"v3-\".concat(Date.now(), \"-\").concat(Math.floor(Math.random() * (9e12 - 1)) + 1e12);\n};\nexports.generateUniqueID = generateUniqueID;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2dlbmVyYXRlVW5pcXVlSUQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUFBLGdCQUFBLFlBQUFBLGlCQUFBO0VBQ0EsYUFBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFDLEdBQUEsU0FBQUYsTUFBQSxDQUFBRyxJQUFBLENBQUFDLEtBQUEsQ0FBQUQsSUFBQSxDQUFBRSxNQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci93ZWItdml0YWxzL2xpYi9nZW5lcmF0ZVVuaXF1ZUlELnRzPzkyNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUGVyZm9ybWFudGx5IGdlbmVyYXRlIGEgdW5pcXVlLCAzMC1jaGFyIHN0cmluZyBieSBjb21iaW5pbmcgYSB2ZXJzaW9uXG4gKiBudW1iZXIsIHRoZSBjdXJyZW50IHRpbWVzdGFtcCB3aXRoIGEgMTMtZGlnaXQgbnVtYmVyIGludGVnZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVVuaXF1ZUlEID0gKCk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgdjMtJHtEYXRlLm5vdygpfS0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg5ZTEyIC0gMSkpICsgMWUxMn1gO1xufTtcbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZVVuaXF1ZUlEIiwiY29uY2F0IiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/generateUniqueID.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getActivationStart.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getActivationStart.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar getNavigationEntry = __webpack_require__(/*! ./getNavigationEntry.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getNavigationEntry.js\");\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getActivationStart = function getActivationStart() {\n  var navEntry = getNavigationEntry.getNavigationEntry();\n  return navEntry && navEntry.activationStart || 0;\n};\nexports.getActivationStart = getActivationStart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2dldEFjdGl2YXRpb25TdGFydC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxJQUFBQSxrQkFBQSxZQUFBQSxtQkFBQTtFQUNBLElBQUFDLFFBQUEsR0FBQUMsa0JBQUEsQ0FBQUEsa0JBQUE7RUFDQSxPQUFBRCxRQUFBLElBQUFBLFFBQUEsQ0FBQUUsZUFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvZ2V0QWN0aXZhdGlvblN0YXJ0LnRzPzZmYjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGdldE5hdmlnYXRpb25FbnRyeSB9IGZyb20gJy4vZ2V0TmF2aWdhdGlvbkVudHJ5JztcblxuZXhwb3J0IGNvbnN0IGdldEFjdGl2YXRpb25TdGFydCA9ICgpOiBudW1iZXIgPT4ge1xuICBjb25zdCBuYXZFbnRyeSA9IGdldE5hdmlnYXRpb25FbnRyeSgpO1xuICByZXR1cm4gKG5hdkVudHJ5ICYmIG5hdkVudHJ5LmFjdGl2YXRpb25TdGFydCkgfHwgMDtcbn07XG4iXSwibmFtZXMiOlsiZ2V0QWN0aXZhdGlvblN0YXJ0IiwibmF2RW50cnkiLCJnZXROYXZpZ2F0aW9uRW50cnkiLCJhY3RpdmF0aW9uU3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getActivationStart.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getNavigationEntry.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getNavigationEntry.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar types = __webpack_require__(/*! ../../types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getNavigationEntryFromPerformanceTiming = function getNavigationEntryFromPerformanceTiming() {\n  // eslint-disable-next-line deprecation/deprecation\n  var timing = types.WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  var type = types.WINDOW.performance.navigation.type;\n  var navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate'\n  };\n  for (var key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry;\n};\nvar getNavigationEntry = function getNavigationEntry() {\n  if (types.WINDOW.__WEB_VITALS_POLYFILL__) {\n    return types.WINDOW.performance && (performance.getEntriesByType && performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming());\n  } else {\n    return types.WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\nexports.getNavigationEntry = getNavigationEntry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2dldE5hdmlnYXRpb25FbnRyeS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQSxJQUFBQSx1Q0FBQSxZQUFBQSx3Q0FBQTtFQUNBO0VBQ0EsSUFBQUMsTUFBQSxHQUFBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsV0FBQSxDQUFBSCxNQUFBO0VBQ0E7RUFDQSxJQUFBSSxJQUFBLEdBQUFILEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxXQUFBLENBQUFFLFVBQUEsQ0FBQUQsSUFBQTtFQUVBLElBQUFFLGVBQUE7SUFDQUMsU0FBQTtJQUNBQyxTQUFBO0lBQ0FKLElBQUEsRUFBQUEsSUFBQSx5QkFBQUEsSUFBQTtFQUNBO0VBRUEsU0FBQUssR0FBQSxJQUFBVCxNQUFBO0lBQ0EsSUFBQVMsR0FBQSwwQkFBQUEsR0FBQTtNQUNBSCxlQUFBLENBQUFHLEdBQUEsSUFBQUMsSUFBQSxDQUFBQyxHQUFBLENBQUFYLE1BQUEsQ0FBQVMsR0FBQSxJQUFBVCxNQUFBLENBQUFZLGVBQUE7SUFDQTtFQUNBO0VBQ0EsT0FBQU4sZUFBQTtBQUNBO0FBRUEsSUFBQU8sa0JBQUEsWUFBQUEsbUJBQUE7RUFDQSxJQUFBWixLQUFBLENBQUFDLE1BQUEsQ0FBQVksdUJBQUE7SUFDQSxPQUNBYixLQUFBLENBQUFDLE1BQUEsQ0FBQUMsV0FBQSxLQUNBQSxXQUFBLENBQUFZLGdCQUFBLElBQUFaLFdBQUEsQ0FBQVksZ0JBQUEscUJBQ0FoQix1Q0FBQTtFQUVBO0lBQ0EsT0FBQUUsS0FBQSxDQUFBQyxNQUFBLENBQUFDLFdBQUEsSUFBQUEsV0FBQSxDQUFBWSxnQkFBQSxJQUFBWixXQUFBLENBQUFZLGdCQUFBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3dlYi12aXRhbHMvbGliL2dldE5hdmlnYXRpb25FbnRyeS50cz83YTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IE5hdmlnYXRpb25UaW1pbmdQb2x5ZmlsbEVudHJ5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBnZXROYXZpZ2F0aW9uRW50cnlGcm9tUGVyZm9ybWFuY2VUaW1pbmcgPSAoKTogTmF2aWdhdGlvblRpbWluZ1BvbHlmaWxsRW50cnkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgdGltaW5nID0gV0lORE9XLnBlcmZvcm1hbmNlLnRpbWluZztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHR5cGUgPSBXSU5ET1cucGVyZm9ybWFuY2UubmF2aWdhdGlvbi50eXBlO1xuXG4gIGNvbnN0IG5hdmlnYXRpb25FbnRyeTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfCBzdHJpbmcgfSA9IHtcbiAgICBlbnRyeVR5cGU6ICduYXZpZ2F0aW9uJyxcbiAgICBzdGFydFRpbWU6IDAsXG4gICAgdHlwZTogdHlwZSA9PSAyID8gJ2JhY2tfZm9yd2FyZCcgOiB0eXBlID09PSAxID8gJ3JlbG9hZCcgOiAnbmF2aWdhdGUnLFxuICB9O1xuXG4gIGZvciAoY29uc3Qga2V5IGluIHRpbWluZykge1xuICAgIGlmIChrZXkgIT09ICduYXZpZ2F0aW9uU3RhcnQnICYmIGtleSAhPT0gJ3RvSlNPTicpIHtcbiAgICAgIG5hdmlnYXRpb25FbnRyeVtrZXldID0gTWF0aC5tYXgoKHRpbWluZ1trZXkgYXMga2V5b2YgUGVyZm9ybWFuY2VUaW1pbmddIGFzIG51bWJlcikgLSB0aW1pbmcubmF2aWdhdGlvblN0YXJ0LCAwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRpb25FbnRyeSBhcyB1bmtub3duIGFzIE5hdmlnYXRpb25UaW1pbmdQb2x5ZmlsbEVudHJ5O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE5hdmlnYXRpb25FbnRyeSA9ICgpOiBQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmcgfCBOYXZpZ2F0aW9uVGltaW5nUG9seWZpbGxFbnRyeSB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmIChXSU5ET1cuX19XRUJfVklUQUxTX1BPTFlGSUxMX18pIHtcbiAgICByZXR1cm4gKFxuICAgICAgV0lORE9XLnBlcmZvcm1hbmNlICYmXG4gICAgICAoKHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeVR5cGUgJiYgcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSgnbmF2aWdhdGlvbicpWzBdKSB8fFxuICAgICAgICBnZXROYXZpZ2F0aW9uRW50cnlGcm9tUGVyZm9ybWFuY2VUaW1pbmcoKSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBXSU5ET1cucGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZSAmJiBwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlUeXBlKCduYXZpZ2F0aW9uJylbMF07XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiZ2V0TmF2aWdhdGlvbkVudHJ5RnJvbVBlcmZvcm1hbmNlVGltaW5nIiwidGltaW5nIiwidHlwZXMiLCJXSU5ET1ciLCJwZXJmb3JtYW5jZSIsInR5cGUiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGlvbkVudHJ5IiwiZW50cnlUeXBlIiwic3RhcnRUaW1lIiwia2V5IiwiTWF0aCIsIm1heCIsIm5hdmlnYXRpb25TdGFydCIsImdldE5hdmlnYXRpb25FbnRyeSIsIl9fV0VCX1ZJVEFMU19QT0xZRklMTF9fIiwiZ2V0RW50cmllc0J5VHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getNavigationEntry.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar types = __webpack_require__(/*! ../../types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\nvar onHidden = __webpack_require__(/*! ./onHidden.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar firstHiddenTime = -1;\nvar initHiddenTime = function initHiddenTime() {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return types.WINDOW.document.visibilityState === 'hidden' && !types.WINDOW.document.prerendering ? 0 : Infinity;\n};\nvar trackChanges = function trackChanges() {\n  // Update the time if/when the document becomes hidden.\n  onHidden.onHidden(function (_ref) {\n    var timeStamp = _ref.timeStamp;\n    firstHiddenTime = timeStamp;\n  }, true);\n};\nvar getVisibilityWatcher = function getVisibilityWatcher() {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n  };\n};\nexports.getVisibilityWatcher = getVisibilityWatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2dldFZpc2liaWxpdHlXYXRjaGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQSxJQUFBQSxlQUFBO0FBRUEsSUFBQUMsY0FBQSxZQUFBQSxlQUFBO0VBQ0E7RUFDQTtFQUNBLE9BQUFDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFDLGVBQUEsa0JBQUFILEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFFLFlBQUEsT0FBQUMsUUFBQTtBQUNBO0FBRUEsSUFBQUMsWUFBQSxZQUFBQSxhQUFBO0VBQ0E7RUFDQUMsUUFBQSxDQUFBQSxRQUFBLFdBQUFDLElBQUE7SUFBQSxJQUFBQyxTQUFBLEdBQUFELElBQUEsQ0FBQUMsU0FBQTtJQUNBWCxlQUFBLEdBQUFXLFNBQUE7RUFDQTtBQUNBO0FBRUEsSUFBQUMsb0JBQUEsWUFBQUEscUJBQUEsRUFFQTtFQUNBLElBQUFaLGVBQUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBQSxlQUFBLEdBQUFDLGNBQUE7SUFDQU8sWUFBQTtFQUNBO0VBQ0E7SUFDQSxJQUFBUixnQkFBQTtNQUNBLE9BQUFBLGVBQUE7SUFDQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci93ZWItdml0YWxzL2xpYi9nZXRWaXNpYmlsaXR5V2F0Y2hlci50cz82ZGI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBvbkhpZGRlbiB9IGZyb20gJy4vb25IaWRkZW4nO1xuXG5sZXQgZmlyc3RIaWRkZW5UaW1lID0gLTE7XG5cbmNvbnN0IGluaXRIaWRkZW5UaW1lID0gKCk6IG51bWJlciA9PiB7XG4gIC8vIElmIHRoZSBkb2N1bWVudCBpcyBoaWRkZW4gYW5kIG5vdCBwcmVyZW5kZXJpbmcsIGFzc3VtZSBpdCB3YXMgYWx3YXlzXG4gIC8vIGhpZGRlbiBhbmQgdGhlIHBhZ2Ugd2FzIGxvYWRlZCBpbiB0aGUgYmFja2dyb3VuZC5cbiAgcmV0dXJuIFdJTkRPVy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmICFXSU5ET1cuZG9jdW1lbnQucHJlcmVuZGVyaW5nID8gMCA6IEluZmluaXR5O1xufTtcblxuY29uc3QgdHJhY2tDaGFuZ2VzID0gKCk6IHZvaWQgPT4ge1xuICAvLyBVcGRhdGUgdGhlIHRpbWUgaWYvd2hlbiB0aGUgZG9jdW1lbnQgYmVjb21lcyBoaWRkZW4uXG4gIG9uSGlkZGVuKCh7IHRpbWVTdGFtcCB9KSA9PiB7XG4gICAgZmlyc3RIaWRkZW5UaW1lID0gdGltZVN0YW1wO1xuICB9LCB0cnVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWaXNpYmlsaXR5V2F0Y2hlciA9ICgpOiB7XG4gIHJlYWRvbmx5IGZpcnN0SGlkZGVuVGltZTogbnVtYmVyO1xufSA9PiB7XG4gIGlmIChmaXJzdEhpZGRlblRpbWUgPCAwKSB7XG4gICAgLy8gSWYgdGhlIGRvY3VtZW50IGlzIGhpZGRlbiB3aGVuIHRoaXMgY29kZSBydW5zLCBhc3N1bWUgaXQgd2FzIGhpZGRlblxuICAgIC8vIHNpbmNlIG5hdmlnYXRpb24gc3RhcnQuIFRoaXMgaXNuJ3QgYSBwZXJmZWN0IGhldXJpc3RpYywgYnV0IGl0J3MgdGhlXG4gICAgLy8gYmVzdCB3ZSBjYW4gZG8gdW50aWwgYW4gQVBJIGlzIGF2YWlsYWJsZSB0byBzdXBwb3J0IHF1ZXJ5aW5nIHBhc3RcbiAgICAvLyB2aXNpYmlsaXR5U3RhdGUuXG4gICAgZmlyc3RIaWRkZW5UaW1lID0gaW5pdEhpZGRlblRpbWUoKTtcbiAgICB0cmFja0NoYW5nZXMoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGdldCBmaXJzdEhpZGRlblRpbWUoKSB7XG4gICAgICByZXR1cm4gZmlyc3RIaWRkZW5UaW1lO1xuICAgIH0sXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbImZpcnN0SGlkZGVuVGltZSIsImluaXRIaWRkZW5UaW1lIiwidHlwZXMiLCJXSU5ET1ciLCJkb2N1bWVudCIsInZpc2liaWxpdHlTdGF0ZSIsInByZXJlbmRlcmluZyIsIkluZmluaXR5IiwidHJhY2tDaGFuZ2VzIiwib25IaWRkZW4iLCJfcmVmIiwidGltZVN0YW1wIiwiZ2V0VmlzaWJpbGl0eVdhdGNoZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getVisibilityWatcher.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar types = __webpack_require__(/*! ../../types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\nvar generateUniqueID = __webpack_require__(/*! ./generateUniqueID.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/generateUniqueID.js\");\nvar getActivationStart = __webpack_require__(/*! ./getActivationStart.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getActivationStart.js\");\nvar getNavigationEntry = __webpack_require__(/*! ./getNavigationEntry.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/getNavigationEntry.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar initMetric = function initMetric(name, value) {\n  var navEntry = getNavigationEntry.getNavigationEntry();\n  var navigationType = 'navigate';\n  if (navEntry) {\n    if (types.WINDOW.document.prerendering || getActivationStart.getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-');\n    }\n  }\n  return {\n    name: name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good',\n    // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID.generateUniqueID(),\n    navigationType: navigationType\n  };\n};\nexports.initMetric = initMetric;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL2luaXRNZXRyaWMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFRQSxJQUFBQSxVQUFBLFlBQUFBLFdBQUFDLElBQUEsRUFBQUMsS0FBQTtFQUNBLElBQUFDLFFBQUEsR0FBQUMsa0JBQUEsQ0FBQUEsa0JBQUE7RUFDQSxJQUFBQyxjQUFBO0VBRUEsSUFBQUYsUUFBQTtJQUNBLElBQUFHLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFDLFlBQUEsSUFBQUMsa0JBQUEsQ0FBQUEsa0JBQUE7TUFDQUwsY0FBQTtJQUNBO01BQ0FBLGNBQUEsR0FBQUYsUUFBQSxDQUFBUSxJQUFBLENBQUFDLE9BQUE7SUFDQTtFQUNBO0VBRUE7SUFDQVgsSUFBQSxFQUFBQSxJQUFBO0lBQ0FDLEtBQUEsU0FBQUEsS0FBQSx3QkFBQUEsS0FBQTtJQUNBVyxNQUFBO0lBQUE7SUFDQUMsS0FBQTtJQUNBQyxPQUFBO0lBQ0FDLEVBQUEsRUFBQUMsZ0JBQUEsQ0FBQUEsZ0JBQUE7SUFDQVosY0FBQSxFQUFBQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci93ZWItdml0YWxzL2xpYi9pbml0TWV0cmljLnRzPzIyYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFdJTkRPVyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgTWV0cmljIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJRCB9IGZyb20gJy4vZ2VuZXJhdGVVbmlxdWVJRCc7XG5pbXBvcnQgeyBnZXRBY3RpdmF0aW9uU3RhcnQgfSBmcm9tICcuL2dldEFjdGl2YXRpb25TdGFydCc7XG5pbXBvcnQgeyBnZXROYXZpZ2F0aW9uRW50cnkgfSBmcm9tICcuL2dldE5hdmlnYXRpb25FbnRyeSc7XG5cbmV4cG9ydCBjb25zdCBpbml0TWV0cmljID0gKG5hbWU6IE1ldHJpY1snbmFtZSddLCB2YWx1ZT86IG51bWJlcik6IE1ldHJpYyA9PiB7XG4gIGNvbnN0IG5hdkVudHJ5ID0gZ2V0TmF2aWdhdGlvbkVudHJ5KCk7XG4gIGxldCBuYXZpZ2F0aW9uVHlwZTogTWV0cmljWyduYXZpZ2F0aW9uVHlwZSddID0gJ25hdmlnYXRlJztcblxuICBpZiAobmF2RW50cnkpIHtcbiAgICBpZiAoV0lORE9XLmRvY3VtZW50LnByZXJlbmRlcmluZyB8fCBnZXRBY3RpdmF0aW9uU3RhcnQoKSA+IDApIHtcbiAgICAgIG5hdmlnYXRpb25UeXBlID0gJ3ByZXJlbmRlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hdmlnYXRpb25UeXBlID0gbmF2RW50cnkudHlwZS5yZXBsYWNlKC9fL2csICctJykgYXMgTWV0cmljWyduYXZpZ2F0aW9uVHlwZSddO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICB2YWx1ZTogdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IC0xIDogdmFsdWUsXG4gICAgcmF0aW5nOiAnZ29vZCcsIC8vIFdpbGwgYmUgdXBkYXRlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICBkZWx0YTogMCxcbiAgICBlbnRyaWVzOiBbXSxcbiAgICBpZDogZ2VuZXJhdGVVbmlxdWVJRCgpLFxuICAgIG5hdmlnYXRpb25UeXBlLFxuICB9O1xufTtcbiJdLCJuYW1lcyI6WyJpbml0TWV0cmljIiwibmFtZSIsInZhbHVlIiwibmF2RW50cnkiLCJnZXROYXZpZ2F0aW9uRW50cnkiLCJuYXZpZ2F0aW9uVHlwZSIsInR5cGVzIiwiV0lORE9XIiwiZG9jdW1lbnQiLCJwcmVyZW5kZXJpbmciLCJnZXRBY3RpdmF0aW9uU3RhcnQiLCJ0eXBlIiwicmVwbGFjZSIsInJhdGluZyIsImRlbHRhIiwiZW50cmllcyIsImlkIiwiZ2VuZXJhdGVVbmlxdWVJRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/initMetric.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.object.assign.js */ \"./node_modules/core-js/modules/es.object.assign.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nvar observe = function observe(type, callback, opts) {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      var po = new PerformanceObserver(function (list) {\n        callback(list.getEntries());\n      });\n      po.observe(Object.assign({\n        type: type,\n        buffered: true\n      }, opts || {}));\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\nexports.observe = observe;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL29ic2VydmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBQUEsT0FBQSxZQUFBQSxRQUNBQyxJQUFBLEVBQ0FDLFFBQUEsRUFDQUMsSUFBQSxFQUNBO0VBQ0E7SUFDQSxJQUFBQyxtQkFBQSxDQUFBQyxtQkFBQSxDQUFBQyxRQUFBLENBQUFMLElBQUE7TUFDQSxJQUFBTSxFQUFBLE9BQUFILG1CQUFBLFdBQUFJLElBQUE7UUFDQU4sUUFBQSxDQUFBTSxJQUFBLENBQUFDLFVBQUE7TUFDQTtNQUNBRixFQUFBLENBQUFQLE9BQUEsQ0FDQVUsTUFBQSxDQUFBQyxNQUFBLENBQ0E7UUFDQVYsSUFBQSxFQUFBQSxJQUFBO1FBQ0FXLFFBQUE7TUFDQSxHQUNBVCxJQUFBLE1BQ0EsQ0FDQTtNQUNBLE9BQUFJLEVBQUE7SUFDQTtFQUNBLFNBQUFNLENBQUE7SUFDQTtFQUFBO0VBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3dlYi12aXRhbHMvbGliL29ic2VydmUudHM/OGM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBGaXJzdElucHV0UG9seWZpbGxFbnRyeSwgTmF2aWdhdGlvblRpbWluZ1BvbHlmaWxsRW50cnksIFBlcmZvcm1hbmNlUGFpbnRUaW1pbmcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VFbnRyeUhhbmRsZXIge1xuICAoZW50cnk6IFBlcmZvcm1hbmNlRW50cnkpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgUGVyZm9ybWFuY2VFbnRyeU1hcCB7XG4gIGV2ZW50OiBQZXJmb3JtYW5jZUV2ZW50VGltaW5nW107XG4gIHBhaW50OiBQZXJmb3JtYW5jZVBhaW50VGltaW5nW107XG4gICdsYXlvdXQtc2hpZnQnOiBMYXlvdXRTaGlmdFtdO1xuICAnbGFyZ2VzdC1jb250ZW50ZnVsLXBhaW50JzogTGFyZ2VzdENvbnRlbnRmdWxQYWludFtdO1xuICAnZmlyc3QtaW5wdXQnOiBQZXJmb3JtYW5jZUV2ZW50VGltaW5nW10gfCBGaXJzdElucHV0UG9seWZpbGxFbnRyeVtdO1xuICBuYXZpZ2F0aW9uOiBQZXJmb3JtYW5jZU5hdmlnYXRpb25UaW1pbmdbXSB8IE5hdmlnYXRpb25UaW1pbmdQb2x5ZmlsbEVudHJ5W107XG4gIHJlc291cmNlOiBQZXJmb3JtYW5jZVJlc291cmNlVGltaW5nW107XG4gIGxvbmd0YXNrOiBQZXJmb3JtYW5jZUVudHJ5W107XG59XG5cbi8qKlxuICogVGFrZXMgYSBwZXJmb3JtYW5jZSBlbnRyeSB0eXBlIGFuZCBhIGNhbGxiYWNrIGZ1bmN0aW9uLCBhbmQgY3JlYXRlcyBhXG4gKiBgUGVyZm9ybWFuY2VPYnNlcnZlcmAgaW5zdGFuY2UgdGhhdCB3aWxsIG9ic2VydmUgdGhlIHNwZWNpZmllZCBlbnRyeSB0eXBlXG4gKiB3aXRoIGJ1ZmZlcmluZyBlbmFibGVkIGFuZCBjYWxsIHRoZSBjYWxsYmFjayBfZm9yIGVhY2ggZW50cnlfLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWxzbyBmZWF0dXJlLWRldGVjdHMgZW50cnkgc3VwcG9ydCBhbmQgd3JhcHMgdGhlIGxvZ2ljIGluIGFcbiAqIHRyeS9jYXRjaCB0byBhdm9pZCBlcnJvcnMgaW4gdW5zdXBwb3J0aW5nIGJyb3dzZXJzLlxuICovXG5leHBvcnQgY29uc3Qgb2JzZXJ2ZSA9IDxLIGV4dGVuZHMga2V5b2YgUGVyZm9ybWFuY2VFbnRyeU1hcD4oXG4gIHR5cGU6IEssXG4gIGNhbGxiYWNrOiAoZW50cmllczogUGVyZm9ybWFuY2VFbnRyeU1hcFtLXSkgPT4gdm9pZCxcbiAgb3B0cz86IFBlcmZvcm1hbmNlT2JzZXJ2ZXJJbml0LFxuKTogUGVyZm9ybWFuY2VPYnNlcnZlciB8IHVuZGVmaW5lZCA9PiB7XG4gIHRyeSB7XG4gICAgaWYgKFBlcmZvcm1hbmNlT2JzZXJ2ZXIuc3VwcG9ydGVkRW50cnlUeXBlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgY29uc3QgcG8gPSBuZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihsaXN0ID0+IHtcbiAgICAgICAgY2FsbGJhY2sobGlzdC5nZXRFbnRyaWVzKCkgYXMgUGVyZm9ybWFuY2VFbnRyeU1hcFtLXSk7XG4gICAgICB9KTtcbiAgICAgIHBvLm9ic2VydmUoXG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGJ1ZmZlcmVkOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0cyB8fCB7fSxcbiAgICAgICAgKSBhcyBQZXJmb3JtYW5jZU9ic2VydmVySW5pdCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gcG87XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbiAgfVxuICByZXR1cm47XG59O1xuIl0sIm5hbWVzIjpbIm9ic2VydmUiLCJ0eXBlIiwiY2FsbGJhY2siLCJvcHRzIiwiUGVyZm9ybWFuY2VPYnNlcnZlciIsInN1cHBvcnRlZEVudHJ5VHlwZXMiLCJpbmNsdWRlcyIsInBvIiwibGlzdCIsImdldEVudHJpZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJidWZmZXJlZCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/observe.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar types = __webpack_require__(/*! ../../types.js */ \"./node_modules/@sentry-internal/tracing/cjs/browser/types.js\");\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar onHidden = function onHidden(cb, once) {\n  var onHiddenOrPageHide = function onHiddenOrPageHide(event) {\n    if (event.type === 'pagehide' || types.WINDOW.document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\nexports.onHidden = onHidden;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9icm93c2VyL3dlYi12aXRhbHMvbGliL29uSGlkZGVuLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFBLElBQUFBLFFBQUEsWUFBQUEsU0FBQUMsRUFBQSxFQUFBQyxJQUFBO0VBQ0EsSUFBQUMsa0JBQUEsWUFBQUEsbUJBQUFDLEtBQUE7SUFDQSxJQUFBQSxLQUFBLENBQUFDLElBQUEsbUJBQUFDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBLENBQUFDLGVBQUE7TUFDQVIsRUFBQSxDQUFBRyxLQUFBO01BQ0EsSUFBQUYsSUFBQTtRQUNBUSxtQkFBQSxxQkFBQVAsa0JBQUE7UUFDQU8sbUJBQUEsYUFBQVAsa0JBQUE7TUFDQTtJQUNBO0VBQ0E7RUFDQVEsZ0JBQUEscUJBQUFSLGtCQUFBO0VBQ0E7RUFDQTtFQUNBUSxnQkFBQSxhQUFBUixrQkFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvd2ViLXZpdGFscy9saWIvb25IaWRkZW4udHM/MTMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9uSGlkZGVuQ2FsbGJhY2sge1xuICAoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IG9uSGlkZGVuID0gKGNiOiBPbkhpZGRlbkNhbGxiYWNrLCBvbmNlPzogYm9vbGVhbik6IHZvaWQgPT4ge1xuICBjb25zdCBvbkhpZGRlbk9yUGFnZUhpZGUgPSAoZXZlbnQ6IEV2ZW50KTogdm9pZCA9PiB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdwYWdlaGlkZScgfHwgV0lORE9XLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIGNiKGV2ZW50KTtcbiAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvbkhpZGRlbk9yUGFnZUhpZGUsIHRydWUpO1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKCdwYWdlaGlkZScsIG9uSGlkZGVuT3JQYWdlSGlkZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBhZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25IaWRkZW5PclBhZ2VIaWRlLCB0cnVlKTtcbiAgLy8gU29tZSBicm93c2VycyBoYXZlIGJ1Z2d5IGltcGxlbWVudGF0aW9ucyBvZiB2aXNpYmlsaXR5Y2hhbmdlLFxuICAvLyBzbyB3ZSB1c2UgcGFnZWhpZGUgaW4gYWRkaXRpb24sIGp1c3QgdG8gYmUgc2FmZS5cbiAgYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCBvbkhpZGRlbk9yUGFnZUhpZGUsIHRydWUpO1xufTtcbiJdLCJuYW1lcyI6WyJvbkhpZGRlbiIsImNiIiwib25jZSIsIm9uSGlkZGVuT3JQYWdlSGlkZSIsImV2ZW50IiwidHlwZSIsInR5cGVzIiwiV0lORE9XIiwiZG9jdW1lbnQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/browser/web-vitals/lib/onHidden.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/extensions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/extensions.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = core.getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  var packageToIntegrationMapping = {\n    mongodb: function mongodb() {\n      var integration = utils.dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function mongoose() {\n      var integration = utils.dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mysql: function mysql() {\n      var integration = utils.dynamicRequire(module, './node/integrations/mysql');\n      return new integration.Mysql();\n    },\n    pg: function pg() {\n      var integration = utils.dynamicRequire(module, './node/integrations/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!utils.loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [].concat(_toConsumableArray(carrier.__SENTRY__.integrations || []), _toConsumableArray(mappedPackages));\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  core.addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (utils.isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\nexports.addExtensionMethods = addExtensionMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9leHRlbnNpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSw4QkFBQTtFQUNBLElBQUFDLE9BQUEsR0FBQUMsSUFBQSxDQUFBQyxjQUFBO0VBQ0EsS0FBQUYsT0FBQSxDQUFBRyxVQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFDLDJCQUFBO0lBQ0FDLE9BQUEsV0FBQUEsUUFBQTtNQUNBLElBQUFDLFdBQUEsR0FBQUMsS0FBQSxDQUFBQyxjQUFBLENBQUFDLE1BQUE7TUFHQSxXQUFBSCxXQUFBLENBQUFJLEtBQUE7SUFDQTtJQUNBQyxRQUFBLFdBQUFBLFNBQUE7TUFDQSxJQUFBTCxXQUFBLEdBQUFDLEtBQUEsQ0FBQUMsY0FBQSxDQUFBQyxNQUFBO01BR0EsV0FBQUgsV0FBQSxDQUFBSSxLQUFBO0lBQ0E7SUFDQUUsS0FBQSxXQUFBQSxNQUFBO01BQ0EsSUFBQU4sV0FBQSxHQUFBQyxLQUFBLENBQUFDLGNBQUEsQ0FBQUMsTUFBQTtNQUdBLFdBQUFILFdBQUEsQ0FBQU8sS0FBQTtJQUNBO0lBQ0FDLEVBQUEsV0FBQUEsR0FBQTtNQUNBLElBQUFSLFdBQUEsR0FBQUMsS0FBQSxDQUFBQyxjQUFBLENBQUFDLE1BQUE7TUFHQSxXQUFBSCxXQUFBLENBQUFTLFFBQUE7SUFDQTtFQUNBO0VBRUEsSUFBQUMsY0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQWQsMkJBQUEsRUFDQWUsTUFBQSxXQUFBQyxVQUFBO0lBQUEsU0FBQWIsS0FBQSxDQUFBYyxVQUFBLENBQUFELFVBQUE7RUFBQSxHQUNBRSxHQUFBLFdBQUFDLEdBQUE7SUFDQTtNQUNBLE9BQUFuQiwyQkFBQSxDQUFBbUIsR0FBQTtJQUNBLFNBQUFDLENBQUE7TUFDQSxPQUFBQyxTQUFBO0lBQ0E7RUFDQSxHQUNBTixNQUFBLFdBQUFPLENBQUE7SUFBQSxPQUFBQSxDQUFBO0VBQUE7RUFFQSxJQUFBVixjQUFBLENBQUFXLE1BQUE7SUFDQTNCLE9BQUEsQ0FBQUcsVUFBQSxDQUFBeUIsWUFBQSxNQUFBQyxNQUFBLENBQUFDLGtCQUFBLENBQUE5QixPQUFBLENBQUFHLFVBQUEsQ0FBQXlCLFlBQUEsU0FBQUUsa0JBQUEsQ0FBQWQsY0FBQTtFQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQWUsb0JBQUE7RUFDQTlCLElBQUEsQ0FBQStCLG9CQUFBOztFQUVBO0VBQ0EsSUFBQXpCLEtBQUEsQ0FBQTBCLFNBQUE7SUFDQWxDLDZCQUFBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9leHRlbnNpb25zLnRzPzA4ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkVHJhY2luZ0V4dGVuc2lvbnMsIGdldE1haW5DYXJyaWVyIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB0eXBlIHsgSW50ZWdyYXRpb24sIEludGVncmF0aW9uQ2xhc3MgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGR5bmFtaWNSZXF1aXJlLCBpc05vZGVFbnYsIGxvYWRNb2R1bGUgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfYXV0b2xvYWREYXRhYmFzZUludGVncmF0aW9ucygpOiB2b2lkIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGlmICghY2Fycmllci5fX1NFTlRSWV9fKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGFja2FnZVRvSW50ZWdyYXRpb25NYXBwaW5nOiBSZWNvcmQ8c3RyaW5nLCAoKSA9PiBJbnRlZ3JhdGlvbj4gPSB7XG4gICAgbW9uZ29kYigpIHtcbiAgICAgIGNvbnN0IGludGVncmF0aW9uID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnLi9ub2RlL2ludGVncmF0aW9ucy9tb25nbycpIGFzIHtcbiAgICAgICAgTW9uZ286IEludGVncmF0aW9uQ2xhc3M8SW50ZWdyYXRpb24+O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uTW9uZ28oKTtcbiAgICB9LFxuICAgIG1vbmdvb3NlKCkge1xuICAgICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL25vZGUvaW50ZWdyYXRpb25zL21vbmdvJykgYXMge1xuICAgICAgICBNb25nbzogSW50ZWdyYXRpb25DbGFzczxJbnRlZ3JhdGlvbj47XG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5Nb25nbygpO1xuICAgIH0sXG4gICAgbXlzcWwoKSB7XG4gICAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vbm9kZS9pbnRlZ3JhdGlvbnMvbXlzcWwnKSBhcyB7XG4gICAgICAgIE15c3FsOiBJbnRlZ3JhdGlvbkNsYXNzPEludGVncmF0aW9uPjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IGludGVncmF0aW9uLk15c3FsKCk7XG4gICAgfSxcbiAgICBwZygpIHtcbiAgICAgIGNvbnN0IGludGVncmF0aW9uID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnLi9ub2RlL2ludGVncmF0aW9ucy9wb3N0Z3JlcycpIGFzIHtcbiAgICAgICAgUG9zdGdyZXM6IEludGVncmF0aW9uQ2xhc3M8SW50ZWdyYXRpb24+O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uUG9zdGdyZXMoKTtcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IG1hcHBlZFBhY2thZ2VzID0gT2JqZWN0LmtleXMocGFja2FnZVRvSW50ZWdyYXRpb25NYXBwaW5nKVxuICAgIC5maWx0ZXIobW9kdWxlTmFtZSA9PiAhIWxvYWRNb2R1bGUobW9kdWxlTmFtZSkpXG4gICAgLm1hcChwa2cgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VUb0ludGVncmF0aW9uTWFwcGluZ1twa2ddKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSlcbiAgICAuZmlsdGVyKHAgPT4gcCkgYXMgSW50ZWdyYXRpb25bXTtcblxuICBpZiAobWFwcGVkUGFja2FnZXMubGVuZ3RoID4gMCkge1xuICAgIGNhcnJpZXIuX19TRU5UUllfXy5pbnRlZ3JhdGlvbnMgPSBbLi4uKGNhcnJpZXIuX19TRU5UUllfXy5pbnRlZ3JhdGlvbnMgfHwgW10pLCAuLi5tYXBwZWRQYWNrYWdlc107XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBhdGNoZXMgdGhlIGdsb2JhbCBvYmplY3QgYW5kIGluamVjdHMgdGhlIFRyYWNpbmcgZXh0ZW5zaW9ucyBtZXRob2RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeHRlbnNpb25NZXRob2RzKCk6IHZvaWQge1xuICBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpO1xuXG4gIC8vIERldGVjdCBhbmQgYXV0b21hdGljYWxseSBsb2FkIHNwZWNpZmllZCBpbnRlZ3JhdGlvbnMuXG4gIGlmIChpc05vZGVFbnYoKSkge1xuICAgIF9hdXRvbG9hZERhdGFiYXNlSW50ZWdyYXRpb25zKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJfYXV0b2xvYWREYXRhYmFzZUludGVncmF0aW9ucyIsImNhcnJpZXIiLCJjb3JlIiwiZ2V0TWFpbkNhcnJpZXIiLCJfX1NFTlRSWV9fIiwicGFja2FnZVRvSW50ZWdyYXRpb25NYXBwaW5nIiwibW9uZ29kYiIsImludGVncmF0aW9uIiwidXRpbHMiLCJkeW5hbWljUmVxdWlyZSIsIm1vZHVsZSIsIk1vbmdvIiwibW9uZ29vc2UiLCJteXNxbCIsIk15c3FsIiwicGciLCJQb3N0Z3JlcyIsIm1hcHBlZFBhY2thZ2VzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsIm1vZHVsZU5hbWUiLCJsb2FkTW9kdWxlIiwibWFwIiwicGtnIiwiZSIsInVuZGVmaW5lZCIsInAiLCJsZW5ndGgiLCJpbnRlZ3JhdGlvbnMiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhZGRFeHRlbnNpb25NZXRob2RzIiwiYWRkVHJhY2luZ0V4dGVuc2lvbnMiLCJpc05vZGVFbnYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/extensions.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var core = __webpack_require__(/*! @sentry/core */ "./node_modules/@sentry/core/cjs/index.js");
var utils = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/cjs/index.js");
var express = __webpack_require__(/*! ./node/integrations/express.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/express.js");
var postgres = __webpack_require__(/*! ./node/integrations/postgres.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/postgres.js");
var mysql = __webpack_require__(/*! ./node/integrations/mysql.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/mysql.js");
var mongo = __webpack_require__(/*! ./node/integrations/mongo.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/mongo.js");
var prisma = __webpack_require__(/*! ./node/integrations/prisma.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/prisma.js");
var graphql = __webpack_require__(/*! ./node/integrations/graphql.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/graphql.js");
var apollo = __webpack_require__(/*! ./node/integrations/apollo.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/apollo.js");
var lazy = __webpack_require__(/*! ./node/integrations/lazy.js */ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/lazy.js");
var browsertracing = __webpack_require__(/*! ./browser/browsertracing.js */ "./node_modules/@sentry-internal/tracing/cjs/browser/browsertracing.js");
var request = __webpack_require__(/*! ./browser/request.js */ "./node_modules/@sentry-internal/tracing/cjs/browser/request.js");
var extensions = __webpack_require__(/*! ./extensions.js */ "./node_modules/@sentry-internal/tracing/cjs/extensions.js");
exports.IdleTransaction = core.IdleTransaction;
exports.Span = core.Span;
exports.SpanStatus = core.SpanStatus;
exports.Transaction = core.Transaction;
exports.extractTraceparentData = core.extractTraceparentData;
exports.getActiveTransaction = core.getActiveTransaction;
exports.hasTracingEnabled = core.hasTracingEnabled;
exports.spanStatusfromHttpCode = core.spanStatusfromHttpCode;
exports.startIdleTransaction = core.startIdleTransaction;
exports.TRACEPARENT_REGEXP = utils.TRACEPARENT_REGEXP;
exports.stripUrlQueryAndFragment = utils.stripUrlQueryAndFragment;
exports.Express = express.Express;
exports.Postgres = postgres.Postgres;
exports.Mysql = mysql.Mysql;
exports.Mongo = mongo.Mongo;
exports.Prisma = prisma.Prisma;
exports.GraphQL = graphql.GraphQL;
exports.Apollo = apollo.Apollo;
exports.lazyLoadedNodePerformanceMonitoringIntegrations = lazy.lazyLoadedNodePerformanceMonitoringIntegrations;
exports.BROWSER_TRACING_INTEGRATION_ID = browsertracing.BROWSER_TRACING_INTEGRATION_ID;
exports.BrowserTracing = browsertracing.BrowserTracing;
exports.addTracingHeadersToFetchRequest = request.addTracingHeadersToFetchRequest;
exports.defaultRequestInstrumentationOptions = request.defaultRequestInstrumentationOptions;
exports.instrumentOutgoingRequests = request.instrumentOutgoingRequests;
exports.addExtensionMethods = extensions.addExtensionMethods;

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/apollo.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/apollo.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n/** Tracing integration for Apollo */\nvar Apollo = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @inheritDoc\n   */\n  function Apollo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      useNestjs: false\n    };\n    _classCallCheck(this, Apollo);\n    Apollo.prototype.__init.call(this);\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  _createClass(Apollo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Apollo.id;\n    }\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      if (this._useNest) {\n        this._module = this._module || utils.loadModule('@nestjs/graphql');\n      } else {\n        this._module = this._module || utils.loadModule('apollo-server-core');\n      }\n      return this._module;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      if (this._useNest) {\n        var pkg = this.loadDependency();\n        if (!pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n         */\n        utils.fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n          return function () {\n            utils.fill(this.resolversExplorerService, 'explore', function (orig) {\n              return function () {\n                var resolvers = utils.arrayify(orig.call(this));\n                var instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n                return instrumentedResolvers;\n              };\n            });\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return orig.call.apply(orig, [this].concat(args));\n          };\n        });\n      } else {\n        var _pkg = this.loadDependency();\n        if (!_pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Apollo Integration was unable to require apollo-server-core package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n         */\n        utils.fill(_pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n          return function () {\n            if (!this.config.resolvers) {\n              if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n                if (this.config.schema) {\n                  utils.logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                  utils.logger.warn();\n                } else if (this.config.modules) {\n                  utils.logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n                }\n                utils.logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n              }\n              return orig.call(this);\n            }\n            var resolvers = utils.arrayify(this.config.resolvers);\n            this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n            return orig.call(this);\n          };\n        });\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Apollo';\n    }\n  }]);\n  return Apollo;\n}();\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(function (model) {\n    Object.keys(model).forEach(function (resolverGroupName) {\n      Object.keys(model[resolverGroupName]).forEach(function (resolverName) {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  utils.fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      var scope = getCurrentHub().getScope();\n      var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n        return _2.getSpan;\n      }, 'call', function (_3) {\n        return _3();\n      }]);\n      var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n        return _4.startChild;\n      }, 'call', function (_5) {\n        return _5({\n          description: \"\".concat(resolverGroupName, \".\").concat(resolverName),\n          op: 'graphql.resolve'\n        });\n      }]);\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var rv = orig.call.apply(orig, [this].concat(args));\n      if (utils.isThenable(rv)) {\n        return rv.then(function (res) {\n          _optionalChain([span, 'optionalAccess', function (_6) {\n            return _6.finish;\n          }, 'call', function (_7) {\n            return _7();\n          }]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', function (_8) {\n        return _8.finish;\n      }, 'call', function (_9) {\n        return _9();\n      }]);\n      return rv;\n    };\n  });\n}\nexports.Apollo = Apollo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/apollo.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/express.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/express.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nvar Express = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Express App instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Express() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Express);\n    Express.prototype.__init.call(this);\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Express, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Express.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!this._router) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('ExpressIntegration is missing an Express instance');\n        return;\n      }\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Express Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      instrumentMiddlewares(this._router, this._methods);\n      instrumentRouter(this._router);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Express';\n    }\n  }]);\n  return Express;\n}();\nExpress.__initStatic();\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n  var arity = fn.length;\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n          if (transaction) {\n            var span = transaction.startChild({\n              description: fn.name,\n              op: \"middleware.express.\".concat(method)\n            });\n            res.once('finish', function () {\n              span.finish();\n            });\n          }\n          return fn.call(this, req, res);\n        };\n      }\n    case 3:\n      {\n        return function (req, res, next) {\n          var transaction = res.__sentry_transaction;\n          var span = _optionalChain([transaction, 'optionalAccess', function (_2) {\n            return _2.startChild;\n          }, 'call', function (_3) {\n            return _3({\n              description: fn.name,\n              op: \"middleware.express.\".concat(method)\n            });\n          }]);\n          fn.call(this, req, res, function () {\n            _optionalChain([span, 'optionalAccess', function (_4) {\n              return _4.finish;\n            }, 'call', function (_5) {\n              return _5();\n            }]);\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            next.call.apply(next, [this].concat(args));\n          });\n        };\n      }\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var transaction = res.__sentry_transaction;\n          var span = _optionalChain([transaction, 'optionalAccess', function (_6) {\n            return _6.startChild;\n          }, 'call', function (_7) {\n            return _7({\n              description: fn.name,\n              op: \"middleware.express.\".concat(method)\n            });\n          }]);\n          fn.call(this, err, req, res, function () {\n            _optionalChain([span, 'optionalAccess', function (_8) {\n              return _8.finish;\n            }, 'call', function (_9) {\n              return _9();\n            }]);\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            next.call.apply(next, [this].concat(args));\n          });\n        };\n      }\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \".concat(arity));\n      }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n    return arg;\n  });\n}\n\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n  router[method] = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return originalCallback.call.apply(originalCallback, [this].concat(_toConsumableArray(wrapMiddlewareArgs(args, method))));\n  };\n  return router;\n}\n\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router) {\n  var methods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}\n\n/**\n * Patches the prototype of Express.Router to accumulate the resolved route\n * if a layer instance's `match` function was called and it returned a successful match.\n *\n * @see https://github.com/expressjs/express/blob/master/lib/router/index.js\n *\n * @param appOrRouter the router instance which can either be an app (i.e. top-level) or a (nested) router.\n */\nfunction instrumentRouter(appOrRouter) {\n  // This is how we can distinguish between app and routers\n  var isApp = ('settings' in appOrRouter);\n\n  // In case the app's top-level router hasn't been initialized yet, we have to do it now\n  if (isApp && appOrRouter._router === undefined && appOrRouter.lazyrouter) {\n    appOrRouter.lazyrouter();\n  }\n  var router = isApp ? appOrRouter._router : appOrRouter;\n  if (!router) {\n    /*\n    If we end up here, this means likely that this integration is used with Express 3 or Express 5.\n    For now, we don't support these versions (3 is very old and 5 is still in beta). To support Express 5,\n    we'd need to make more changes to the routing instrumentation because the router is no longer part of\n    the Express core package but maintained in its own package. The new router has different function\n    signatures and works slightly differently, demanding more changes than just taking the router from\n    `app.router` instead of `app._router`.\n    @see https://github.com/pillarjs/router\n     TODO: Proper Express 5 support\n    */\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.debug('Cannot instrument router for URL Parameterization (did not find a valid router).');\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.debug('Routing instrumentation is currently only supported in Express 4.');\n    return;\n  }\n  var routerProto = Object.getPrototypeOf(router);\n  var originalProcessParams = routerProto.process_params;\n  routerProto.process_params = function process_params(layer, called, req, res, done) {\n    // Base case: We're in the first part of the URL (thus we start with the root '/')\n    if (!req._reconstructedRoute) {\n      req._reconstructedRoute = '';\n    }\n\n    // If the layer's partial route has params, is a regex or an array, the route is stored in layer.route.\n    var _getLayerRoutePathInf = getLayerRoutePathInfo(layer),\n      layerRoutePath = _getLayerRoutePathInf.layerRoutePath,\n      isRegex = _getLayerRoutePathInf.isRegex,\n      isArray = _getLayerRoutePathInf.isArray,\n      numExtraSegments = _getLayerRoutePathInf.numExtraSegments;\n    if (layerRoutePath || isRegex || isArray) {\n      req._hasParameters = true;\n    }\n\n    // Otherwise, the hardcoded path (i.e. a partial route without params) is stored in layer.path\n    var partialRoute = layerRoutePath || layer.path || '';\n\n    // Normalize the partial route so that it doesn't contain leading or trailing slashes\n    // and exclude empty or '*' wildcard routes.\n    // The exclusion of '*' routes is our best effort to not \"pollute\" the transaction name\n    // with interim handlers (e.g. ones that check authentication or do other middleware stuff).\n    // We want to end up with the parameterized URL of the incoming request without any extraneous path segments.\n    var finalPartialRoute = partialRoute.split('/').filter(function (segment) {\n      return segment.length > 0 && (isRegex || isArray || !segment.includes('*'));\n    }).join('/');\n\n    // If we found a valid partial URL, we append it to the reconstructed route\n    if (finalPartialRoute && finalPartialRoute.length > 0) {\n      // If the partial route is from a regex route, we append a '/' to close the regex\n      req._reconstructedRoute += \"/\".concat(finalPartialRoute).concat(isRegex ? '/' : '');\n    }\n\n    // Now we check if we are in the \"last\" part of the route. We determine this by comparing the\n    // number of URL segments from the original URL to that of our reconstructed parameterized URL.\n    // If we've reached our final destination, we update the transaction name.\n    var urlLength = utils.getNumberOfUrlSegments(req.originalUrl || '') + numExtraSegments;\n    var routeLength = utils.getNumberOfUrlSegments(req._reconstructedRoute);\n    if (urlLength === routeLength) {\n      if (!req._hasParameters) {\n        if (req._reconstructedRoute !== req.originalUrl) {\n          req._reconstructedRoute = req.originalUrl;\n        }\n      }\n      var transaction = res.__sentry_transaction;\n      if (transaction && transaction.metadata.source !== 'custom') {\n        // If the request URL is '/' or empty, the reconstructed route will be empty.\n        // Therefore, we fall back to setting the final route to '/' in this case.\n        var finalRoute = req._reconstructedRoute || '/';\n        transaction.setName.apply(transaction, _toConsumableArray(utils.extractPathForTransaction(req, {\n          path: true,\n          method: true,\n          customRoute: finalRoute\n        })));\n      }\n    }\n    return originalProcessParams.call(this, layer, called, req, res, done);\n  };\n}\n\n/**\n * Extracts and stringifies the layer's route which can either be a string with parameters (`users/:id`),\n * a RegEx (`/test/`) or an array of strings and regexes (`['/path1', /\\/path[2-5]/, /path/:id]`). Additionally\n * returns extra information about the route, such as if the route is defined as regex or as an array.\n *\n * @param layer the layer to extract the stringified route from\n *\n * @returns an object containing the stringified route, a flag determining if the route was a regex\n *          and the number of extra segments to the matched path that are additionally in the route,\n *          if the route was an array (defaults to 0).\n */\nfunction getLayerRoutePathInfo(layer) {\n  var lrp = _optionalChain([layer, 'access', function (_10) {\n    return _10.route;\n  }, 'optionalAccess', function (_11) {\n    return _11.path;\n  }]);\n  var isRegex = utils.isRegExp(lrp);\n  var isArray = Array.isArray(lrp);\n  if (!lrp) {\n    return {\n      isRegex: isRegex,\n      isArray: isArray,\n      numExtraSegments: 0\n    };\n  }\n  var numExtraSegments = isArray ? Math.max(getNumberOfArrayUrlSegments(lrp) - utils.getNumberOfUrlSegments(layer.path || ''), 0) : 0;\n  var layerRoutePath = getLayerRoutePathString(isArray, lrp);\n  return {\n    layerRoutePath: layerRoutePath,\n    isRegex: isRegex,\n    isArray: isArray,\n    numExtraSegments: numExtraSegments\n  };\n}\n\n/**\n * Returns the number of URL segments in an array of routes\n *\n * Example: ['/api/test', /\\/api\\/post[0-9]/, '/users/:id/details`] -> 7\n */\nfunction getNumberOfArrayUrlSegments(routesArray) {\n  return routesArray.reduce(function (accNumSegments, currentRoute) {\n    // array members can be a RegEx -> convert them toString\n    return accNumSegments + utils.getNumberOfUrlSegments(currentRoute.toString());\n  }, 0);\n}\n\n/**\n * Extracts and returns the stringified version of the layers route path\n * Handles route arrays (by joining the paths together) as well as RegExp and normal\n * string values (in the latter case the toString conversion is technically unnecessary but\n * it doesn't hurt us either).\n */\nfunction getLayerRoutePathString(isArray, lrp) {\n  if (isArray) {\n    return lrp.map(function (r) {\n      return r.toString();\n    }).join(',');\n  }\n  return lrp && lrp.toString();\n}\nexports.Express = Express;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/express.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/graphql.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/graphql.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n/** Tracing integration for graphql package */\nvar GraphQL = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GraphQL() {\n    _classCallCheck(this, GraphQL);\n    GraphQL.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(GraphQL, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = GraphQL.id;\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      return this._module = this._module || utils.loadModule('graphql/execution/execute.js');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('GraphQL Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('GraphQL Integration was unable to require graphql/execution package.');\n        return;\n      }\n      utils.fill(pkg, 'execute', function (orig) {\n        return function () {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n            return _4.startChild;\n          }, 'call', function (_5) {\n            return _5({\n              description: 'execute',\n              op: 'graphql.execute'\n            });\n          }]);\n          _optionalChain([scope, 'optionalAccess', function (_6) {\n            return _6.setSpan;\n          }, 'call', function (_7) {\n            return _7(span);\n          }]);\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          var rv = orig.call.apply(orig, [this].concat(args));\n          if (utils.isThenable(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              _optionalChain([scope, 'optionalAccess', function (_10) {\n                return _10.setSpan;\n              }, 'call', function (_11) {\n                return _11(parentSpan);\n              }]);\n              return res;\n            });\n          }\n          _optionalChain([span, 'optionalAccess', function (_12) {\n            return _12.finish;\n          }, 'call', function (_13) {\n            return _13();\n          }]);\n          _optionalChain([scope, 'optionalAccess', function (_14) {\n            return _14.setSpan;\n          }, 'call', function (_15) {\n            return _15(parentSpan);\n          }]);\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'GraphQL';\n    }\n  }]);\n  return GraphQL;\n}();\nGraphQL.__initStatic();\nexports.GraphQL = GraphQL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9ub2RlL2ludGVncmF0aW9ucy9ncmFwaHFsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBO0FBQUEsSUFDQUEsT0FBQTtFQUFBOztFQUFBLFNBQUFBLFFBQUE7SUFBQUMsZUFBQSxPQUFBRCxPQUFBO0lBQUFBLE9BQUEsQ0FBQUUsU0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUE7RUFBQTtFQUNBOzs7RUFBQUMsWUFBQSxDQUFBTCxPQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQTtJQUtBOzs7SUFHQSxTQUFBSixPQUFBO01BQUEsS0FBQUssSUFBQSxHQUFBUixPQUFBLENBQUFTLEVBQUE7SUFBQTs7SUFJQTtFQUFBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUNBLFNBQUFHLGVBQUE7TUFDQSxZQUFBQyxPQUFBLFFBQUFBLE9BQUEsSUFBQUMsS0FBQSxDQUFBQyxVQUFBO0lBQ0E7O0lBRUE7OztFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFPLFVBQUFDLENBQUEsRUFBQUMsYUFBQTtNQUNBLElBQUFDLFNBQUEsQ0FBQUMsZ0NBQUEsQ0FBQUYsYUFBQTtRQUNBLFFBQUFHLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBUCxLQUFBLENBQUFRLE1BQUEsQ0FBQUMsR0FBQTtRQUNBO01BQ0E7TUFFQSxJQUFBQyxHQUFBLFFBQUFaLGNBQUE7TUFFQSxLQUFBWSxHQUFBO1FBQ0EsUUFBQUgsZ0JBQUEsb0JBQUFBLGdCQUFBLEtBQUFQLEtBQUEsQ0FBQVEsTUFBQSxDQUFBRyxLQUFBO1FBQ0E7TUFDQTtNQUVBWCxLQUFBLENBQUFZLElBQUEsQ0FBQUYsR0FBQSx1QkFBQUcsSUFBQTtRQUNBO1VBQ0EsSUFBQUMsS0FBQSxHQUFBVixhQUFBLEdBQUFXLFFBQUE7VUFDQSxJQUFBQyxVQUFBLEdBQUFDLGNBQUEsRUFBQUgsS0FBQSw4QkFBQUksRUFBQTtZQUFBLE9BQUFBLEVBQUEsQ0FBQUMsT0FBQTtVQUFBLHFCQUFBQyxFQUFBO1lBQUEsT0FBQUEsRUFBQTtVQUFBO1VBRUEsSUFBQUMsSUFBQSxHQUFBSixjQUFBLEVBQUFELFVBQUEsOEJBQUFNLEVBQUE7WUFBQSxPQUFBQSxFQUFBLENBQUFDLFVBQUE7VUFBQSxxQkFBQUMsRUFBQTtZQUFBLE9BQUFBLEVBQUE7Y0FDQUMsV0FBQTtjQUNBQyxFQUFBO1lBQ0E7VUFBQTtVQUVBVCxjQUFBLEVBQUFILEtBQUEsOEJBQUFhLEVBQUE7WUFBQSxPQUFBQSxFQUFBLENBQUFDLE9BQUE7VUFBQSxxQkFBQUMsRUFBQTtZQUFBLE9BQUFBLEVBQUEsQ0FBQVIsSUFBQTtVQUFBO1VBQUEsU0FBQVMsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFUQUMsSUFBQSxPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtZQUFBRixJQUFBLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO1VBQUE7VUFXQSxJQUFBQyxFQUFBLEdBQUF2QixJQUFBLENBQUFyQixJQUFBLENBQUE2QyxLQUFBLENBQUF4QixJQUFBLFNBQUF5QixNQUFBLENBQUFMLElBQUE7VUFFQSxJQUFBakMsS0FBQSxDQUFBdUMsVUFBQSxDQUFBSCxFQUFBO1lBQ0EsT0FBQUEsRUFBQSxDQUFBSSxJQUFBLFdBQUFDLEdBQUE7Y0FDQXhCLGNBQUEsRUFBQUksSUFBQSw4QkFBQXFCLEVBQUE7Z0JBQUEsT0FBQUEsRUFBQSxDQUFBQyxNQUFBO2NBQUEscUJBQUFDLEVBQUE7Z0JBQUEsT0FBQUEsRUFBQTtjQUFBO2NBQ0EzQixjQUFBLEVBQUFILEtBQUEsOEJBQUErQixHQUFBO2dCQUFBLE9BQUFBLEdBQUEsQ0FBQWpCLE9BQUE7Y0FBQSxxQkFBQWtCLEdBQUE7Z0JBQUEsT0FBQUEsR0FBQSxDQUFBOUIsVUFBQTtjQUFBO2NBRUEsT0FBQXlCLEdBQUE7WUFDQTtVQUNBO1VBRUF4QixjQUFBLEVBQUFJLElBQUEsOEJBQUEwQixHQUFBO1lBQUEsT0FBQUEsR0FBQSxDQUFBSixNQUFBO1VBQUEscUJBQUFLLEdBQUE7WUFBQSxPQUFBQSxHQUFBO1VBQUE7VUFDQS9CLGNBQUEsRUFBQUgsS0FBQSw4QkFBQW1DLEdBQUE7WUFBQSxPQUFBQSxHQUFBLENBQUFyQixPQUFBO1VBQUEscUJBQUFzQixHQUFBO1lBQUEsT0FBQUEsR0FBQSxDQUFBbEMsVUFBQTtVQUFBO1VBQ0EsT0FBQW9CLEVBQUE7UUFDQTtNQUNBO0lBQ0E7RUFBQTtJQUFBMUMsR0FBQTtJQUFBQyxLQUFBLEVBMURBLFNBQUF3RCxhQUFBO01BQUEsS0FBQXRELEVBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQVQsT0FBQTtBQUFBO0FBMkRBQSxPQUFBLENBQUErRCxZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL25vZGUvaW50ZWdyYXRpb25zL2dyYXBocWwudHM/OWZjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEV2ZW50UHJvY2Vzc29yIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBmaWxsLCBpc1RoZW5hYmxlLCBsb2FkTW9kdWxlLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHR5cGUgeyBMYXp5TG9hZGVkSW50ZWdyYXRpb24gfSBmcm9tICcuL2xhenknO1xuaW1wb3J0IHsgc2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24gfSBmcm9tICcuL3V0aWxzL25vZGUtdXRpbHMnO1xuXG50eXBlIEdyYXBoUUxNb2R1bGUgPSB7XG4gIFttZXRob2Q6IHN0cmluZ106ICguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd247XG59O1xuXG4vKiogVHJhY2luZyBpbnRlZ3JhdGlvbiBmb3IgZ3JhcGhxbCBwYWNrYWdlICovXG5leHBvcnQgY2xhc3MgR3JhcGhRTCBpbXBsZW1lbnRzIExhenlMb2FkZWRJbnRlZ3JhdGlvbjxHcmFwaFFMTW9kdWxlPiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0dyYXBoUUwnO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIG5hbWU6IHN0cmluZyA9IEdyYXBoUUwuaWQ7XG5cbiAgcHJpdmF0ZSBfbW9kdWxlPzogR3JhcGhRTE1vZHVsZTtcblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcHVibGljIGxvYWREZXBlbmRlbmN5KCk6IEdyYXBoUUxNb2R1bGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiAodGhpcy5fbW9kdWxlID0gdGhpcy5fbW9kdWxlIHx8IGxvYWRNb2R1bGUoJ2dyYXBocWwvZXhlY3V0aW9uL2V4ZWN1dGUuanMnKSk7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoXzogKGNhbGxiYWNrOiBFdmVudFByb2Nlc3NvcikgPT4gdm9pZCwgZ2V0Q3VycmVudEh1YjogKCkgPT4gSHViKTogdm9pZCB7XG4gICAgaWYgKHNob3VsZERpc2FibGVBdXRvSW5zdHJ1bWVudGF0aW9uKGdldEN1cnJlbnRIdWIpKSB7XG4gICAgICBfX0RFQlVHX0JVSUxEX18gJiYgbG9nZ2VyLmxvZygnR3JhcGhRTCBJbnRlZ3JhdGlvbiBpcyBza2lwcGVkIGJlY2F1c2Ugb2YgaW5zdHJ1bWVudGVyIGNvbmZpZ3VyYXRpb24uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGtnID0gdGhpcy5sb2FkRGVwZW5kZW5jeSgpO1xuXG4gICAgaWYgKCFwa2cpIHtcbiAgICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIuZXJyb3IoJ0dyYXBoUUwgSW50ZWdyYXRpb24gd2FzIHVuYWJsZSB0byByZXF1aXJlIGdyYXBocWwvZXhlY3V0aW9uIHBhY2thZ2UuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmlsbChwa2csICdleGVjdXRlJywgZnVuY3Rpb24gKG9yaWc6ICgpID0+IHZvaWQgfCBQcm9taXNlPHVua25vd24+KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRoaXM6IHVua25vd24sIC4uLmFyZ3M6IHVua25vd25bXSkge1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldEN1cnJlbnRIdWIoKS5nZXRTY29wZSgpO1xuICAgICAgICBjb25zdCBwYXJlbnRTcGFuID0gc2NvcGU/LmdldFNwYW4oKTtcblxuICAgICAgICBjb25zdCBzcGFuID0gcGFyZW50U3Bhbj8uc3RhcnRDaGlsZCh7XG4gICAgICAgICAgZGVzY3JpcHRpb246ICdleGVjdXRlJyxcbiAgICAgICAgICBvcDogJ2dyYXBocWwuZXhlY3V0ZScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlPy5zZXRTcGFuKHNwYW4pO1xuXG4gICAgICAgIGNvbnN0IHJ2ID0gb3JpZy5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuXG4gICAgICAgIGlmIChpc1RoZW5hYmxlKHJ2KSkge1xuICAgICAgICAgIHJldHVybiBydi50aGVuKChyZXM6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgIHNwYW4/LmZpbmlzaCgpO1xuICAgICAgICAgICAgc2NvcGU/LnNldFNwYW4ocGFyZW50U3Bhbik7XG5cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzcGFuPy5maW5pc2goKTtcbiAgICAgICAgc2NvcGU/LnNldFNwYW4ocGFyZW50U3Bhbik7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJHcmFwaFFMIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwibG9hZERlcGVuZGVuY3kiLCJfbW9kdWxlIiwidXRpbHMiLCJsb2FkTW9kdWxlIiwic2V0dXBPbmNlIiwiXyIsImdldEN1cnJlbnRIdWIiLCJub2RlVXRpbHMiLCJzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiIsIl9fU0VOVFJZX0RFQlVHX18iLCJsb2dnZXIiLCJsb2ciLCJwa2ciLCJlcnJvciIsImZpbGwiLCJvcmlnIiwic2NvcGUiLCJnZXRTY29wZSIsInBhcmVudFNwYW4iLCJfb3B0aW9uYWxDaGFpbiIsIl8yIiwiZ2V0U3BhbiIsIl8zIiwic3BhbiIsIl80Iiwic3RhcnRDaGlsZCIsIl81IiwiZGVzY3JpcHRpb24iLCJvcCIsIl82Iiwic2V0U3BhbiIsIl83IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJydiIsImFwcGx5IiwiY29uY2F0IiwiaXNUaGVuYWJsZSIsInRoZW4iLCJyZXMiLCJfOCIsImZpbmlzaCIsIl85IiwiXzEwIiwiXzExIiwiXzEyIiwiXzEzIiwiXzE0IiwiXzE1IiwiX19pbml0U3RhdGljIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/graphql.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/lazy.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/lazy.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar lazyLoadedNodePerformanceMonitoringIntegrations = [function () {\n  var integration = utils.dynamicRequire(module, './apollo');\n  return new integration.Apollo();\n}, function () {\n  var integration = utils.dynamicRequire(module, './apollo');\n  return new integration.Apollo({\n    useNestjs: true\n  });\n}, function () {\n  var integration = utils.dynamicRequire(module, './graphql');\n  return new integration.GraphQL();\n}, function () {\n  var integration = utils.dynamicRequire(module, './mongo');\n  return new integration.Mongo();\n}, function () {\n  var integration = utils.dynamicRequire(module, './mongo');\n  return new integration.Mongo({\n    mongoose: true\n  });\n}, function () {\n  var integration = utils.dynamicRequire(module, './mysql');\n  return new integration.Mysql();\n}, function () {\n  var integration = utils.dynamicRequire(module, './postgres');\n  return new integration.Postgres();\n}];\nexports.lazyLoadedNodePerformanceMonitoringIntegrations = lazyLoadedNodePerformanceMonitoringIntegrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9ub2RlL2ludGVncmF0aW9ucy9sYXp5LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBWUEsSUFBQUEsK0NBQUEsSUFDQTtFQUNBLElBQUFDLFdBQUEsR0FBQUMsS0FBQSxDQUFBQyxjQUFBLENBQUFDLE1BQUE7RUFHQSxXQUFBSCxXQUFBLENBQUFJLE1BQUE7QUFDQSxHQUNBO0VBQ0EsSUFBQUosV0FBQSxHQUFBQyxLQUFBLENBQUFDLGNBQUEsQ0FBQUMsTUFBQTtFQUdBLFdBQUFILFdBQUEsQ0FBQUksTUFBQTtJQUFBQyxTQUFBO0VBQUE7QUFDQSxHQUNBO0VBQ0EsSUFBQUwsV0FBQSxHQUFBQyxLQUFBLENBQUFDLGNBQUEsQ0FBQUMsTUFBQTtFQUdBLFdBQUFILFdBQUEsQ0FBQU0sT0FBQTtBQUNBLEdBQ0E7RUFDQSxJQUFBTixXQUFBLEdBQUFDLEtBQUEsQ0FBQUMsY0FBQSxDQUFBQyxNQUFBO0VBR0EsV0FBQUgsV0FBQSxDQUFBTyxLQUFBO0FBQ0EsR0FDQTtFQUNBLElBQUFQLFdBQUEsR0FBQUMsS0FBQSxDQUFBQyxjQUFBLENBQUFDLE1BQUE7RUFHQSxXQUFBSCxXQUFBLENBQUFPLEtBQUE7SUFBQUMsUUFBQTtFQUFBO0FBQ0EsR0FDQTtFQUNBLElBQUFSLFdBQUEsR0FBQUMsS0FBQSxDQUFBQyxjQUFBLENBQUFDLE1BQUE7RUFHQSxXQUFBSCxXQUFBLENBQUFTLEtBQUE7QUFDQSxHQUNBO0VBQ0EsSUFBQVQsV0FBQSxHQUFBQyxLQUFBLENBQUFDLGNBQUEsQ0FBQUMsTUFBQTtFQUdBLFdBQUFILFdBQUEsQ0FBQVUsUUFBQTtBQUNBLEVBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi9zcmMvbm9kZS9pbnRlZ3JhdGlvbnMvbGF6eS50cz85NWE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSW50ZWdyYXRpb24sIEludGVncmF0aW9uQ2xhc3MgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGR5bmFtaWNSZXF1aXJlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF6eUxvYWRlZEludGVncmF0aW9uPFQgPSBvYmplY3Q+IGV4dGVuZHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogTG9hZHMgdGhlIGludGVncmF0aW9uJ3MgZGVwZW5kZW5jeSBhbmQgY2FjaGVzIGl0IHNvIGl0IGRvZXNuJ3QgaGF2ZSB0byBiZSBsb2FkZWQgYWdhaW4uXG4gICAqXG4gICAqIElmIHRoaXMgcmV0dXJucyB1bmRlZmluZWQsIHRoZSBkZXBlbmRlbmN5IGNvdWxkIG5vdCBiZSBsb2FkZWQuXG4gICAqL1xuICBsb2FkRGVwZW5kZW5jeSgpOiBUIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgbGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnM6ICgoKSA9PiBMYXp5TG9hZGVkSW50ZWdyYXRpb24pW10gPSBbXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vYXBvbGxvJykgYXMge1xuICAgICAgQXBvbGxvOiBJbnRlZ3JhdGlvbkNsYXNzPExhenlMb2FkZWRJbnRlZ3JhdGlvbj47XG4gICAgfTtcbiAgICByZXR1cm4gbmV3IGludGVncmF0aW9uLkFwb2xsbygpO1xuICB9LFxuICAoKSA9PiB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL2Fwb2xsbycpIGFzIHtcbiAgICAgIEFwb2xsbzogSW50ZWdyYXRpb25DbGFzczxMYXp5TG9hZGVkSW50ZWdyYXRpb24+O1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5BcG9sbG8oeyB1c2VOZXN0anM6IHRydWUgfSk7XG4gIH0sXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vZ3JhcGhxbCcpIGFzIHtcbiAgICAgIEdyYXBoUUw6IEludGVncmF0aW9uQ2xhc3M8TGF6eUxvYWRlZEludGVncmF0aW9uPjtcbiAgICB9O1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uR3JhcGhRTCgpO1xuICB9LFxuICAoKSA9PiB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL21vbmdvJykgYXMge1xuICAgICAgTW9uZ286IEludGVncmF0aW9uQ2xhc3M8TGF6eUxvYWRlZEludGVncmF0aW9uPjtcbiAgICB9O1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uTW9uZ28oKTtcbiAgfSxcbiAgKCkgPT4ge1xuICAgIGNvbnN0IGludGVncmF0aW9uID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAnLi9tb25nbycpIGFzIHtcbiAgICAgIE1vbmdvOiBJbnRlZ3JhdGlvbkNsYXNzPExhenlMb2FkZWRJbnRlZ3JhdGlvbj47XG4gICAgfTtcbiAgICByZXR1cm4gbmV3IGludGVncmF0aW9uLk1vbmdvKHsgbW9uZ29vc2U6IHRydWUgfSk7XG4gIH0sXG4gICgpID0+IHtcbiAgICBjb25zdCBpbnRlZ3JhdGlvbiA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJy4vbXlzcWwnKSBhcyB7XG4gICAgICBNeXNxbDogSW50ZWdyYXRpb25DbGFzczxMYXp5TG9hZGVkSW50ZWdyYXRpb24+O1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBpbnRlZ3JhdGlvbi5NeXNxbCgpO1xuICB9LFxuICAoKSA9PiB7XG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICcuL3Bvc3RncmVzJykgYXMge1xuICAgICAgUG9zdGdyZXM6IEludGVncmF0aW9uQ2xhc3M8TGF6eUxvYWRlZEludGVncmF0aW9uPjtcbiAgICB9O1xuICAgIHJldHVybiBuZXcgaW50ZWdyYXRpb24uUG9zdGdyZXMoKTtcbiAgfSxcbl07XG4iXSwibmFtZXMiOlsibGF6eUxvYWRlZE5vZGVQZXJmb3JtYW5jZU1vbml0b3JpbmdJbnRlZ3JhdGlvbnMiLCJpbnRlZ3JhdGlvbiIsInV0aWxzIiwiZHluYW1pY1JlcXVpcmUiLCJtb2R1bGUiLCJBcG9sbG8iLCJ1c2VOZXN0anMiLCJHcmFwaFFMIiwiTW9uZ28iLCJtb25nb29zZSIsIk15c3FsIiwiUG9zdGdyZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/lazy.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/mongo.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/mongo.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\n\nvar OPERATIONS = ['aggregate',\n// aggregate(pipeline, options, callback)\n'bulkWrite',\n// bulkWrite(operations, options, callback)\n'countDocuments',\n// countDocuments(query, options, callback)\n'createIndex',\n// createIndex(fieldOrSpec, options, callback)\n'createIndexes',\n// createIndexes(indexSpecs, options, callback)\n'deleteMany',\n// deleteMany(filter, options, callback)\n'deleteOne',\n// deleteOne(filter, options, callback)\n'distinct',\n// distinct(key, query, options, callback)\n'drop',\n// drop(options, callback)\n'dropIndex',\n// dropIndex(indexName, options, callback)\n'dropIndexes',\n// dropIndexes(options, callback)\n'estimatedDocumentCount',\n// estimatedDocumentCount(options, callback)\n'find',\n// find(query, options, callback)\n'findOne',\n// findOne(query, options, callback)\n'findOneAndDelete',\n// findOneAndDelete(filter, options, callback)\n'findOneAndReplace',\n// findOneAndReplace(filter, replacement, options, callback)\n'findOneAndUpdate',\n// findOneAndUpdate(filter, update, options, callback)\n'indexes',\n// indexes(options, callback)\n'indexExists',\n// indexExists(indexes, options, callback)\n'indexInformation',\n// indexInformation(options, callback)\n'initializeOrderedBulkOp',\n// initializeOrderedBulkOp(options, callback)\n'insertMany',\n// insertMany(docs, options, callback)\n'insertOne',\n// insertOne(doc, options, callback)\n'isCapped',\n// isCapped(options, callback)\n'mapReduce',\n// mapReduce(map, reduce, options, callback)\n'options',\n// options(options, callback)\n'parallelCollectionScan',\n// parallelCollectionScan(options, callback)\n'rename',\n// rename(newName, options, callback)\n'replaceOne',\n// replaceOne(filter, doc, options, callback)\n'stats',\n// stats(options, callback)\n'updateMany',\n// updateMany(filter, update, options, callback)\n'updateOne' // updateOne(filter, update, options, callback)\n];\n\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\nfunction isCursor(maybeCursor) {\n  return maybeCursor && _typeof(maybeCursor) === 'object' && maybeCursor.once && typeof maybeCursor.once === 'function';\n}\n\n/** Tracing integration for mongo package */\nvar Mongo = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @inheritDoc\n   */\n  function Mongo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Mongo);\n    Mongo.prototype.__init.call(this);\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n\n  /** @inheritdoc */\n  _createClass(Mongo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mongo.id;\n    }\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n      return this._module = this._module || utils.loadModule(moduleName);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Mongo Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = this.loadDependency();\n      if (!pkg) {\n        var moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(\"Mongo Integration was unable to require `\".concat(moduleName, \"` package.\"));\n        return;\n      }\n      this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n    }\n\n    /**\n     * Patches original collection methods\n     */\n  }, {\n    key: \"_instrumentOperations\",\n    value: function _instrumentOperations(collection, operations, getCurrentHub) {\n      var _this = this;\n      operations.forEach(function (operation) {\n        return _this._patchOperation(collection, operation, getCurrentHub);\n      });\n    }\n\n    /**\n     * Patches original collection to utilize our tracing functionality\n     */\n  }, {\n    key: \"_patchOperation\",\n    value: function _patchOperation(collection, operation, getCurrentHub) {\n      if (!(operation in collection.prototype)) return;\n      var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n      utils.fill(collection.prototype, operation, function (orig) {\n        return function () {\n          var _this2 = this;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          var lastArg = args[args.length - 1];\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n\n          // Check if the operation was passed a callback. (mapReduce requires a different check, as\n          // its (non-callback) arguments can also be functions.)\n          if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n            var _span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n              return _4.startChild;\n            }, 'call', function (_5) {\n              return _5(getSpanContext(_this2, operation, args));\n            }]);\n            var maybePromiseOrCursor = orig.call.apply(orig, [this].concat(args));\n            if (utils.isThenable(maybePromiseOrCursor)) {\n              return maybePromiseOrCursor.then(function (res) {\n                _optionalChain([_span, 'optionalAccess', function (_6) {\n                  return _6.finish;\n                }, 'call', function (_7) {\n                  return _7();\n                }]);\n                return res;\n              });\n            }\n            // If the operation returns a Cursor\n            // we need to attach a listener to it to finish the span when the cursor is closed.\n            else if (isCursor(maybePromiseOrCursor)) {\n              var cursor = maybePromiseOrCursor;\n              try {\n                cursor.once('close', function () {\n                  _optionalChain([_span, 'optionalAccess', function (_8) {\n                    return _8.finish;\n                  }, 'call', function (_9) {\n                    return _9();\n                  }]);\n                });\n              } catch (e) {\n                // If the cursor is already closed, `once` will throw an error. In that case, we can\n                // finish the span immediately.\n                _optionalChain([_span, 'optionalAccess', function (_10) {\n                  return _10.finish;\n                }, 'call', function (_11) {\n                  return _11();\n                }]);\n              }\n              return cursor;\n            } else {\n              _optionalChain([_span, 'optionalAccess', function (_12) {\n                return _12.finish;\n              }, 'call', function (_13) {\n                return _13();\n              }]);\n              return maybePromiseOrCursor;\n            }\n          }\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_14) {\n            return _14.startChild;\n          }, 'call', function (_15) {\n            return _15(getSpanContext(_this2, operation, args.slice(0, -1)));\n          }]);\n          return orig.call.apply(orig, [this].concat(_toConsumableArray(args.slice(0, -1)), [function (err, result) {\n            _optionalChain([span, 'optionalAccess', function (_16) {\n              return _16.finish;\n            }, 'call', function (_17) {\n              return _17();\n            }]);\n            lastArg(err, result);\n          }]));\n        };\n      });\n    }\n\n    /**\n     * Form a SpanContext based on the user input to a given operation.\n     */\n  }, {\n    key: \"_getSpanContextFromOperationArguments\",\n    value: function _getSpanContextFromOperationArguments(collection, operation, args) {\n      var data = {\n        collectionName: collection.collectionName,\n        dbName: collection.dbName,\n        namespace: collection.namespace,\n        'db.system': 'mongodb'\n      };\n      var spanContext = {\n        op: 'db',\n        description: operation,\n        data: data\n      };\n\n      // If the operation takes no arguments besides `options` and `callback`, or if argument\n      // collection is disabled for this operation, just return early.\n      var signature = OPERATION_SIGNATURES[operation];\n      var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n      if (!signature || !shouldDescribe) {\n        return spanContext;\n      }\n      try {\n        // Special case for `mapReduce`, as the only one accepting functions as arguments.\n        if (operation === 'mapReduce') {\n          var _args = _slicedToArray(args, 2),\n            map = _args[0],\n            reduce = _args[1];\n          data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n          data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n        } else {\n          for (var i = 0; i < signature.length; i++) {\n            data[signature[i]] = JSON.stringify(args[i]);\n          }\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n      return spanContext;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Mongo';\n    }\n  }]);\n  return Mongo;\n}();\nMongo.__initStatic();\nexports.Mongo = Mongo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/mongo.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/mysql.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/mysql.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n/** Tracing integration for node-mysql package */\nvar Mysql = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Mysql() {\n    _classCallCheck(this, Mysql);\n    Mysql.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(Mysql, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mysql.id;\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      return this._module = this._module || utils.loadModule('mysql/lib/Connection.js');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Mysql Integration was unable to require `mysql` package.');\n        return;\n      }\n\n      // The original function will have one of these signatures:\n      //    function (callback) => void\n      //    function (options, callback) => void\n      //    function (options, values, callback) => void\n      utils.fill(pkg, 'createQuery', function (orig) {\n        return function (options, values, callback) {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n            return _4.startChild;\n          }, 'call', function (_5) {\n            return _5({\n              description: typeof options === 'string' ? options : options.sql,\n              op: 'db',\n              data: {\n                'db.system': 'mysql'\n              }\n            });\n          }]);\n          if (typeof callback === 'function') {\n            return orig.call(this, options, values, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_6) {\n                return _6.finish;\n              }, 'call', function (_7) {\n                return _7();\n              }]);\n              callback(err, result, fields);\n            });\n          }\n          if (typeof values === 'function') {\n            return orig.call(this, options, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              values(err, result, fields);\n            });\n          }\n          return orig.call(this, options, values, callback);\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Mysql';\n    }\n  }]);\n  return Mysql;\n}();\nMysql.__initStatic();\nexports.Mysql = Mysql;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9ub2RlL2ludGVncmF0aW9ucy9teXNxbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBO0FBQUEsSUFDQUEsS0FBQTtFQUFBOztFQUFBLFNBQUFBLE1BQUE7SUFBQUMsZUFBQSxPQUFBRCxLQUFBO0lBQUFBLEtBQUEsQ0FBQUUsU0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUE7RUFBQTtFQUNBOzs7RUFBQUMsWUFBQSxDQUFBTCxLQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQTtJQUtBOzs7SUFHQSxTQUFBSixPQUFBO01BQUEsS0FBQUssSUFBQSxHQUFBUixLQUFBLENBQUFTLEVBQUE7SUFBQTs7SUFJQTtFQUFBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUNBLFNBQUFHLGVBQUE7TUFDQSxZQUFBQyxPQUFBLFFBQUFBLE9BQUEsSUFBQUMsS0FBQSxDQUFBQyxVQUFBO0lBQ0E7O0lBRUE7OztFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFPLFVBQUFDLENBQUEsRUFBQUMsYUFBQTtNQUNBLElBQUFDLFNBQUEsQ0FBQUMsZ0NBQUEsQ0FBQUYsYUFBQTtRQUNBLFFBQUFHLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBUCxLQUFBLENBQUFRLE1BQUEsQ0FBQUMsR0FBQTtRQUNBO01BQ0E7TUFFQSxJQUFBQyxHQUFBLFFBQUFaLGNBQUE7TUFFQSxLQUFBWSxHQUFBO1FBQ0EsUUFBQUgsZ0JBQUEsb0JBQUFBLGdCQUFBLEtBQUFQLEtBQUEsQ0FBQVEsTUFBQSxDQUFBRyxLQUFBO1FBQ0E7TUFDQTs7TUFFQTtNQUNBO01BQ0E7TUFDQTtNQUNBWCxLQUFBLENBQUFZLElBQUEsQ0FBQUYsR0FBQSwyQkFBQUcsSUFBQTtRQUNBLGlCQUFBQyxPQUFBLEVBQUFDLE1BQUEsRUFBQUMsUUFBQTtVQUNBLElBQUFDLEtBQUEsR0FBQWIsYUFBQSxHQUFBYyxRQUFBO1VBQ0EsSUFBQUMsVUFBQSxHQUFBQyxjQUFBLEVBQUFILEtBQUEsOEJBQUFJLEVBQUE7WUFBQSxPQUFBQSxFQUFBLENBQUFDLE9BQUE7VUFBQSxxQkFBQUMsRUFBQTtZQUFBLE9BQUFBLEVBQUE7VUFBQTtVQUNBLElBQUFDLElBQUEsR0FBQUosY0FBQSxFQUFBRCxVQUFBLDhCQUFBTSxFQUFBO1lBQUEsT0FBQUEsRUFBQSxDQUFBQyxVQUFBO1VBQUEscUJBQUFDLEVBQUE7WUFBQSxPQUFBQSxFQUFBO2NBQ0FDLFdBQUEsU0FBQWQsT0FBQSxnQkFBQUEsT0FBQSxHQUFBQSxPQUFBLENBQUFlLEdBQUE7Y0FDQUMsRUFBQTtjQUNBQyxJQUFBO2dCQUNBO2NBQ0E7WUFDQTtVQUFBO1VBRUEsV0FBQWYsUUFBQTtZQUNBLE9BQUFILElBQUEsQ0FBQXJCLElBQUEsT0FBQXNCLE9BQUEsRUFBQUMsTUFBQSxZQUFBaUIsR0FBQSxFQUFBQyxNQUFBLEVBQUFDLE1BQUE7Y0FDQWQsY0FBQSxFQUFBSSxJQUFBLDhCQUFBVyxFQUFBO2dCQUFBLE9BQUFBLEVBQUEsQ0FBQUMsTUFBQTtjQUFBLHFCQUFBQyxFQUFBO2dCQUFBLE9BQUFBLEVBQUE7Y0FBQTtjQUNBckIsUUFBQSxDQUFBZ0IsR0FBQSxFQUFBQyxNQUFBLEVBQUFDLE1BQUE7WUFDQTtVQUNBO1VBRUEsV0FBQW5CLE1BQUE7WUFDQSxPQUFBRixJQUFBLENBQUFyQixJQUFBLE9BQUFzQixPQUFBLFlBQUFrQixHQUFBLEVBQUFDLE1BQUEsRUFBQUMsTUFBQTtjQUNBZCxjQUFBLEVBQUFJLElBQUEsOEJBQUFjLEVBQUE7Z0JBQUEsT0FBQUEsRUFBQSxDQUFBRixNQUFBO2NBQUEscUJBQUFHLEVBQUE7Z0JBQUEsT0FBQUEsRUFBQTtjQUFBO2NBQ0F4QixNQUFBLENBQUFpQixHQUFBLEVBQUFDLE1BQUEsRUFBQUMsTUFBQTtZQUNBO1VBQ0E7VUFFQSxPQUFBckIsSUFBQSxDQUFBckIsSUFBQSxPQUFBc0IsT0FBQSxFQUFBQyxNQUFBLEVBQUFDLFFBQUE7UUFDQTtNQUNBO0lBQ0E7RUFBQTtJQUFBdEIsR0FBQTtJQUFBQyxLQUFBLEVBL0RBLFNBQUE2QyxhQUFBO01BQUEsS0FBQTNDLEVBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQVQsS0FBQTtBQUFBO0FBZ0VBQSxLQUFBLENBQUFvRCxZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL25vZGUvaW50ZWdyYXRpb25zL215c3FsLnRzPzNjYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBFdmVudFByb2Nlc3NvciB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZmlsbCwgbG9hZE1vZHVsZSwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgTGF6eUxvYWRlZEludGVncmF0aW9uIH0gZnJvbSAnLi9sYXp5JztcbmltcG9ydCB7IHNob3VsZERpc2FibGVBdXRvSW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi91dGlscy9ub2RlLXV0aWxzJztcblxuaW50ZXJmYWNlIE15c3FsQ29ubmVjdGlvbiB7XG4gIGNyZWF0ZVF1ZXJ5OiAoKSA9PiB2b2lkO1xufVxuXG4vKiogVHJhY2luZyBpbnRlZ3JhdGlvbiBmb3Igbm9kZS1teXNxbCBwYWNrYWdlICovXG5leHBvcnQgY2xhc3MgTXlzcWwgaW1wbGVtZW50cyBMYXp5TG9hZGVkSW50ZWdyYXRpb248TXlzcWxDb25uZWN0aW9uPiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ015c3FsJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBNeXNxbC5pZDtcblxuICBwcml2YXRlIF9tb2R1bGU/OiBNeXNxbENvbm5lY3Rpb247XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHB1YmxpYyBsb2FkRGVwZW5kZW5jeSgpOiBNeXNxbENvbm5lY3Rpb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiAodGhpcy5fbW9kdWxlID0gdGhpcy5fbW9kdWxlIHx8IGxvYWRNb2R1bGUoJ215c3FsL2xpYi9Db25uZWN0aW9uLmpzJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKF86IChjYWxsYmFjazogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQsIGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IHZvaWQge1xuICAgIGlmIChzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbihnZXRDdXJyZW50SHViKSkge1xuICAgICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5sb2coJ015c3FsIEludGVncmF0aW9uIGlzIHNraXBwZWQgYmVjYXVzZSBvZiBpbnN0cnVtZW50ZXIgY29uZmlndXJhdGlvbi4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwa2cgPSB0aGlzLmxvYWREZXBlbmRlbmN5KCk7XG5cbiAgICBpZiAoIXBrZykge1xuICAgICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5lcnJvcignTXlzcWwgSW50ZWdyYXRpb24gd2FzIHVuYWJsZSB0byByZXF1aXJlIGBteXNxbGAgcGFja2FnZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUaGUgb3JpZ2luYWwgZnVuY3Rpb24gd2lsbCBoYXZlIG9uZSBvZiB0aGVzZSBzaWduYXR1cmVzOlxuICAgIC8vICAgIGZ1bmN0aW9uIChjYWxsYmFjaykgPT4gdm9pZFxuICAgIC8vICAgIGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykgPT4gdm9pZFxuICAgIC8vICAgIGZ1bmN0aW9uIChvcHRpb25zLCB2YWx1ZXMsIGNhbGxiYWNrKSA9PiB2b2lkXG4gICAgZmlsbChwa2csICdjcmVhdGVRdWVyeScsIGZ1bmN0aW9uIChvcmlnOiAoKSA9PiB2b2lkKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRoaXM6IHVua25vd24sIG9wdGlvbnM6IHVua25vd24sIHZhbHVlczogdW5rbm93biwgY2FsbGJhY2s6IHVua25vd24pIHtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRDdXJyZW50SHViKCkuZ2V0U2NvcGUoKTtcbiAgICAgICAgY29uc3QgcGFyZW50U3BhbiA9IHNjb3BlPy5nZXRTcGFuKCk7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBwYXJlbnRTcGFuPy5zdGFydENoaWxkKHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnID8gb3B0aW9ucyA6IChvcHRpb25zIGFzIHsgc3FsOiBzdHJpbmcgfSkuc3FsLFxuICAgICAgICAgIG9wOiAnZGInLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICdkYi5zeXN0ZW0nOiAnbXlzcWwnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIG9wdGlvbnMsIHZhbHVlcywgZnVuY3Rpb24gKGVycjogRXJyb3IsIHJlc3VsdDogdW5rbm93biwgZmllbGRzOiB1bmtub3duKSB7XG4gICAgICAgICAgICBzcGFuPy5maW5pc2goKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0LCBmaWVsZHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnI6IEVycm9yLCByZXN1bHQ6IHVua25vd24sIGZpZWxkczogdW5rbm93bikge1xuICAgICAgICAgICAgc3Bhbj8uZmluaXNoKCk7XG4gICAgICAgICAgICB2YWx1ZXMoZXJyLCByZXN1bHQsIGZpZWxkcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIG9wdGlvbnMsIHZhbHVlcywgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk15c3FsIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwibG9hZERlcGVuZGVuY3kiLCJfbW9kdWxlIiwidXRpbHMiLCJsb2FkTW9kdWxlIiwic2V0dXBPbmNlIiwiXyIsImdldEN1cnJlbnRIdWIiLCJub2RlVXRpbHMiLCJzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiIsIl9fU0VOVFJZX0RFQlVHX18iLCJsb2dnZXIiLCJsb2ciLCJwa2ciLCJlcnJvciIsImZpbGwiLCJvcmlnIiwib3B0aW9ucyIsInZhbHVlcyIsImNhbGxiYWNrIiwic2NvcGUiLCJnZXRTY29wZSIsInBhcmVudFNwYW4iLCJfb3B0aW9uYWxDaGFpbiIsIl8yIiwiZ2V0U3BhbiIsIl8zIiwic3BhbiIsIl80Iiwic3RhcnRDaGlsZCIsIl81IiwiZGVzY3JpcHRpb24iLCJzcWwiLCJvcCIsImRhdGEiLCJlcnIiLCJyZXN1bHQiLCJmaWVsZHMiLCJfNiIsImZpbmlzaCIsIl83IiwiXzgiLCJfOSIsIl9faW5pdFN0YXRpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/mysql.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/postgres.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/postgres.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\n\n/** Tracing integration for node-postgres package */\nvar Postgres = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Postgres() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Postgres);\n    Postgres.prototype.__init.call(this);\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /** @inheritdoc */\n  _createClass(Postgres, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Postgres.id;\n    }\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      return this._module = this._module || utils.loadModule('pg');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Postgres Integration was unable to require `pg` package.');\n        return;\n      }\n      if (this._usePgNative && !_optionalChain([pkg, 'access', function (_2) {\n        return _2.native;\n      }, 'optionalAccess', function (_3) {\n        return _3.Client;\n      }])) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n        return;\n      }\n      var _ref = this._usePgNative ? pkg.native : pkg,\n        Client = _ref.Client;\n\n      /**\n       * function (query, callback) => void\n       * function (query, params, callback) => void\n       * function (query) => Promise\n       * function (query, params) => Promise\n       * function (pg.Cursor) => pg.Cursor\n       */\n      utils.fill(Client.prototype, 'query', function (orig) {\n        return function (config, values, callback) {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_4) {\n            return _4.getSpan;\n          }, 'call', function (_5) {\n            return _5();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_6) {\n            return _6.startChild;\n          }, 'call', function (_7) {\n            return _7({\n              description: typeof config === 'string' ? config : config.text,\n              op: 'db',\n              data: {\n                'db.system': 'postgresql'\n              }\n            });\n          }]);\n          if (typeof callback === 'function') {\n            return orig.call(this, config, values, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              callback(err, result);\n            });\n          }\n          if (typeof values === 'function') {\n            return orig.call(this, config, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_10) {\n                return _10.finish;\n              }, 'call', function (_11) {\n                return _11();\n              }]);\n              values(err, result);\n            });\n          }\n          var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n          if (utils.isThenable(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_12) {\n                return _12.finish;\n              }, 'call', function (_13) {\n                return _13();\n              }]);\n              return res;\n            });\n          }\n          _optionalChain([span, 'optionalAccess', function (_14) {\n            return _14.finish;\n          }, 'call', function (_15) {\n            return _15();\n          }]);\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Postgres';\n    }\n  }]);\n  return Postgres;\n}();\nPostgres.__initStatic();\nexports.Postgres = Postgres;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/postgres.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/prisma.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/prisma.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar nodeUtils = __webpack_require__(/*! ./utils/node-utils.js */ \"./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\");\nfunction isValidPrismaClient(possibleClient) {\n  return possibleClient && !!possibleClient['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nvar Prisma = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Prisma ORM Client Instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Prisma() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Prisma);\n    Prisma.prototype.__init.call(this);\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Unsupported Prisma client provided to PrismaIntegration. Provided client: \".concat(JSON.stringify(options.client)));\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Prisma, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Prisma.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!this._client) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('PrismaIntegration is missing a Prisma Client Instance');\n        return;\n      }\n      if (nodeUtils.shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Prisma Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      this._client.$use(function (params, next) {\n        var action = params.action;\n        var model = params.model;\n        return core.trace({\n          name: model ? \"\".concat(model, \" \").concat(action) : action,\n          op: 'db.sql.prisma',\n          data: {\n            'db.system': 'prisma'\n          }\n        }, function () {\n          return next(params);\n        });\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Prisma';\n    }\n  }]);\n  return Prisma;\n}();\nPrisma.__initStatic();\nexports.Prisma = Prisma;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9ub2RlL2ludGVncmF0aW9ucy9wcmlzbWEuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNBLFNBQUFBLG9CQUFBQyxjQUFBO0VBQ0EsT0FBQUEsY0FBQSxNQUFBQSxjQUFBO0FBQ0E7O0FBRUE7QUFBQSxJQUNBQyxNQUFBO0VBQUE7O0VBV0E7QUFDQTtBQUNBOztFQUdBO0FBQ0E7QUFDQTtFQUNBLFNBQUFBLE9BQUE7SUFBQSxJQUFBQyxPQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtJQUFBRyxlQUFBLE9BQUFMLE1BQUE7SUFBQUEsTUFBQSxDQUFBTSxTQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQTtJQUNBLElBQUFWLG1CQUFBLENBQUFHLE9BQUEsQ0FBQVEsTUFBQTtNQUNBLEtBQUFDLE9BQUEsR0FBQVQsT0FBQSxDQUFBUSxNQUFBO0lBQ0E7TUFDQSxRQUFBRSxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsOEVBQUFDLE1BQUEsQ0FDQUMsSUFBQSxDQUFBQyxTQUFBLENBQUFoQixPQUFBLENBQUFRLE1BQUEsRUFDQTtJQUNBO0VBQ0E7O0VBRUE7QUFDQTtBQUNBO0VBRkFTLFlBQUEsQ0FBQWxCLE1BQUE7SUFBQW1CLEdBQUE7SUFBQUMsS0FBQTtJQXhCQTtBQUNBO0FBQ0E7SUFDQSxTQUFBYixPQUFBO01BQUEsS0FBQWMsSUFBQSxHQUFBckIsTUFBQSxDQUFBc0IsRUFBQTtJQUFBO0VBQUE7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBd0JBLFNBQUFHLFVBQUFDLENBQUEsRUFBQUMsYUFBQTtNQUNBLFVBQUFmLE9BQUE7UUFDQSxRQUFBQyxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFhLEtBQUE7UUFDQTtNQUNBO01BRUEsSUFBQUMsU0FBQSxDQUFBQyxnQ0FBQSxDQUFBSCxhQUFBO1FBQ0EsUUFBQWQsZ0JBQUEsb0JBQUFBLGdCQUFBLEtBQUFDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBZ0IsR0FBQTtRQUNBO01BQ0E7TUFFQSxLQUFBbkIsT0FBQSxDQUFBb0IsSUFBQSxXQUFBQyxNQUFBLEVBQUFDLElBQUE7UUFDQSxJQUFBQyxNQUFBLEdBQUFGLE1BQUEsQ0FBQUUsTUFBQTtRQUNBLElBQUFDLEtBQUEsR0FBQUgsTUFBQSxDQUFBRyxLQUFBO1FBQ0EsT0FBQUMsSUFBQSxDQUFBQyxLQUFBLENBQ0E7VUFBQWYsSUFBQSxFQUFBYSxLQUFBLE1BQUFuQixNQUFBLENBQUFtQixLQUFBLE9BQUFuQixNQUFBLENBQUFrQixNQUFBLElBQUFBLE1BQUE7VUFBQUksRUFBQTtVQUFBQyxJQUFBO1lBQUE7VUFBQTtRQUFBLEdBQ0E7VUFBQSxPQUFBTixJQUFBLENBQUFELE1BQUE7UUFBQSxDQUNBO01BQ0E7SUFDQTtFQUFBO0lBQUFaLEdBQUE7SUFBQUMsS0FBQTtJQW5EQTtBQUNBO0FBQ0E7SUFDQSxTQUFBbUIsYUFBQTtNQUFBLEtBQUFqQixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUF0QixNQUFBO0FBQUE7QUFpREFBLE1BQUEsQ0FBQXVDLFlBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi9zcmMvbm9kZS9pbnRlZ3JhdGlvbnMvcHJpc21hLnRzP2UyZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgdHJhY2UgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBFdmVudFByb2Nlc3NvciwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5pbXBvcnQgeyBzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMvbm9kZS11dGlscyc7XG5cbnR5cGUgUHJpc21hQWN0aW9uID1cbiAgfCAnZmluZFVuaXF1ZSdcbiAgfCAnZmluZE1hbnknXG4gIHwgJ2ZpbmRGaXJzdCdcbiAgfCAnY3JlYXRlJ1xuICB8ICdjcmVhdGVNYW55J1xuICB8ICd1cGRhdGUnXG4gIHwgJ3VwZGF0ZU1hbnknXG4gIHwgJ3Vwc2VydCdcbiAgfCAnZGVsZXRlJ1xuICB8ICdkZWxldGVNYW55J1xuICB8ICdleGVjdXRlUmF3J1xuICB8ICdxdWVyeVJhdydcbiAgfCAnYWdncmVnYXRlJ1xuICB8ICdjb3VudCdcbiAgfCAncnVuQ29tbWFuZFJhdyc7XG5cbmludGVyZmFjZSBQcmlzbWFNaWRkbGV3YXJlUGFyYW1zIHtcbiAgbW9kZWw/OiB1bmtub3duO1xuICBhY3Rpb246IFByaXNtYUFjdGlvbjtcbiAgYXJnczogdW5rbm93bjtcbiAgZGF0YVBhdGg6IHN0cmluZ1tdO1xuICBydW5JblRyYW5zYWN0aW9uOiBib29sZWFuO1xufVxuXG50eXBlIFByaXNtYU1pZGRsZXdhcmU8VCA9IHVua25vd24+ID0gKFxuICBwYXJhbXM6IFByaXNtYU1pZGRsZXdhcmVQYXJhbXMsXG4gIG5leHQ6IChwYXJhbXM6IFByaXNtYU1pZGRsZXdhcmVQYXJhbXMpID0+IFByb21pc2U8VD4sXG4pID0+IFByb21pc2U8VD47XG5cbmludGVyZmFjZSBQcmlzbWFDbGllbnQge1xuICAkdXNlOiAoY2I6IFByaXNtYU1pZGRsZXdhcmUpID0+IHZvaWQ7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQcmlzbWFDbGllbnQocG9zc2libGVDbGllbnQ6IHVua25vd24pOiBwb3NzaWJsZUNsaWVudCBpcyBQcmlzbWFDbGllbnQge1xuICByZXR1cm4gcG9zc2libGVDbGllbnQgJiYgISEocG9zc2libGVDbGllbnQgYXMgUHJpc21hQ2xpZW50KVsnJHVzZSddO1xufVxuXG4vKiogVHJhY2luZyBpbnRlZ3JhdGlvbiBmb3IgQHByaXNtYS9jbGllbnQgcGFja2FnZSAqL1xuZXhwb3J0IGNsYXNzIFByaXNtYSBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnUHJpc21hJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBQcmlzbWEuaWQ7XG5cbiAgLyoqXG4gICAqIFByaXNtYSBPUk0gQ2xpZW50IEluc3RhbmNlXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9jbGllbnQ/OiBQcmlzbWFDbGllbnQ7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogeyBjbGllbnQ/OiB1bmtub3duIH0gPSB7fSkge1xuICAgIGlmIChpc1ZhbGlkUHJpc21hQ2xpZW50KG9wdGlvbnMuY2xpZW50KSkge1xuICAgICAgdGhpcy5fY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9fREVCVUdfQlVJTERfXyAmJlxuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICBgVW5zdXBwb3J0ZWQgUHJpc21hIGNsaWVudCBwcm92aWRlZCB0byBQcmlzbWFJbnRlZ3JhdGlvbi4gUHJvdmlkZWQgY2xpZW50OiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMuY2xpZW50KX1gLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShfOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5lcnJvcignUHJpc21hSW50ZWdyYXRpb24gaXMgbWlzc2luZyBhIFByaXNtYSBDbGllbnQgSW5zdGFuY2UnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkRGlzYWJsZUF1dG9JbnN0cnVtZW50YXRpb24oZ2V0Q3VycmVudEh1YikpIHtcbiAgICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIubG9nKCdQcmlzbWEgSW50ZWdyYXRpb24gaXMgc2tpcHBlZCBiZWNhdXNlIG9mIGluc3RydW1lbnRlciBjb25maWd1cmF0aW9uLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NsaWVudC4kdXNlKChwYXJhbXMsIG5leHQ6IChwYXJhbXM6IFByaXNtYU1pZGRsZXdhcmVQYXJhbXMpID0+IFByb21pc2U8dW5rbm93bj4pID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHBhcmFtcy5hY3Rpb247XG4gICAgICBjb25zdCBtb2RlbCA9IHBhcmFtcy5tb2RlbDtcbiAgICAgIHJldHVybiB0cmFjZShcbiAgICAgICAgeyBuYW1lOiBtb2RlbCA/IGAke21vZGVsfSAke2FjdGlvbn1gIDogYWN0aW9uLCBvcDogJ2RiLnNxbC5wcmlzbWEnLCBkYXRhOiB7ICdkYi5zeXN0ZW0nOiAncHJpc21hJyB9IH0sXG4gICAgICAgICgpID0+IG5leHQocGFyYW1zKSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJpc1ZhbGlkUHJpc21hQ2xpZW50IiwicG9zc2libGVDbGllbnQiLCJQcmlzbWEiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsImNsaWVudCIsIl9jbGllbnQiLCJfX1NFTlRSWV9ERUJVR19fIiwidXRpbHMiLCJsb2dnZXIiLCJ3YXJuIiwiY29uY2F0IiwiSlNPTiIsInN0cmluZ2lmeSIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwic2V0dXBPbmNlIiwiXyIsImdldEN1cnJlbnRIdWIiLCJlcnJvciIsIm5vZGVVdGlscyIsInNob3VsZERpc2FibGVBdXRvSW5zdHJ1bWVudGF0aW9uIiwibG9nIiwiJHVzZSIsInBhcmFtcyIsIm5leHQiLCJhY3Rpb24iLCJtb2RlbCIsImNvcmUiLCJ0cmFjZSIsIm9wIiwiZGF0YSIsIl9faW5pdFN0YXRpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/prisma.js\n");

/***/ }),

/***/ "./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var _require = __webpack_require__(/*! @sentry/utils/cjs/buildPolyfills */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/index.js\"),\n  _optionalChain = _require._optionalChain;\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Check if Sentry auto-instrumentation should be disabled.\n *\n * @param getCurrentHub A method to fetch the current hub\n * @returns boolean\n */\nfunction shouldDisableAutoInstrumentation(getCurrentHub) {\n  var clientOptions = _optionalChain([getCurrentHub, 'call', function (_) {\n    return _();\n  }, 'access', function (_2) {\n    return _2.getClient;\n  }, 'call', function (_3) {\n    return _3();\n  }, 'optionalAccess', function (_4) {\n    return _4.getOptions;\n  }, 'call', function (_5) {\n    return _5();\n  }]);\n  var instrumenter = _optionalChain([clientOptions, 'optionalAccess', function (_6) {\n    return _6.instrumenter;\n  }]) || 'sentry';\n  return instrumenter !== 'sentry';\n}\nexports.shouldDisableAutoInstrumentation = shouldDisableAutoInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC90cmFjaW5nL2Nqcy9ub2RlL2ludGVncmF0aW9ucy91dGlscy9ub2RlLXV0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOzs7Ozs7QUFNQSxTQUFBQSxpQ0FBQUMsYUFBQTtFQUNBLElBQUFDLGFBQUEsR0FBQUMsY0FBQSxFQUFBRixhQUFBLG9CQUFBRyxDQUFBO0lBQUEsT0FBQUEsQ0FBQTtFQUFBLHVCQUFBQyxFQUFBO0lBQUEsT0FBQUEsRUFBQSxDQUFBQyxTQUFBO0VBQUEscUJBQUFDLEVBQUE7SUFBQSxPQUFBQSxFQUFBO0VBQUEsK0JBQUFDLEVBQUE7SUFBQSxPQUFBQSxFQUFBLENBQUFDLFVBQUE7RUFBQSxxQkFBQUMsRUFBQTtJQUFBLE9BQUFBLEVBQUE7RUFBQTtFQUNBLElBQUFDLFlBQUEsR0FBQVIsY0FBQSxFQUFBRCxhQUFBLDhCQUFBVSxFQUFBO0lBQUEsT0FBQUEsRUFBQSxDQUFBRCxZQUFBO0VBQUE7RUFFQSxPQUFBQSxZQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi8uLi9zcmMvbm9kZS9pbnRlZ3JhdGlvbnMvdXRpbHMvbm9kZS11dGlscy50cz84YjZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHViIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbi8qKlxuICogQ2hlY2sgaWYgU2VudHJ5IGF1dG8taW5zdHJ1bWVudGF0aW9uIHNob3VsZCBiZSBkaXNhYmxlZC5cbiAqXG4gKiBAcGFyYW0gZ2V0Q3VycmVudEh1YiBBIG1ldGhvZCB0byBmZXRjaCB0aGUgY3VycmVudCBodWJcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZERpc2FibGVBdXRvSW5zdHJ1bWVudGF0aW9uKGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IGJvb2xlYW4ge1xuICBjb25zdCBjbGllbnRPcHRpb25zID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCk7XG4gIGNvbnN0IGluc3RydW1lbnRlciA9IGNsaWVudE9wdGlvbnM/Lmluc3RydW1lbnRlciB8fCAnc2VudHJ5JztcblxuICByZXR1cm4gaW5zdHJ1bWVudGVyICE9PSAnc2VudHJ5Jztcbn1cbiJdLCJuYW1lcyI6WyJzaG91bGREaXNhYmxlQXV0b0luc3RydW1lbnRhdGlvbiIsImdldEN1cnJlbnRIdWIiLCJjbGllbnRPcHRpb25zIiwiX29wdGlvbmFsQ2hhaW4iLCJfIiwiXzIiLCJnZXRDbGllbnQiLCJfMyIsIl80IiwiZ2V0T3B0aW9ucyIsIl81IiwiaW5zdHJ1bWVudGVyIiwiXzYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry-internal/tracing/cjs/node/integrations/utils/node-utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/client.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/client.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.get.js */ \"./node_modules/core-js/modules/es.reflect.get.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar eventbuilder = __webpack_require__(/*! ./eventbuilder.js */ \"./node_modules/@sentry/browser/cjs/eventbuilder.js\");\nvar helpers = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar breadcrumbs = __webpack_require__(/*! ./integrations/breadcrumbs.js */ \"./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js\");\nvar userfeedback = __webpack_require__(/*! ./userfeedback.js */ \"./node_modules/@sentry/browser/cjs/userfeedback.js\");\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /*#__PURE__*/function (_core$BaseClient) {\n  \"use strict\";\n\n  _inherits(BrowserClient, _core$BaseClient);\n  var _super = _createSuper(BrowserClient);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    var _this;\n    _classCallCheck(this, BrowserClient);\n    var sdkSource = helpers.WINDOW.SENTRY_SDK_SOURCE || utils.getSDKSource();\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: \"\".concat(sdkSource, \":@sentry/browser\"),\n        version: core.SDK_VERSION\n      }],\n      version: core.SDK_VERSION\n    };\n    _this = _super.call(this, options);\n    if (options.sendClientReports && helpers.WINDOW.document) {\n      helpers.WINDOW.document.addEventListener('visibilitychange', function () {\n        if (helpers.WINDOW.document.visibilityState === 'hidden') {\n          _this._flushOutcomes();\n        }\n      });\n    }\n    return _this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(BrowserClient, [{\n    key: \"eventFromException\",\n    value: function eventFromException(exception, hint) {\n      return eventbuilder.eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"eventFromMessage\",\n    value: function eventFromMessage(message) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n      var hint = arguments.length > 2 ? arguments[2] : undefined;\n      return eventbuilder.eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event, hint) {\n      // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n      // activated its `sentry` option.\n      // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n      // bundles, if it is not used by the SDK.\n      // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n      // way for now.\n      var breadcrumbIntegration = this.getIntegrationById(breadcrumbs.BREADCRUMB_INTEGRATION_ID);\n      // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n      // \"Breadcrumbs\" that does not have this function.\n      if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n        breadcrumbIntegration.addSentryBreadcrumb(event);\n      }\n      _get(_getPrototypeOf(BrowserClient.prototype), \"sendEvent\", this).call(this, event, hint);\n    }\n\n    /**\n     * Sends user feedback to Sentry.\n     */\n  }, {\n    key: \"captureUserFeedback\",\n    value: function captureUserFeedback(feedback) {\n      if (!this._isEnabled()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('SDK not enabled, will not capture user feedback.');\n        return;\n      }\n      var envelope = userfeedback.createUserFeedbackEnvelope(feedback, {\n        metadata: this.getSdkMetadata(),\n        dsn: this.getDsn(),\n        tunnel: this.getOptions().tunnel\n      });\n      void this._sendEnvelope(envelope);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      event.platform = event.platform || 'javascript';\n      return _get(_getPrototypeOf(BrowserClient.prototype), \"_prepareEvent\", this).call(this, event, hint, scope);\n    }\n\n    /**\n     * Sends client reports as an envelope.\n     */\n  }, {\n    key: \"_flushOutcomes\",\n    value: function _flushOutcomes() {\n      var outcomes = this._clearOutcomes();\n      if (outcomes.length === 0) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('No outcomes to send');\n        return;\n      }\n      if (!this._dsn) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('No dsn provided, will not send outcomes');\n        return;\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Sending outcomes:', outcomes);\n      var envelope = utils.createClientReportEnvelope(outcomes, this._options.tunnel && utils.dsnToString(this._dsn));\n      void this._sendEnvelope(envelope);\n    }\n  }]);\n  return BrowserClient;\n}(core.BaseClient);\nexports.BrowserClient = BrowserClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/client.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/eventbuilder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/eventbuilder.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nfunction exceptionFromError(stackParser, ex) {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  var frames = parseStackFrames(stackParser, ex);\n  var exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex)\n  };\n  if (frames.length) {\n    exception.stacktrace = {\n      frames: frames\n    };\n  }\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n  return exception;\n}\n\n/**\n * @hidden\n */\nfunction eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {\n  var hub = core.getCurrentHub();\n  var client = hub.getClient();\n  var normalizeDepth = client && client.getOptions().normalizeDepth;\n  var event = {\n    exception: {\n      values: [{\n        type: utils.isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n        value: \"Non-Error \".concat(isUnhandledRejection ? 'promise rejection' : 'exception', \" captured with keys: \").concat(utils.extractExceptionKeysForMessage(exception))\n      }]\n    },\n    extra: {\n      __serialized__: utils.normalizeToSize(exception, normalizeDepth)\n    }\n  };\n  if (syntheticException) {\n    var frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      event.exception.values[0].stacktrace = {\n        frames: frames\n      };\n    }\n  }\n  return event;\n}\n\n/**\n * @hidden\n */\nfunction eventFromError(stackParser, ex) {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n}\n\n/** Parses stack frames from an error */\nfunction parseStackFrames(stackParser, ex) {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  var stacktrace = ex.stacktrace || ex.stack || '';\n  var popSize = getPopSize(ex);\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\nfunction getPopSize(ex) {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex) {\n  var message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nfunction eventFromException(stackParser, exception, hint, attachStacktrace) {\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  utils.addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return utils.resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(stackParser, message) {\n  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';\n  var hint = arguments.length > 3 ? arguments[3] : undefined;\n  var attachStacktrace = arguments.length > 4 ? arguments[4] : undefined;\n  var syntheticException = hint && hint.syntheticException || undefined;\n  var event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return utils.resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nfunction eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n  var event;\n  if (utils.isErrorEvent(exception) && exception.error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    var errorEvent = exception;\n    return eventFromError(stackParser, errorEvent.error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (utils.isDOMError(exception) || utils.isDOMException(exception)) {\n    var domException = exception;\n    if ('stack' in exception) {\n      event = eventFromError(stackParser, exception);\n    } else {\n      var name = domException.name || (utils.isDOMError(domException) ? 'DOMError' : 'DOMException');\n      var message = domException.message ? \"\".concat(name, \": \").concat(domException.message) : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      utils.addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = _objectSpread(_objectSpread({}, event.tags), {}, {\n        'DOMException.code': \"\".concat(domException.code)\n      });\n    }\n    return event;\n  }\n  if (utils.isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (utils.isPlainObject(exception) || utils.isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    var objectException = exception;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    utils.addExceptionMechanism(event, {\n      synthetic: true\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);\n  utils.addExceptionTypeValue(event, \"\".concat(exception), undefined);\n  utils.addExceptionMechanism(event, {\n    synthetic: true\n  });\n  return event;\n}\n\n/**\n * @hidden\n */\nfunction eventFromString(stackParser, input, syntheticException, attachStacktrace) {\n  var event = {\n    message: input\n  };\n  if (attachStacktrace && syntheticException) {\n    var frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: input,\n          stacktrace: {\n            frames: frames\n          }\n        }]\n      };\n    }\n  }\n  return event;\n}\nexports.eventFromError = eventFromError;\nexports.eventFromException = eventFromException;\nexports.eventFromMessage = eventFromMessage;\nexports.eventFromPlainObject = eventFromPlainObject;\nexports.eventFromString = eventFromString;\nexports.eventFromUnknownInput = eventFromUnknownInput;\nexports.exceptionFromError = exceptionFromError;\nexports.parseStackFrames = parseStackFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/eventbuilder.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/helpers.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/helpers.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar WINDOW = utils.GLOBAL_OBJ;\nvar ignoreOnError = 0;\n\n/**\n * @hidden\n */\nfunction shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nfunction ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(function () {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nfunction wrap(fn) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var before\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  = arguments.length > 2 ? arguments[2] : undefined;\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    var wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (utils.getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  var sentryWrapped = function sentryWrapped() {\n    var args = Array.prototype.slice.call(arguments);\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      var wrappedArguments = args.map(function (arg) {\n        return wrap(arg, options);\n      });\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n      core.withScope(function (scope) {\n        scope.addEventProcessor(function (event) {\n          if (options.mechanism) {\n            utils.addExceptionTypeValue(event, undefined, undefined);\n            utils.addExceptionMechanism(event, options.mechanism);\n          }\n          event.extra = _objectSpread(_objectSpread({}, event.extra), {}, {\n            arguments: args\n          });\n          return event;\n        });\n        core.captureException(ex);\n      });\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (var property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  utils.markFunctionWrapped(sentryWrapped, fn);\n  utils.addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get: function get() {\n          return fn.name;\n        }\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\n\nexports.WINDOW = WINDOW;\nexports.ignoreNextOnError = ignoreNextOnError;\nexports.shouldIgnoreOnError = shouldIgnoreOnError;\nexports.wrap = wrap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/helpers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar client = __webpack_require__(/*! ./client.js */ \"./node_modules/@sentry/browser/cjs/client.js\");\nvar fetch = __webpack_require__(/*! ./transports/fetch.js */ \"./node_modules/@sentry/browser/cjs/transports/fetch.js\");\nvar xhr = __webpack_require__(/*! ./transports/xhr.js */ \"./node_modules/@sentry/browser/cjs/transports/xhr.js\");\nvar stackParsers = __webpack_require__(/*! ./stack-parsers.js */ \"./node_modules/@sentry/browser/cjs/stack-parsers.js\");\nvar eventbuilder = __webpack_require__(/*! ./eventbuilder.js */ \"./node_modules/@sentry/browser/cjs/eventbuilder.js\");\nvar userfeedback = __webpack_require__(/*! ./userfeedback.js */ \"./node_modules/@sentry/browser/cjs/userfeedback.js\");\nvar sdk = __webpack_require__(/*! ./sdk.js */ \"./node_modules/@sentry/browser/cjs/sdk.js\");\nvar index = __webpack_require__(/*! ./integrations/index.js */ \"./node_modules/@sentry/browser/cjs/integrations/index.js\");\nvar replay = __webpack_require__(/*! @sentry/replay */ \"./node_modules/@sentry/replay/cjs/index.js\");\nvar tracing = __webpack_require__(/*! @sentry-internal/tracing */ \"./node_modules/@sentry-internal/tracing/cjs/index.js\");\nvar offline = __webpack_require__(/*! ./transports/offline.js */ \"./node_modules/@sentry/browser/cjs/transports/offline.js\");\nvar hubextensions = __webpack_require__(/*! ./profiling/hubextensions.js */ \"./node_modules/@sentry/browser/cjs/profiling/hubextensions.js\");\nvar integration = __webpack_require__(/*! ./profiling/integration.js */ \"./node_modules/@sentry/browser/cjs/profiling/integration.js\");\nvar globalhandlers = __webpack_require__(/*! ./integrations/globalhandlers.js */ \"./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js\");\nvar trycatch = __webpack_require__(/*! ./integrations/trycatch.js */ \"./node_modules/@sentry/browser/cjs/integrations/trycatch.js\");\nvar breadcrumbs = __webpack_require__(/*! ./integrations/breadcrumbs.js */ \"./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js\");\nvar linkederrors = __webpack_require__(/*! ./integrations/linkederrors.js */ \"./node_modules/@sentry/browser/cjs/integrations/linkederrors.js\");\nvar httpcontext = __webpack_require__(/*! ./integrations/httpcontext.js */ \"./node_modules/@sentry/browser/cjs/integrations/httpcontext.js\");\nvar dedupe = __webpack_require__(/*! ./integrations/dedupe.js */ \"./node_modules/@sentry/browser/cjs/integrations/dedupe.js\");\nvar windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nif (helpers.WINDOW.Sentry && helpers.WINDOW.Sentry.Integrations) {\n  windowIntegrations = helpers.WINDOW.Sentry.Integrations;\n}\nvar INTEGRATIONS = _objectSpread(_objectSpread(_objectSpread({}, windowIntegrations), core.Integrations), index);\nexports.FunctionToString = core.FunctionToString;\nexports.Hub = core.Hub;\nexports.InboundFilters = core.InboundFilters;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addGlobalEventProcessor = core.addGlobalEventProcessor;\nexports.addTracingExtensions = core.addTracingExtensions;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureMessage = core.captureMessage;\nexports.configureScope = core.configureScope;\nexports.createTransport = core.createTransport;\nexports.extractTraceparentData = core.extractTraceparentData;\nexports.getActiveTransaction = core.getActiveTransaction;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getHubFromCarrier = core.getHubFromCarrier;\nexports.makeMain = core.makeMain;\nexports.makeMultiplexedTransport = core.makeMultiplexedTransport;\nexports.setContext = core.setContext;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanStatusfromHttpCode = core.spanStatusfromHttpCode;\nexports.startTransaction = core.startTransaction;\nexports.trace = core.trace;\nexports.withScope = core.withScope;\nexports.WINDOW = helpers.WINDOW;\nexports.BrowserClient = client.BrowserClient;\nexports.makeFetchTransport = fetch.makeFetchTransport;\nexports.makeXHRTransport = xhr.makeXHRTransport;\nexports.chromeStackLineParser = stackParsers.chromeStackLineParser;\nexports.defaultStackLineParsers = stackParsers.defaultStackLineParsers;\nexports.defaultStackParser = stackParsers.defaultStackParser;\nexports.geckoStackLineParser = stackParsers.geckoStackLineParser;\nexports.opera10StackLineParser = stackParsers.opera10StackLineParser;\nexports.opera11StackLineParser = stackParsers.opera11StackLineParser;\nexports.winjsStackLineParser = stackParsers.winjsStackLineParser;\nexports.eventFromException = eventbuilder.eventFromException;\nexports.eventFromMessage = eventbuilder.eventFromMessage;\nexports.createUserFeedbackEnvelope = userfeedback.createUserFeedbackEnvelope;\nexports.captureUserFeedback = sdk.captureUserFeedback;\nexports.close = sdk.close;\nexports.defaultIntegrations = sdk.defaultIntegrations;\nexports.flush = sdk.flush;\nexports.forceLoad = sdk.forceLoad;\nexports.init = sdk.init;\nexports.lastEventId = sdk.lastEventId;\nexports.onLoad = sdk.onLoad;\nexports.showReportDialog = sdk.showReportDialog;\nexports.wrap = sdk.wrap;\nexports.Replay = replay.Replay;\nexports.BrowserTracing = tracing.BrowserTracing;\nexports.defaultRequestInstrumentationOptions = tracing.defaultRequestInstrumentationOptions;\nexports.instrumentOutgoingRequests = tracing.instrumentOutgoingRequests;\nexports.makeBrowserOfflineTransport = offline.makeBrowserOfflineTransport;\nexports.onProfilingStartRouteTransaction = hubextensions.onProfilingStartRouteTransaction;\nexports.BrowserProfilingIntegration = integration.BrowserProfilingIntegration;\nexports.GlobalHandlers = globalhandlers.GlobalHandlers;\nexports.TryCatch = trycatch.TryCatch;\nexports.Breadcrumbs = breadcrumbs.Breadcrumbs;\nexports.LinkedErrors = linkederrors.LinkedErrors;\nexports.HttpContext = httpcontext.HttpContext;\nexports.Dedupe = dedupe.Dedupe;\nexports.Integrations = INTEGRATIONS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFBQSxrQkFBQTs7QUFFQTtBQUNBLElBQUFDLE9BQUEsQ0FBQUMsTUFBQSxDQUFBQyxNQUFBLElBQUFGLE9BQUEsQ0FBQUMsTUFBQSxDQUFBQyxNQUFBLENBQUFDLFlBQUE7RUFDQUosa0JBQUEsR0FBQUMsT0FBQSxDQUFBQyxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsWUFBQTtBQUNBO0FBRUEsSUFBQUMsWUFBQSxHQUFBQyxhQUFBLENBQUFBLGFBQUEsQ0FBQUEsYUFBQSxLQUNBTixrQkFBQSxHQUNBTyxJQUFBLENBQUFILFlBQUEsR0FDQUksS0FBQSxDQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2luZGV4LnRzPzVmM2QiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJztcblxuaW1wb3J0IHsgSW50ZWdyYXRpb25zIGFzIENvcmVJbnRlZ3JhdGlvbnMgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuXG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0ICogYXMgQnJvd3NlckludGVncmF0aW9ucyBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5cbmxldCB3aW5kb3dJbnRlZ3JhdGlvbnMgPSB7fTtcblxuLy8gVGhpcyBibG9jayBpcyBuZWVkZWQgdG8gYWRkIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgaW50ZWdyYXRpb25zIHBhY2thZ2VzIHdoZW4gdXNlZCB3aXRoIGEgQ0ROXG5pZiAoV0lORE9XLlNlbnRyeSAmJiBXSU5ET1cuU2VudHJ5LkludGVncmF0aW9ucykge1xuICB3aW5kb3dJbnRlZ3JhdGlvbnMgPSBXSU5ET1cuU2VudHJ5LkludGVncmF0aW9ucztcbn1cblxuY29uc3QgSU5URUdSQVRJT05TID0ge1xuICAuLi53aW5kb3dJbnRlZ3JhdGlvbnMsXG4gIC4uLkNvcmVJbnRlZ3JhdGlvbnMsXG4gIC4uLkJyb3dzZXJJbnRlZ3JhdGlvbnMsXG59O1xuXG5leHBvcnQgeyBJTlRFR1JBVElPTlMgYXMgSW50ZWdyYXRpb25zIH07XG5cbmV4cG9ydCB7IFJlcGxheSB9IGZyb20gJ0BzZW50cnkvcmVwbGF5JztcbmV4cG9ydCB7XG4gIEJyb3dzZXJUcmFjaW5nLFxuICBkZWZhdWx0UmVxdWVzdEluc3RydW1lbnRhdGlvbk9wdGlvbnMsXG4gIGluc3RydW1lbnRPdXRnb2luZ1JlcXVlc3RzLFxufSBmcm9tICdAc2VudHJ5LWludGVybmFsL3RyYWNpbmcnO1xuZXhwb3J0IHR5cGUgeyBSZXF1ZXN0SW5zdHJ1bWVudGF0aW9uT3B0aW9ucyB9IGZyb20gJ0BzZW50cnktaW50ZXJuYWwvdHJhY2luZyc7XG5leHBvcnQge1xuICBhZGRUcmFjaW5nRXh0ZW5zaW9ucyxcbiAgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSxcbiAgZ2V0QWN0aXZlVHJhbnNhY3Rpb24sXG4gIHNwYW5TdGF0dXNmcm9tSHR0cENvZGUsXG4gIHRyYWNlLFxuICBtYWtlTXVsdGlwbGV4ZWRUcmFuc3BvcnQsXG59IGZyb20gJ0BzZW50cnkvY29yZSc7XG5leHBvcnQgdHlwZSB7IFNwYW5TdGF0dXNUeXBlIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmV4cG9ydCB0eXBlIHsgU3BhbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuZXhwb3J0IHsgbWFrZUJyb3dzZXJPZmZsaW5lVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnRzL29mZmxpbmUnO1xuZXhwb3J0IHsgb25Qcm9maWxpbmdTdGFydFJvdXRlVHJhbnNhY3Rpb24gfSBmcm9tICcuL3Byb2ZpbGluZy9odWJleHRlbnNpb25zJztcbmV4cG9ydCB7IEJyb3dzZXJQcm9maWxpbmdJbnRlZ3JhdGlvbiB9IGZyb20gJy4vcHJvZmlsaW5nL2ludGVncmF0aW9uJztcbiJdLCJuYW1lcyI6WyJ3aW5kb3dJbnRlZ3JhdGlvbnMiLCJoZWxwZXJzIiwiV0lORE9XIiwiU2VudHJ5IiwiSW50ZWdyYXRpb25zIiwiSU5URUdSQVRJT05TIiwiX29iamVjdFNwcmVhZCIsImNvcmUiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nvar MAX_ALLOWED_STRING_LENGTH = 1024;\nvar BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    _classCallCheck(this, Breadcrumbs);\n    Breadcrumbs.prototype.__init.call(this);\n    this.options = _objectSpread({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  _createClass(Breadcrumbs, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Breadcrumbs.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (this.options.console) {\n        utils.addInstrumentationHandler('console', _consoleBreadcrumb);\n      }\n      if (this.options.dom) {\n        utils.addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n      }\n      if (this.options.xhr) {\n        utils.addInstrumentationHandler('xhr', _xhrBreadcrumb);\n      }\n      if (this.options.fetch) {\n        utils.addInstrumentationHandler('fetch', _fetchBreadcrumb);\n      }\n      if (this.options.history) {\n        utils.addInstrumentationHandler('history', _historyBreadcrumb);\n      }\n    }\n\n    /**\n     * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n     */\n  }, {\n    key: \"addSentryBreadcrumb\",\n    value: function addSentryBreadcrumb(event) {\n      if (this.options.sentry) {\n        core.getCurrentHub().addBreadcrumb({\n          category: \"sentry.\".concat(event.type === 'transaction' ? 'transaction' : 'event'),\n          event_id: event.event_id,\n          level: event.level,\n          message: utils.getEventDescription(event)\n        }, {\n          event: event\n        });\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = BREADCRUMB_INTEGRATION_ID;\n    }\n  }]);\n  return Breadcrumbs;\n}();\nBreadcrumbs.__initStatic();\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _domBreadcrumb(dom) {\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = _typeof(dom) === 'object' ? dom.serializeAttribute : undefined;\n    var maxStringLength = _typeof(dom) === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"`dom.maxStringLength` cannot exceed \".concat(MAX_ALLOWED_STRING_LENGTH, \", but a value of \").concat(maxStringLength, \" was configured. Sentry will use \").concat(MAX_ALLOWED_STRING_LENGTH, \" instead.\"));\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      var event = handlerData.event;\n      target = _isEvent(event) ? utils.htmlTreeAsString(event.target, {\n        keyAttrs: keyAttrs,\n        maxStringLength: maxStringLength\n      }) : utils.htmlTreeAsString(event, {\n        keyAttrs: keyAttrs,\n        maxStringLength: maxStringLength\n      });\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    core.getCurrentHub().addBreadcrumb({\n      category: \"ui.\".concat(handlerData.name),\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _consoleBreadcrumb(handlerData) {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (var i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: utils.severityLevelFromString(handlerData.level),\n    message: utils.safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \".concat(utils.safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  core.getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _xhrBreadcrumb(handlerData) {\n  var startTimestamp = handlerData.startTimestamp,\n    endTimestamp = handlerData.endTimestamp;\n  var sentryXhrData = handlerData.xhr[utils.SENTRY_XHR_DATA_KEY];\n\n  // We only capture complete, non-sentry requests\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return;\n  }\n  var method = sentryXhrData.method,\n    url = sentryXhrData.url,\n    status_code = sentryXhrData.status_code,\n    body = sentryXhrData.body;\n  var data = {\n    method: method,\n    url: url,\n    status_code: status_code\n  };\n  var hint = {\n    xhr: handlerData.xhr,\n    input: body,\n    startTimestamp: startTimestamp,\n    endTimestamp: endTimestamp\n  };\n  core.getCurrentHub().addBreadcrumb({\n    category: 'xhr',\n    data: data,\n    type: 'http'\n  }, hint);\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _fetchBreadcrumb(handlerData) {\n  var startTimestamp = handlerData.startTimestamp,\n    endTimestamp = handlerData.endTimestamp;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    var data = handlerData.fetchData;\n    var hint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp: startTimestamp,\n      endTimestamp: endTimestamp\n    };\n    core.getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: data,\n      level: 'error',\n      type: 'http'\n    }, hint);\n  } else {\n    var _data = _objectSpread(_objectSpread({}, handlerData.fetchData), {}, {\n      status_code: handlerData.response && handlerData.response.status\n    });\n    var _hint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: startTimestamp,\n      endTimestamp: endTimestamp\n    };\n    core.getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: _data,\n      type: 'http'\n    }, _hint);\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _historyBreadcrumb(handlerData) {\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = utils.parseUrl(helpers.WINDOW.location.href);\n  var parsedFrom = utils.parseUrl(from);\n  var parsedTo = utils.parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  core.getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}\nfunction _isEvent(event) {\n  return event && !!event.target;\n}\nexports.BREADCRUMB_INTEGRATION_ID = BREADCRUMB_INTEGRATION_ID;\nexports.Breadcrumbs = Breadcrumbs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/dedupe.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/dedupe.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** Deduplication filter */\nvar Dedupe = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Dedupe() {\n    _classCallCheck(this, Dedupe);\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(Dedupe, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Dedupe.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcessor = function eventProcessor(currentEvent) {\n        // We want to ignore any non-error type events, e.g. transactions or replays\n        // These should never be deduped, and also not be compared against as _previousEvent.\n        if (currentEvent.type) {\n          return currentEvent;\n        }\n        var self = getCurrentHub().getIntegration(Dedupe);\n        if (self) {\n          // Juuust in case something goes wrong\n          try {\n            if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Event dropped due to being a duplicate of previously captured event.');\n              return null;\n            }\n          } catch (_oO) {\n            return self._previousEvent = currentEvent;\n          }\n          return self._previousEvent = currentEvent;\n        }\n        return currentEvent;\n      };\n      eventProcessor.id = this.name;\n      addGlobalEventProcessor(eventProcessor);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Dedupe';\n    }\n  }]);\n  return Dedupe;\n}();\nDedupe.__initStatic();\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n  var currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n  var previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexports.Dedupe = Dedupe;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/dedupe.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar eventbuilder = __webpack_require__(/*! ../eventbuilder.js */ \"./node_modules/@sentry/browser/cjs/eventbuilder.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** Global handlers */\nvar GlobalHandlers = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    _classCallCheck(this, GlobalHandlers);\n    GlobalHandlers.prototype.__init.call(this);\n    GlobalHandlers.prototype.__init2.call(this);\n    this._options = _objectSpread({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(GlobalHandlers, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = GlobalHandlers.id;\n    }\n\n    /** JSDoc */\n\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._installFunc = {\n        onerror: _installGlobalOnErrorHandler,\n        onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n      };\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      Error.stackTraceLimit = 50;\n      var options = this._options;\n\n      // We can disable guard-for-in as we construct the options object above + do checks against\n      // `this._installFunc` for the property.\n      // eslint-disable-next-line guard-for-in\n      for (var key in options) {\n        var installFunc = this._installFunc[key];\n        if (installFunc && options[key]) {\n          globalHandlerLog(key);\n          installFunc();\n          this._installFunc[key] = undefined;\n        }\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'GlobalHandlers';\n    }\n  }]);\n  return GlobalHandlers;\n}();\nGlobalHandlers.__initStatic();\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler() {\n  utils.addInstrumentationHandler('error',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (data) {\n    var _getHubAndOptions = getHubAndOptions(),\n      _getHubAndOptions2 = _slicedToArray(_getHubAndOptions, 3),\n      hub = _getHubAndOptions2[0],\n      stackParser = _getHubAndOptions2[1],\n      attachStacktrace = _getHubAndOptions2[2];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var msg = data.msg,\n      url = data.url,\n      line = data.line,\n      column = data.column,\n      error = data.error;\n    if (helpers.shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n    var event = error === undefined && utils.isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventbuilder.eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  utils.addInstrumentationHandler('unhandledrejection',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (e) {\n    var _getHubAndOptions3 = getHubAndOptions(),\n      _getHubAndOptions4 = _slicedToArray(_getHubAndOptions3, 3),\n      hub = _getHubAndOptions4[0],\n      stackParser = _getHubAndOptions4[1],\n      attachStacktrace = _getHubAndOptions4[2];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var error = e;\n\n    // dig the object of the rejection out of known event types\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      }\n      // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    if (helpers.shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n    var event = utils.isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventbuilder.eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \".concat(String(reason))\n      }]\n    }\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  var message = utils.isErrorEvent(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {};\n  // event.exception.values\n  var ev = e.values = e.values || [];\n  // event.exception.values[0]\n  var ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = utils.isString(url) && url.length > 0 ? url : utils.getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"Global Handler attached: \".concat(type));\n}\nfunction addMechanismAndCapture(hub, error, event, type) {\n  utils.addExceptionMechanism(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\nfunction getHubAndOptions() {\n  var hub = core.getCurrentHub();\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {\n    stackParser: function stackParser() {\n      return [];\n    },\n    attachStacktrace: false\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\nexports.GlobalHandlers = GlobalHandlers;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/httpcontext.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/httpcontext.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\n\n/** HttpContext integration collects information about HTTP request headers */\nvar HttpContext = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(HttpContext, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = HttpContext.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      core.addGlobalEventProcessor(function (event) {\n        if (core.getCurrentHub().getIntegration(HttpContext)) {\n          // if none of the information we want exists, don't bother\n          if (!helpers.WINDOW.navigator && !helpers.WINDOW.location && !helpers.WINDOW.document) {\n            return event;\n          }\n\n          // grab as much info as exists and add it to the event\n          var url = event.request && event.request.url || helpers.WINDOW.location && helpers.WINDOW.location.href;\n          var _ref = helpers.WINDOW.document || {},\n            referrer = _ref.referrer;\n          var _ref2 = helpers.WINDOW.navigator || {},\n            userAgent = _ref2.userAgent;\n          var headers = _objectSpread(_objectSpread(_objectSpread({}, event.request && event.request.headers), referrer && {\n            Referer: referrer\n          }), userAgent && {\n            'User-Agent': userAgent\n          });\n          var request = _objectSpread(_objectSpread(_objectSpread({}, event.request), url && {\n            url: url\n          }), {}, {\n            headers: headers\n          });\n          return _objectSpread(_objectSpread({}, event), {}, {\n            request: request\n          });\n        }\n        return event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'HttpContext';\n    }\n  }]);\n  return HttpContext;\n}();\nHttpContext.__initStatic();\nexports.HttpContext = HttpContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cGNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBO0FBQUEsSUFDQUEsV0FBQTtFQUFBOztFQUFBLFNBQUFBLFlBQUE7SUFBQUMsZUFBQSxPQUFBRCxXQUFBO0lBQUFBLFdBQUEsQ0FBQUUsU0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUE7RUFBQTtFQUNBO0FBQ0E7QUFDQTtFQUZBQyxZQUFBLENBQUFMLFdBQUE7SUFBQU0sR0FBQTtJQUFBQyxLQUFBO0lBS0E7QUFDQTtBQUNBO0lBQ0EsU0FBQUosT0FBQTtNQUFBLEtBQUFLLElBQUEsR0FBQVIsV0FBQSxDQUFBUyxFQUFBO0lBQUE7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQUcsVUFBQTtNQUNBQyxJQUFBLENBQUFDLHVCQUFBLFdBQUFDLEtBQUE7UUFDQSxJQUFBRixJQUFBLENBQUFHLGFBQUEsR0FBQUMsY0FBQSxDQUFBZixXQUFBO1VBQ0E7VUFDQSxLQUFBZ0IsT0FBQSxDQUFBQyxNQUFBLENBQUFDLFNBQUEsS0FBQUYsT0FBQSxDQUFBQyxNQUFBLENBQUFFLFFBQUEsS0FBQUgsT0FBQSxDQUFBQyxNQUFBLENBQUFHLFFBQUE7WUFDQSxPQUFBUCxLQUFBO1VBQ0E7O1VBRUE7VUFDQSxJQUFBUSxHQUFBLEdBQUFSLEtBQUEsQ0FBQVMsT0FBQSxJQUFBVCxLQUFBLENBQUFTLE9BQUEsQ0FBQUQsR0FBQSxJQUFBTCxPQUFBLENBQUFDLE1BQUEsQ0FBQUUsUUFBQSxJQUFBSCxPQUFBLENBQUFDLE1BQUEsQ0FBQUUsUUFBQSxDQUFBSSxJQUFBO1VBQ0EsSUFBQUMsSUFBQSxHQUFBUixPQUFBLENBQUFDLE1BQUEsQ0FBQUcsUUFBQTtZQUFBSyxRQUFBLEdBQUFELElBQUEsQ0FBQUMsUUFBQTtVQUNBLElBQUFDLEtBQUEsR0FBQVYsT0FBQSxDQUFBQyxNQUFBLENBQUFDLFNBQUE7WUFBQVMsU0FBQSxHQUFBRCxLQUFBLENBQUFDLFNBQUE7VUFFQSxJQUFBQyxPQUFBLEdBQUFDLGFBQUEsQ0FBQUEsYUFBQSxDQUFBQSxhQUFBLEtBQ0FoQixLQUFBLENBQUFTLE9BQUEsSUFBQVQsS0FBQSxDQUFBUyxPQUFBLENBQUFNLE9BQUEsR0FDQUgsUUFBQTtZQUFBSyxPQUFBLEVBQUFMO1VBQUEsSUFDQUUsU0FBQTtZQUFBLGNBQUFBO1VBQUEsRUFDQTtVQUNBLElBQUFMLE9BQUEsR0FBQU8sYUFBQSxDQUFBQSxhQUFBLENBQUFBLGFBQUEsS0FBQWhCLEtBQUEsQ0FBQVMsT0FBQSxHQUFBRCxHQUFBO1lBQUFBLEdBQUEsRUFBQUE7VUFBQTtZQUFBTyxPQUFBLEVBQUFBO1VBQUE7VUFFQSxPQUFBQyxhQUFBLENBQUFBLGFBQUEsS0FBQWhCLEtBQUE7WUFBQVMsT0FBQSxFQUFBQTtVQUFBO1FBQ0E7UUFDQSxPQUFBVCxLQUFBO01BQ0E7SUFDQTtFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQSxFQWxDQSxTQUFBd0IsYUFBQTtNQUFBLEtBQUF0QixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFULFdBQUE7QUFBQTtBQW1DQUEsV0FBQSxDQUFBK0IsWUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uL3NyYy9pbnRlZ3JhdGlvbnMvaHR0cGNvbnRleHQudHM/YTU1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEV2ZW50LCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuLyoqIEh0dHBDb250ZXh0IGludGVncmF0aW9uIGNvbGxlY3RzIGluZm9ybWF0aW9uIGFib3V0IEhUVFAgcmVxdWVzdCBoZWFkZXJzICovXG5leHBvcnQgY2xhc3MgSHR0cENvbnRleHQgaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZDogc3RyaW5nID0gJ0h0dHBDb250ZXh0JztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBIdHRwQ29udGV4dC5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoKTogdm9pZCB7XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgaWYgKGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihIdHRwQ29udGV4dCkpIHtcbiAgICAgICAgLy8gaWYgbm9uZSBvZiB0aGUgaW5mb3JtYXRpb24gd2Ugd2FudCBleGlzdHMsIGRvbid0IGJvdGhlclxuICAgICAgICBpZiAoIVdJTkRPVy5uYXZpZ2F0b3IgJiYgIVdJTkRPVy5sb2NhdGlvbiAmJiAhV0lORE9XLmRvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ3JhYiBhcyBtdWNoIGluZm8gYXMgZXhpc3RzIGFuZCBhZGQgaXQgdG8gdGhlIGV2ZW50XG4gICAgICAgIGNvbnN0IHVybCA9IChldmVudC5yZXF1ZXN0ICYmIGV2ZW50LnJlcXVlc3QudXJsKSB8fCAoV0lORE9XLmxvY2F0aW9uICYmIFdJTkRPVy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgY29uc3QgeyByZWZlcnJlciB9ID0gV0lORE9XLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICBjb25zdCB7IHVzZXJBZ2VudCB9ID0gV0lORE9XLm5hdmlnYXRvciB8fCB7fTtcblxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgIC4uLihldmVudC5yZXF1ZXN0ICYmIGV2ZW50LnJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgICAgLi4uKHJlZmVycmVyICYmIHsgUmVmZXJlcjogcmVmZXJyZXIgfSksXG4gICAgICAgICAgLi4uKHVzZXJBZ2VudCAmJiB7ICdVc2VyLUFnZW50JzogdXNlckFnZW50IH0pLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0geyAuLi5ldmVudC5yZXF1ZXN0LCAuLi4odXJsICYmIHsgdXJsIH0pLCBoZWFkZXJzIH07XG5cbiAgICAgICAgcmV0dXJuIHsgLi4uZXZlbnQsIHJlcXVlc3QgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkh0dHBDb250ZXh0IiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwic2V0dXBPbmNlIiwiY29yZSIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiZXZlbnQiLCJnZXRDdXJyZW50SHViIiwiZ2V0SW50ZWdyYXRpb24iLCJoZWxwZXJzIiwiV0lORE9XIiwibmF2aWdhdG9yIiwibG9jYXRpb24iLCJkb2N1bWVudCIsInVybCIsInJlcXVlc3QiLCJocmVmIiwiX3JlZiIsInJlZmVycmVyIiwiX3JlZjIiLCJ1c2VyQWdlbnQiLCJoZWFkZXJzIiwiX29iamVjdFNwcmVhZCIsIlJlZmVyZXIiLCJfX2luaXRTdGF0aWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/httpcontext.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var globalhandlers = __webpack_require__(/*! ./globalhandlers.js */ "./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js");
var trycatch = __webpack_require__(/*! ./trycatch.js */ "./node_modules/@sentry/browser/cjs/integrations/trycatch.js");
var breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ "./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js");
var linkederrors = __webpack_require__(/*! ./linkederrors.js */ "./node_modules/@sentry/browser/cjs/integrations/linkederrors.js");
var httpcontext = __webpack_require__(/*! ./httpcontext.js */ "./node_modules/@sentry/browser/cjs/integrations/httpcontext.js");
var dedupe = __webpack_require__(/*! ./dedupe.js */ "./node_modules/@sentry/browser/cjs/integrations/dedupe.js");
exports.GlobalHandlers = globalhandlers.GlobalHandlers;
exports.TryCatch = trycatch.TryCatch;
exports.Breadcrumbs = breadcrumbs.Breadcrumbs;
exports.LinkedErrors = linkederrors.LinkedErrors;
exports.HttpContext = httpcontext.HttpContext;
exports.Dedupe = dedupe.Dedupe;

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/linkederrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/linkederrors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar eventbuilder = __webpack_require__(/*! ../eventbuilder.js */ \"./node_modules/@sentry/browser/cjs/eventbuilder.js\");\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nvar LinkedErrors = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, LinkedErrors);\n    LinkedErrors.prototype.__init.call(this);\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(LinkedErrors, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = LinkedErrors.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      var client = core.getCurrentHub().getClient();\n      if (!client) {\n        return;\n      }\n      core.addGlobalEventProcessor(function (event, hint) {\n        var self = core.getCurrentHub().getIntegration(LinkedErrors);\n        return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'LinkedErrors';\n    }\n  }]);\n  return LinkedErrors;\n}();\nLinkedErrors.__initStatic();\n\n/**\n * @inheritDoc\n */\nfunction _handler(parser, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !utils.isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  var linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);\n  event.exception.values = [].concat(_toConsumableArray(linkedErrors), _toConsumableArray(event.exception.values));\n  return event;\n}\n\n/**\n * JSDOC\n */\nfunction _walkErrorTree(parser, limit, error, key) {\n  var stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  if (!utils.isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  var exception = eventbuilder.exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception].concat(_toConsumableArray(stack)));\n}\nexports.LinkedErrors = LinkedErrors;\nexports._handler = _handler;\nexports._walkErrorTree = _walkErrorTree;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU9BLElBQUFBLFdBQUE7QUFDQSxJQUFBQyxhQUFBOztBQU9BO0FBQUEsSUFDQUMsWUFBQTtFQUFBOztFQVdBO0FBQ0E7QUFDQTs7RUFHQTtBQUNBO0FBQ0E7O0VBR0E7QUFDQTtBQUNBO0VBQ0EsU0FBQUEsYUFBQTtJQUFBLElBQUFDLE9BQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBO0lBQUFHLGVBQUEsT0FBQUwsWUFBQTtJQUFBQSxZQUFBLENBQUFNLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0lBQ0EsS0FBQUMsSUFBQSxHQUFBUixPQUFBLENBQUFTLEdBQUEsSUFBQVosV0FBQTtJQUNBLEtBQUFhLE1BQUEsR0FBQVYsT0FBQSxDQUFBVyxLQUFBLElBQUFiLGFBQUE7RUFDQTs7RUFFQTtBQUNBO0FBQ0E7RUFGQWMsWUFBQSxDQUFBYixZQUFBO0lBQUFVLEdBQUE7SUFBQUksS0FBQTtJQXZCQTtBQUNBO0FBQ0E7SUFDQSxTQUFBUCxPQUFBO01BQUEsS0FBQVEsSUFBQSxHQUFBZixZQUFBLENBQUFnQixFQUFBO0lBQUE7RUFBQTtJQUFBTixHQUFBO0lBQUFJLEtBQUEsRUF1QkEsU0FBQUcsVUFBQTtNQUNBLElBQUFDLE1BQUEsR0FBQUMsSUFBQSxDQUFBQyxhQUFBLEdBQUFDLFNBQUE7TUFDQSxLQUFBSCxNQUFBO1FBQ0E7TUFDQTtNQUNBQyxJQUFBLENBQUFHLHVCQUFBLFdBQUFDLEtBQUEsRUFBQUMsSUFBQTtRQUNBLElBQUFDLElBQUEsR0FBQU4sSUFBQSxDQUFBQyxhQUFBLEdBQUFNLGNBQUEsQ0FBQTFCLFlBQUE7UUFDQSxPQUFBeUIsSUFBQSxHQUFBRSxRQUFBLENBQUFULE1BQUEsQ0FBQVUsVUFBQSxHQUFBQyxXQUFBLEVBQUFKLElBQUEsQ0FBQWhCLElBQUEsRUFBQWdCLElBQUEsQ0FBQWQsTUFBQSxFQUFBWSxLQUFBLEVBQUFDLElBQUEsSUFBQUQsS0FBQTtNQUNBO0lBQ0E7RUFBQTtJQUFBYixHQUFBO0lBQUFJLEtBQUE7SUF4Q0E7QUFDQTtBQUNBO0lBQ0EsU0FBQWdCLGFBQUE7TUFBQSxLQUFBZCxFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFoQixZQUFBO0FBQUE7QUFzQ0FBLFlBQUEsQ0FBQThCLFlBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQUgsU0FDQUksTUFBQSxFQUNBckIsR0FBQSxFQUNBRSxLQUFBLEVBQ0FXLEtBQUEsRUFDQUMsSUFBQSxFQUNBO0VBQ0EsS0FBQUQsS0FBQSxDQUFBUyxTQUFBLEtBQUFULEtBQUEsQ0FBQVMsU0FBQSxDQUFBQyxNQUFBLEtBQUFULElBQUEsS0FBQVUsS0FBQSxDQUFBQyxZQUFBLENBQUFYLElBQUEsQ0FBQVksaUJBQUEsRUFBQUMsS0FBQTtJQUNBLE9BQUFkLEtBQUE7RUFDQTtFQUNBLElBQUFlLFlBQUEsR0FBQUMsY0FBQSxDQUFBUixNQUFBLEVBQUFuQixLQUFBLEVBQUFZLElBQUEsQ0FBQVksaUJBQUEsRUFBQTFCLEdBQUE7RUFDQWEsS0FBQSxDQUFBUyxTQUFBLENBQUFDLE1BQUEsTUFBQU8sTUFBQSxDQUFBQyxrQkFBQSxDQUFBSCxZQUFBLEdBQUFHLGtCQUFBLENBQUFsQixLQUFBLENBQUFTLFNBQUEsQ0FBQUMsTUFBQTtFQUNBLE9BQUFWLEtBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFBZ0IsZUFDQVIsTUFBQSxFQUNBbkIsS0FBQSxFQUNBOEIsS0FBQSxFQUNBaEMsR0FBQSxFQUVBO0VBQUEsSUFEQWlDLEtBQUEsR0FBQXpDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUVBLEtBQUFnQyxLQUFBLENBQUFDLFlBQUEsQ0FBQU8sS0FBQSxDQUFBaEMsR0FBQSxHQUFBMkIsS0FBQSxLQUFBTSxLQUFBLENBQUF4QyxNQUFBLFFBQUFTLEtBQUE7SUFDQSxPQUFBK0IsS0FBQTtFQUNBO0VBQ0EsSUFBQVgsU0FBQSxHQUFBWSxZQUFBLENBQUFDLGtCQUFBLENBQUFkLE1BQUEsRUFBQVcsS0FBQSxDQUFBaEMsR0FBQTtFQUNBLE9BQUE2QixjQUFBLENBQUFSLE1BQUEsRUFBQW5CLEtBQUEsRUFBQThCLEtBQUEsQ0FBQWhDLEdBQUEsR0FBQUEsR0FBQSxHQUFBc0IsU0FBQSxFQUFBUSxNQUFBLENBQUFDLGtCQUFBLENBQUFFLEtBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uL3NyYy9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLnRzP2FlYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRIaW50LCBFeGNlcHRpb24sIEV4dGVuZGVkRXJyb3IsIEludGVncmF0aW9uLCBTdGFja1BhcnNlciB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgQnJvd3NlckNsaWVudCB9IGZyb20gJy4uL2NsaWVudCc7XG5pbXBvcnQgeyBleGNlcHRpb25Gcm9tRXJyb3IgfSBmcm9tICcuLi9ldmVudGJ1aWxkZXInO1xuXG5jb25zdCBERUZBVUxUX0tFWSA9ICdjYXVzZSc7XG5jb25zdCBERUZBVUxUX0xJTUlUID0gNTtcblxuaW50ZXJmYWNlIExpbmtlZEVycm9yc09wdGlvbnMge1xuICBrZXk6IHN0cmluZztcbiAgbGltaXQ6IG51bWJlcjtcbn1cblxuLyoqIEFkZHMgU0RLIGluZm8gdG8gYW4gZXZlbnQuICovXG5leHBvcnQgY2xhc3MgTGlua2VkRXJyb3JzIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdMaW5rZWRFcnJvcnMnO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IExpbmtlZEVycm9ycy5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2tleTogTGlua2VkRXJyb3JzT3B0aW9uc1sna2V5J107XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9saW1pdDogTGlua2VkRXJyb3JzT3B0aW9uc1snbGltaXQnXTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBQYXJ0aWFsPExpbmtlZEVycm9yc09wdGlvbnM+ID0ge30pIHtcbiAgICB0aGlzLl9rZXkgPSBvcHRpb25zLmtleSB8fCBERUZBVUxUX0tFWTtcbiAgICB0aGlzLl9saW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZSgpOiB2b2lkIHtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50PEJyb3dzZXJDbGllbnQ+KCk7XG4gICAgaWYgKCFjbGllbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoKGV2ZW50OiBFdmVudCwgaGludD86IEV2ZW50SGludCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihMaW5rZWRFcnJvcnMpO1xuICAgICAgcmV0dXJuIHNlbGYgPyBfaGFuZGxlcihjbGllbnQuZ2V0T3B0aW9ucygpLnN0YWNrUGFyc2VyLCBzZWxmLl9rZXksIHNlbGYuX2xpbWl0LCBldmVudCwgaGludCkgOiBldmVudDtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBpbmhlcml0RG9jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaGFuZGxlcihcbiAgcGFyc2VyOiBTdGFja1BhcnNlcixcbiAga2V5OiBzdHJpbmcsXG4gIGxpbWl0OiBudW1iZXIsXG4gIGV2ZW50OiBFdmVudCxcbiAgaGludD86IEV2ZW50SGludCxcbik6IEV2ZW50IHwgbnVsbCB7XG4gIGlmICghZXZlbnQuZXhjZXB0aW9uIHx8ICFldmVudC5leGNlcHRpb24udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gIGNvbnN0IGxpbmtlZEVycm9ycyA9IF93YWxrRXJyb3JUcmVlKHBhcnNlciwgbGltaXQsIGhpbnQub3JpZ2luYWxFeGNlcHRpb24gYXMgRXh0ZW5kZWRFcnJvciwga2V5KTtcbiAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IFsuLi5saW5rZWRFcnJvcnMsIC4uLmV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNdO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogSlNET0NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF93YWxrRXJyb3JUcmVlKFxuICBwYXJzZXI6IFN0YWNrUGFyc2VyLFxuICBsaW1pdDogbnVtYmVyLFxuICBlcnJvcjogRXh0ZW5kZWRFcnJvcixcbiAga2V5OiBzdHJpbmcsXG4gIHN0YWNrOiBFeGNlcHRpb25bXSA9IFtdLFxuKTogRXhjZXB0aW9uW10ge1xuICBpZiAoIWlzSW5zdGFuY2VPZihlcnJvcltrZXldLCBFcnJvcikgfHwgc3RhY2subGVuZ3RoICsgMSA+PSBsaW1pdCkge1xuICAgIHJldHVybiBzdGFjaztcbiAgfVxuICBjb25zdCBleGNlcHRpb24gPSBleGNlcHRpb25Gcm9tRXJyb3IocGFyc2VyLCBlcnJvcltrZXldKTtcbiAgcmV0dXJuIF93YWxrRXJyb3JUcmVlKHBhcnNlciwgbGltaXQsIGVycm9yW2tleV0sIGtleSwgW2V4Y2VwdGlvbiwgLi4uc3RhY2tdKTtcbn1cbiJdLCJuYW1lcyI6WyJERUZBVUxUX0tFWSIsIkRFRkFVTFRfTElNSVQiLCJMaW5rZWRFcnJvcnMiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9rZXkiLCJrZXkiLCJfbGltaXQiLCJsaW1pdCIsIl9jcmVhdGVDbGFzcyIsInZhbHVlIiwibmFtZSIsImlkIiwic2V0dXBPbmNlIiwiY2xpZW50IiwiY29yZSIsImdldEN1cnJlbnRIdWIiLCJnZXRDbGllbnQiLCJhZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsImV2ZW50IiwiaGludCIsInNlbGYiLCJnZXRJbnRlZ3JhdGlvbiIsIl9oYW5kbGVyIiwiZ2V0T3B0aW9ucyIsInN0YWNrUGFyc2VyIiwiX19pbml0U3RhdGljIiwicGFyc2VyIiwiZXhjZXB0aW9uIiwidmFsdWVzIiwidXRpbHMiLCJpc0luc3RhbmNlT2YiLCJvcmlnaW5hbEV4Y2VwdGlvbiIsIkVycm9yIiwibGlua2VkRXJyb3JzIiwiX3dhbGtFcnJvclRyZWUiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJlcnJvciIsInN0YWNrIiwiZXZlbnRidWlsZGVyIiwiZXhjZXB0aW9uRnJvbUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/linkederrors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/integrations/trycatch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/integrations/trycatch.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar DEFAULT_EVENT_TARGET = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nvar TryCatch = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** JSDoc */\n\n  /**\n   * @inheritDoc\n   */\n  function TryCatch(options) {\n    _classCallCheck(this, TryCatch);\n    TryCatch.prototype.__init.call(this);\n    this._options = _objectSpread({\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true\n    }, options);\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  _createClass(TryCatch, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = TryCatch.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (this._options.setTimeout) {\n        utils.fill(helpers.WINDOW, 'setTimeout', _wrapTimeFunction);\n      }\n      if (this._options.setInterval) {\n        utils.fill(helpers.WINDOW, 'setInterval', _wrapTimeFunction);\n      }\n      if (this._options.requestAnimationFrame) {\n        utils.fill(helpers.WINDOW, 'requestAnimationFrame', _wrapRAF);\n      }\n      if (this._options.XMLHttpRequest && 'XMLHttpRequest' in helpers.WINDOW) {\n        utils.fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n      var eventTargetOption = this._options.eventTarget;\n      if (eventTargetOption) {\n        var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(_wrapEventTarget);\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'TryCatch';\n    }\n  }]);\n  return TryCatch;\n}();\nTryCatch.__initStatic();\n\n/** JSDoc */\nfunction _wrapTimeFunction(original) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var originalCallback = args[0];\n    args[0] = helpers.wrap(originalCallback, {\n      mechanism: {\n        data: {\n          function: utils.getFunctionName(original)\n        },\n        handled: true,\n        type: 'instrument'\n      }\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (callback) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [helpers.wrap(callback, {\n      mechanism: {\n        data: {\n          function: 'requestAnimationFrame',\n          handler: utils.getFunctionName(original)\n        },\n        handled: true,\n        type: 'instrument'\n      }\n    })]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var xhr = this;\n    var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n    xmlHttpRequestProps.forEach(function (prop) {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        utils.fill(xhr, prop, function (original) {\n          var wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: utils.getFunctionName(original)\n              },\n              handled: true,\n              type: 'instrument'\n            }\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          var originalFunction = utils.getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = utils.getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return helpers.wrap(original, wrapOptions);\n        });\n      }\n    });\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var globalObject = helpers.WINDOW;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  var proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n  utils.fill(proto, 'addEventListener', function (original) {\n    return function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    eventName, fn, options) {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = helpers.wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: utils.getFunctionName(fn),\n                target: target\n              },\n              handled: true,\n              type: 'instrument'\n            }\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n      return original.apply(this, [eventName,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      helpers.wrap(fn, {\n        mechanism: {\n          data: {\n            function: 'addEventListener',\n            handler: utils.getFunctionName(fn),\n            target: target\n          },\n          handled: true,\n          type: 'instrument'\n        }\n      }), options]);\n    };\n  });\n  utils.fill(proto, 'removeEventListener', function (originalRemoveEventListener\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    eventName, fn, options) {\n      /**\n       * There are 2 possible scenarios here:\n       *\n       * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n       * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n       * as a pass-through, and call original `removeEventListener` with it.\n       *\n       * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n       * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n       * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n       * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n       * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n       *\n       * When someone adds a handler prior to initialization, and then do it again, but after,\n       * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n       * to get rid of the initial handler and it'd stick there forever.\n       */\n      var wrappedEventHandler = fn;\n      try {\n        var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n        if (originalEventHandler) {\n          originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n        }\n      } catch (e) {\n        // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n      }\n      return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n    };\n  });\n}\nexports.TryCatch = TryCatch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/integrations/trycatch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/profiling/cache.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/profiling/cache.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Creates a cache that evicts keys in fifo order\n * @param size {Number}\n */\nfunction makeProfilingCache(size) {\n  // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.\n  var evictionOrder = [];\n  var cache = {};\n  return {\n    add: function add(key, value) {\n      while (evictionOrder.length >= size) {\n        // shift is O(n) but this is small size and only happens if we are\n        // exceeding the cache size so it should be fine.\n        var evictCandidate = evictionOrder.shift();\n        if (evictCandidate !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete cache[evictCandidate];\n        }\n      }\n\n      // in case we have a collision, delete the old key.\n      if (cache[key]) {\n        this.delete(key);\n      }\n      evictionOrder.push(key);\n      cache[key] = value;\n    },\n    clear: function clear() {\n      cache = {};\n      evictionOrder = [];\n    },\n    get: function get(key) {\n      return cache[key];\n    },\n    size: function size() {\n      return evictionOrder.length;\n    },\n    // Delete cache key and return true if it existed, false otherwise.\n    delete: function _delete(key) {\n      if (!cache[key]) {\n        return false;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete cache[key];\n      for (var i = 0; i < evictionOrder.length; i++) {\n        if (evictionOrder[i] === key) {\n          evictionOrder.splice(i, 1);\n          break;\n        }\n      }\n      return true;\n    }\n  };\n}\nvar PROFILING_EVENT_CACHE = makeProfilingCache(20);\nexports.PROFILING_EVENT_CACHE = PROFILING_EVENT_CACHE;\nexports.makeProfilingCache = makeProfilingCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9wcm9maWxpbmcvY2FjaGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLG1CQUNBQyxJQUFBLEVBT0E7RUFDQTtFQUNBLElBQUFDLGFBQUE7RUFDQSxJQUFBQyxLQUFBO0VBRUE7SUFDQUMsR0FBQSxXQUFBQSxJQUFBQyxHQUFBLEVBQUFDLEtBQUE7TUFDQSxPQUFBSixhQUFBLENBQUFLLE1BQUEsSUFBQU4sSUFBQTtRQUNBO1FBQ0E7UUFDQSxJQUFBTyxjQUFBLEdBQUFOLGFBQUEsQ0FBQU8sS0FBQTtRQUVBLElBQUFELGNBQUEsS0FBQUUsU0FBQTtVQUNBO1VBQ0EsT0FBQVAsS0FBQSxDQUFBSyxjQUFBO1FBQ0E7TUFDQTs7TUFFQTtNQUNBLElBQUFMLEtBQUEsQ0FBQUUsR0FBQTtRQUNBLEtBQUFNLE1BQUEsQ0FBQU4sR0FBQTtNQUNBO01BRUFILGFBQUEsQ0FBQVUsSUFBQSxDQUFBUCxHQUFBO01BQ0FGLEtBQUEsQ0FBQUUsR0FBQSxJQUFBQyxLQUFBO0lBQ0E7SUFDQU8sS0FBQSxXQUFBQSxNQUFBO01BQ0FWLEtBQUE7TUFDQUQsYUFBQTtJQUNBO0lBQ0FZLEdBQUEsV0FBQUEsSUFBQVQsR0FBQTtNQUNBLE9BQUFGLEtBQUEsQ0FBQUUsR0FBQTtJQUNBO0lBQ0FKLElBQUEsV0FBQUEsS0FBQTtNQUNBLE9BQUFDLGFBQUEsQ0FBQUssTUFBQTtJQUNBO0lBQ0E7SUFDQUksTUFBQSxXQUFBSSxRQUFBVixHQUFBO01BQ0EsS0FBQUYsS0FBQSxDQUFBRSxHQUFBO1FBQ0E7TUFDQTs7TUFFQTtNQUNBLE9BQUFGLEtBQUEsQ0FBQUUsR0FBQTtNQUVBLFNBQUFXLENBQUEsTUFBQUEsQ0FBQSxHQUFBZCxhQUFBLENBQUFLLE1BQUEsRUFBQVMsQ0FBQTtRQUNBLElBQUFkLGFBQUEsQ0FBQWMsQ0FBQSxNQUFBWCxHQUFBO1VBQ0FILGFBQUEsQ0FBQWUsTUFBQSxDQUFBRCxDQUFBO1VBQ0E7UUFDQTtNQUNBO01BRUE7SUFDQTtFQUNBO0FBQ0E7QUFFQSxJQUFBRSxxQkFBQSxHQUFBbEIsa0JBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi9zcmMvcHJvZmlsaW5nL2NhY2hlLnRzPzY3YmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFdmVudCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjYWNoZSB0aGF0IGV2aWN0cyBrZXlzIGluIGZpZm8gb3JkZXJcbiAqIEBwYXJhbSBzaXplIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUHJvZmlsaW5nQ2FjaGU8S2V5IGV4dGVuZHMgc3RyaW5nLCBWYWx1ZSBleHRlbmRzIEV2ZW50PihcbiAgc2l6ZTogbnVtYmVyLFxuKToge1xuICBnZXQ6IChrZXk6IEtleSkgPT4gVmFsdWUgfCB1bmRlZmluZWQ7XG4gIGFkZDogKGtleTogS2V5LCB2YWx1ZTogVmFsdWUpID0+IHZvaWQ7XG4gIGRlbGV0ZTogKGtleTogS2V5KSA9PiBib29sZWFuO1xuICBjbGVhcjogKCkgPT4gdm9pZDtcbiAgc2l6ZTogKCkgPT4gbnVtYmVyO1xufSB7XG4gIC8vIE1haW50YWluIGEgZmlmbyBxdWV1ZSBvZiBrZXlzLCB3ZSBjYW5ub3QgcmVseSBvbiBPYmplY3Qua2V5cyBhcyB0aGUgYnJvd3NlciBtYXkgbm90IHN1cHBvcnQgaXQuXG4gIGxldCBldmljdGlvbk9yZGVyOiBLZXlbXSA9IFtdO1xuICBsZXQgY2FjaGU6IFJlY29yZDxzdHJpbmcsIFZhbHVlPiA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkKGtleTogS2V5LCB2YWx1ZTogVmFsdWUpIHtcbiAgICAgIHdoaWxlIChldmljdGlvbk9yZGVyLmxlbmd0aCA+PSBzaXplKSB7XG4gICAgICAgIC8vIHNoaWZ0IGlzIE8obikgYnV0IHRoaXMgaXMgc21hbGwgc2l6ZSBhbmQgb25seSBoYXBwZW5zIGlmIHdlIGFyZVxuICAgICAgICAvLyBleGNlZWRpbmcgdGhlIGNhY2hlIHNpemUgc28gaXQgc2hvdWxkIGJlIGZpbmUuXG4gICAgICAgIGNvbnN0IGV2aWN0Q2FuZGlkYXRlID0gZXZpY3Rpb25PcmRlci5zaGlmdCgpO1xuXG4gICAgICAgIGlmIChldmljdENhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgIGRlbGV0ZSBjYWNoZVtldmljdENhbmRpZGF0ZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaW4gY2FzZSB3ZSBoYXZlIGEgY29sbGlzaW9uLCBkZWxldGUgdGhlIG9sZCBrZXkuXG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICBldmljdGlvbk9yZGVyLnB1c2goa2V5KTtcbiAgICAgIGNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgY2FjaGUgPSB7fTtcbiAgICAgIGV2aWN0aW9uT3JkZXIgPSBbXTtcbiAgICB9LFxuICAgIGdldChrZXk6IEtleSk6IFZhbHVlIHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiBjYWNoZVtrZXldO1xuICAgIH0sXG4gICAgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBldmljdGlvbk9yZGVyLmxlbmd0aDtcbiAgICB9LFxuICAgIC8vIERlbGV0ZSBjYWNoZSBrZXkgYW5kIHJldHVybiB0cnVlIGlmIGl0IGV4aXN0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICBkZWxldGUoa2V5OiBLZXkpOiBib29sZWFuIHtcbiAgICAgIGlmICghY2FjaGVba2V5XSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgIGRlbGV0ZSBjYWNoZVtrZXldO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2aWN0aW9uT3JkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGV2aWN0aW9uT3JkZXJbaV0gPT09IGtleSkge1xuICAgICAgICAgIGV2aWN0aW9uT3JkZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBQUk9GSUxJTkdfRVZFTlRfQ0FDSEUgPSBtYWtlUHJvZmlsaW5nQ2FjaGU8c3RyaW5nLCBFdmVudD4oMjApO1xuIl0sIm5hbWVzIjpbIm1ha2VQcm9maWxpbmdDYWNoZSIsInNpemUiLCJldmljdGlvbk9yZGVyIiwiY2FjaGUiLCJhZGQiLCJrZXkiLCJ2YWx1ZSIsImxlbmd0aCIsImV2aWN0Q2FuZGlkYXRlIiwic2hpZnQiLCJ1bmRlZmluZWQiLCJkZWxldGUiLCJwdXNoIiwiY2xlYXIiLCJnZXQiLCJfZGVsZXRlIiwiaSIsInNwbGljZSIsIlBST0ZJTElOR19FVkVOVF9DQUNIRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/profiling/cache.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/profiling/hubextensions.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/profiling/hubextensions.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar sendProfile = __webpack_require__(/*! ./sendProfile.js */ \"./node_modules/@sentry/browser/cjs/profiling/sendProfile.js\");\n\n// Max profile duration.\nvar MAX_PROFILE_DURATION_MS = 30000;\n// Keep a flag value to avoid re-initializing the profiler constructor. If it fails\n// once, it will always fail and this allows us to early return.\nvar PROFILING_CONSTRUCTOR_FAILED = false;\n\n// While we experiment, per transaction sampling interval will be more flexible to work with.\n\n/**\n * Check if profiler constructor is available.\n * @param maybeProfiler\n */\nfunction isJSProfilerSupported(maybeProfiler) {\n  return typeof maybeProfiler === 'function';\n}\n\n/**\n * Safety wrapper for startTransaction for the unlikely case that transaction starts before tracing is imported -\n * if that happens we want to avoid throwing an error from profiling code.\n * see https://github.com/getsentry/sentry-javascript/issues/4731.\n *\n * @experimental\n */\nfunction onProfilingStartRouteTransaction(transaction) {\n  if (!transaction) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Transaction is undefined, skipping profiling');\n    }\n    return transaction;\n  }\n  return wrapTransactionWithProfiling(transaction);\n}\n\n/**\n * Wraps startTransaction and stopTransaction with profiling related logic.\n * startProfiling is called after the call to startTransaction in order to avoid our own code from\n * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.\n */\nfunction wrapTransactionWithProfiling(transaction) {\n  // Feature support check first\n  var JSProfilerConstructor = helpers.WINDOW.Profiler;\n  if (!isJSProfilerSupported(JSProfilerConstructor)) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Profiling is not supported by this browser, Profiler interface missing on window object.');\n    }\n    return transaction;\n  }\n\n  // profilesSampleRate is multiplied with tracesSampleRate to get the final sampling rate.\n  if (!transaction.sampled) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Transaction is not sampled, skipping profiling');\n    }\n    return transaction;\n  }\n\n  // If constructor failed once, it will always fail, so we can early return.\n  if (PROFILING_CONSTRUCTOR_FAILED) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Profiling has been disabled for the duration of the current user session.');\n    }\n    return transaction;\n  }\n  var client = core.getCurrentHub().getClient();\n  var options = client && client.getOptions();\n\n  // @ts-ignore not part of the browser options yet\n  var profilesSampleRate = options && options.profilesSampleRate || 0;\n  if (profilesSampleRate === undefined) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Profiling disabled, enable it by setting `profilesSampleRate` option to SDK init call.');\n    }\n    return transaction;\n  }\n\n  // Check if we should sample this profile\n  if (Math.random() > profilesSampleRate) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Skip profiling transaction due to sampling.');\n    }\n    return transaction;\n  }\n\n  // From initial testing, it seems that the minimum value for sampleInterval is 10ms.\n  var samplingIntervalMS = 10;\n  // Start the profiler\n  var maxSamples = Math.floor(MAX_PROFILE_DURATION_MS / samplingIntervalMS);\n  var profiler;\n\n  // Attempt to initialize the profiler constructor, if it fails, we disable profiling for the current user session.\n  // This is likely due to a missing 'Document-Policy': 'js-profiling' header. We do not want to throw an error if this happens\n  // as we risk breaking the user's application, so just disable profiling and log an error.\n  try {\n    profiler = new JSProfilerConstructor({\n      sampleInterval: samplingIntervalMS,\n      maxBufferSize: maxSamples\n    });\n  } catch (e) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log(\"[Profiling] Failed to initialize the Profiling constructor, this is likely due to a missing 'Document-Policy': 'js-profiling' header.\");\n      utils.logger.log('[Profiling] Disabling profiling for current user session.');\n    }\n    PROFILING_CONSTRUCTOR_FAILED = true;\n  }\n\n  // We failed to construct the profiler, fallback to original transaction - there is no need to log\n  // anything as we already did that in the try/catch block.\n  if (!profiler) {\n    return transaction;\n  }\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    utils.logger.log(\"[Profiling] started profiling transaction: \".concat(transaction.name || transaction.description));\n  }\n\n  // We create \"unique\" transaction names to avoid concurrent transactions with same names\n  // from being ignored by the profiler. From here on, only this transaction name should be used when\n  // calling the profiler methods. Note: we log the original name to the user to avoid confusion.\n  var profileId = utils.uuid4();\n\n  // A couple of important things to note here:\n  // `CpuProfilerBindings.stopProfiling` will be scheduled to run in 30seconds in order to exceed max profile duration.\n  // Whichever of the two (transaction.finish/timeout) is first to run, the profiling will be stopped and the gathered profile\n  // will be processed when the original transaction is finished. Since onProfileHandler can be invoked multiple times in the\n  // event of an error or user mistake (calling transaction.finish multiple times), it is important that the behavior of onProfileHandler\n  // is idempotent as we do not want any timings or profiles to be overriden by the last call to onProfileHandler.\n  // After the original finish method is called, the event will be reported through the integration and delegated to transport.\n  var processedProfile = null;\n\n  /**\n   * Idempotent handler for profile stop\n   */\n  function onProfileHandler() {\n    // Check if the profile exists and return it the behavior has to be idempotent as users may call transaction.finish multiple times.\n    if (!transaction) {\n      return;\n    }\n    // Satisfy the type checker, but profiler will always be defined here.\n    if (!profiler) {\n      return;\n    }\n    if (processedProfile) {\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        utils.logger.log('[Profiling] profile for:', transaction.name || transaction.description, 'already exists, returning early');\n      }\n      return;\n    }\n    profiler.stop().then(function (p) {\n      if (maxDurationTimeoutID) {\n        helpers.WINDOW.clearTimeout(maxDurationTimeoutID);\n        maxDurationTimeoutID = undefined;\n      }\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        utils.logger.log(\"[Profiling] stopped profiling of transaction: \".concat(transaction.name || transaction.description));\n      }\n\n      // In case of an overlapping transaction, stopProfiling may return null and silently ignore the overlapping profile.\n      if (!p) {\n        if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n          utils.logger.log(\"[Profiling] profiler returned null profile for: \".concat(transaction.name || transaction.description), 'this may indicate an overlapping transaction or a call to stopProfiling with a profile title that was never started');\n        }\n        return;\n      }\n\n      // If a profile has less than 2 samples, it is not useful and should be discarded.\n      if (p.samples.length < 2) {\n        return;\n      }\n      processedProfile = _objectSpread(_objectSpread({}, p), {}, {\n        profile_id: profileId\n      });\n      sendProfile.sendProfile(profileId, processedProfile);\n    }).catch(function (error) {\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        utils.logger.log('[Profiling] error while stopping profiler:', error);\n      }\n      return null;\n    });\n  }\n\n  // Enqueue a timeout to prevent profiles from running over max duration.\n  var maxDurationTimeoutID = helpers.WINDOW.setTimeout(function () {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] max profile duration elapsed, stopping profiling for:', transaction.name || transaction.description);\n    }\n    void onProfileHandler();\n  }, MAX_PROFILE_DURATION_MS);\n\n  // We need to reference the original finish call to avoid creating an infinite loop\n  var originalFinish = transaction.finish.bind(transaction);\n\n  /**\n   * Wraps startTransaction and stopTransaction with profiling related logic.\n   * startProfiling is called after the call to startTransaction in order to avoid our own code from\n   * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.\n   */\n  function profilingWrappedTransactionFinish() {\n    if (!transaction) {\n      return originalFinish();\n    }\n    // onProfileHandler should always return the same profile even if this is called multiple times.\n    // Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.\n    onProfileHandler();\n\n    // Set profile context\n    transaction.setContext('profile', {\n      profile_id: profileId\n    });\n    return originalFinish();\n  }\n  transaction.finish = profilingWrappedTransactionFinish;\n  return transaction;\n}\n\n/**\n * Wraps startTransaction with profiling logic. This is done automatically by the profiling integration.\n */\nfunction __PRIVATE__wrapStartTransactionWithProfiling(startTransaction) {\n  return function wrappedStartTransaction(transactionContext, customSamplingContext) {\n    var transaction = startTransaction.call(this, transactionContext, customSamplingContext);\n    if (transaction === undefined) {\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        utils.logger.log('[Profiling] Transaction is undefined, skipping profiling');\n      }\n      return transaction;\n    }\n    return wrapTransactionWithProfiling(transaction);\n  };\n}\n\n/**\n * Patches startTransaction and stopTransaction with profiling logic.\n */\nfunction addProfilingExtensionMethods() {\n  var carrier = core.getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log(\"[Profiling] Can't find main carrier, profiling won't work.\");\n    }\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions['startTransaction']) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] startTransaction does not exists, profiling will not work. Make sure you import @sentry/tracing package before @sentry/profiling-node as import order matters.');\n    }\n    return;\n  }\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    utils.logger.log('[Profiling] startTransaction exists, patching it with profiling functionality...');\n  }\n  carrier.__SENTRY__.extensions['startTransaction'] = __PRIVATE__wrapStartTransactionWithProfiling(\n  // This is already patched by sentry/tracing, we are going to re-patch it...\n  carrier.__SENTRY__.extensions['startTransaction']);\n}\nexports.addProfilingExtensionMethods = addProfilingExtensionMethods;\nexports.onProfilingStartRouteTransaction = onProfilingStartRouteTransaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9wcm9maWxpbmcvaHViZXh0ZW5zaW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBLElBQUFBLHVCQUFBO0FBQ0E7QUFDQTtBQUNBLElBQUFDLDRCQUFBOztBQUVBOztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUMsc0JBQUFDLGFBQUE7RUFDQSxjQUFBQSxhQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxpQ0FBQUMsV0FBQTtFQUNBLEtBQUFBLFdBQUE7SUFDQSxXQUFBQyxnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUE7SUFDQTtJQUNBLE9BQUFKLFdBQUE7RUFDQTtFQUVBLE9BQUFLLDRCQUFBLENBQUFMLFdBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUssNkJBQUFMLFdBQUE7RUFDQTtFQUNBLElBQUFNLHFCQUFBLEdBQUFDLE9BQUEsQ0FBQUMsTUFBQSxDQUFBQyxRQUFBO0VBRUEsS0FBQVoscUJBQUEsQ0FBQVMscUJBQUE7SUFDQSxXQUFBTCxnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsQ0FDQSxzR0FDQTtJQUNBO0lBQ0EsT0FBQUosV0FBQTtFQUNBOztFQUVBO0VBQ0EsS0FBQUEsV0FBQSxDQUFBVSxPQUFBO0lBQ0EsV0FBQVQsZ0JBQUEsb0JBQUFBLGdCQUFBO01BQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO0lBQ0E7SUFDQSxPQUFBSixXQUFBO0VBQ0E7O0VBRUE7RUFDQSxJQUFBSiw0QkFBQTtJQUNBLFdBQUFLLGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtJQUNBO0lBQ0EsT0FBQUosV0FBQTtFQUNBO0VBRUEsSUFBQVcsTUFBQSxHQUFBQyxJQUFBLENBQUFDLGFBQUEsR0FBQUMsU0FBQTtFQUNBLElBQUFDLE9BQUEsR0FBQUosTUFBQSxJQUFBQSxNQUFBLENBQUFLLFVBQUE7O0VBRUE7RUFDQSxJQUFBQyxrQkFBQSxHQUFBRixPQUFBLElBQUFBLE9BQUEsQ0FBQUUsa0JBQUE7RUFDQSxJQUFBQSxrQkFBQSxLQUFBQyxTQUFBO0lBQ0EsV0FBQWpCLGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtJQUNBO0lBQ0EsT0FBQUosV0FBQTtFQUNBOztFQUVBO0VBQ0EsSUFBQW1CLElBQUEsQ0FBQUMsTUFBQSxLQUFBSCxrQkFBQTtJQUNBLFdBQUFoQixnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUE7SUFDQTtJQUNBLE9BQUFKLFdBQUE7RUFDQTs7RUFFQTtFQUNBLElBQUFxQixrQkFBQTtFQUNBO0VBQ0EsSUFBQUMsVUFBQSxHQUFBSCxJQUFBLENBQUFJLEtBQUEsQ0FBQTVCLHVCQUFBLEdBQUEwQixrQkFBQTtFQUNBLElBQUFHLFFBQUE7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7SUFDQUEsUUFBQSxPQUFBbEIscUJBQUE7TUFBQW1CLGNBQUEsRUFBQUosa0JBQUE7TUFBQUssYUFBQSxFQUFBSjtJQUFBO0VBQ0EsU0FBQUssQ0FBQTtJQUNBLFdBQUExQixnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsQ0FDQSx1SUFDQTtNQUNBRixLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtJQUNBO0lBQ0FSLDRCQUFBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBLEtBQUE0QixRQUFBO0lBQ0EsT0FBQXhCLFdBQUE7RUFDQTtFQUVBLFdBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQTtJQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQSwrQ0FBQXdCLE1BQUEsQ0FBQTVCLFdBQUEsQ0FBQTZCLElBQUEsSUFBQTdCLFdBQUEsQ0FBQThCLFdBQUE7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQSxJQUFBQyxTQUFBLEdBQUE3QixLQUFBLENBQUE4QixLQUFBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBQUMsZ0JBQUE7O0VBRUE7QUFDQTtBQUNBO0VBQ0EsU0FBQUMsaUJBQUE7SUFDQTtJQUNBLEtBQUFsQyxXQUFBO01BQ0E7SUFDQTtJQUNBO0lBQ0EsS0FBQXdCLFFBQUE7TUFDQTtJQUNBO0lBQ0EsSUFBQVMsZ0JBQUE7TUFDQSxXQUFBaEMsZ0JBQUEsb0JBQUFBLGdCQUFBO1FBQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBLENBQ0EsNEJBQ0FKLFdBQUEsQ0FBQTZCLElBQUEsSUFBQTdCLFdBQUEsQ0FBQThCLFdBQUEsRUFDQSxpQ0FDQTtNQUNBO01BQ0E7SUFDQTtJQUVBTixRQUFBLENBQ0FXLElBQUEsR0FDQUMsSUFBQSxXQUFBQyxDQUFBO01BQ0EsSUFBQUMsb0JBQUE7UUFDQS9CLE9BQUEsQ0FBQUMsTUFBQSxDQUFBK0IsWUFBQSxDQUFBRCxvQkFBQTtRQUNBQSxvQkFBQSxHQUFBcEIsU0FBQTtNQUNBO01BRUEsV0FBQWpCLGdCQUFBLG9CQUFBQSxnQkFBQTtRQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQSxrREFBQXdCLE1BQUEsQ0FBQTVCLFdBQUEsQ0FBQTZCLElBQUEsSUFBQTdCLFdBQUEsQ0FBQThCLFdBQUE7TUFDQTs7TUFFQTtNQUNBLEtBQUFPLENBQUE7UUFDQSxXQUFBcEMsZ0JBQUEsb0JBQUFBLGdCQUFBO1VBQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBLG9EQUFBd0IsTUFBQSxDQUNBNUIsV0FBQSxDQUFBNkIsSUFBQSxJQUFBN0IsV0FBQSxDQUFBOEIsV0FBQSxHQUNBLHFIQUNBO1FBQ0E7UUFDQTtNQUNBOztNQUVBO01BQ0EsSUFBQU8sQ0FBQSxDQUFBRyxPQUFBLENBQUFDLE1BQUE7UUFDQTtNQUNBO01BRUFSLGdCQUFBLEdBQUFTLGFBQUEsQ0FBQUEsYUFBQSxLQUFBTCxDQUFBO1FBQUFNLFVBQUEsRUFBQVo7TUFBQTtNQUNBYSxXQUFBLENBQUFBLFdBQUEsQ0FBQWIsU0FBQSxFQUFBRSxnQkFBQTtJQUNBLEdBQ0FZLEtBQUEsV0FBQUMsS0FBQTtNQUNBLFdBQUE3QyxnQkFBQSxvQkFBQUEsZ0JBQUE7UUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsK0NBQUEwQyxLQUFBO01BQ0E7TUFDQTtJQUNBO0VBQ0E7O0VBRUE7RUFDQSxJQUFBUixvQkFBQSxHQUFBL0IsT0FBQSxDQUFBQyxNQUFBLENBQUF1QyxVQUFBO0lBQ0EsV0FBQTlDLGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQSxDQUNBLHFFQUNBSixXQUFBLENBQUE2QixJQUFBLElBQUE3QixXQUFBLENBQUE4QixXQUNBO0lBQ0E7SUFDQSxLQUFBSSxnQkFBQTtFQUNBLEdBQUF2Qyx1QkFBQTs7RUFFQTtFQUNBLElBQUFxRCxjQUFBLEdBQUFoRCxXQUFBLENBQUFpRCxNQUFBLENBQUFDLElBQUEsQ0FBQWxELFdBQUE7O0VBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNBLFNBQUFtRCxrQ0FBQTtJQUNBLEtBQUFuRCxXQUFBO01BQ0EsT0FBQWdELGNBQUE7SUFDQTtJQUNBO0lBQ0E7SUFDQWQsZ0JBQUE7O0lBRUE7SUFDQWxDLFdBQUEsQ0FBQW9ELFVBQUE7TUFBQVQsVUFBQSxFQUFBWjtJQUFBO0lBRUEsT0FBQWlCLGNBQUE7RUFDQTtFQUVBaEQsV0FBQSxDQUFBaUQsTUFBQSxHQUFBRSxpQ0FBQTtFQUNBLE9BQUFuRCxXQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQXFELDZDQUFBQyxnQkFBQTtFQUNBLGdCQUFBQyx3QkFFQUMsa0JBQUEsRUFDQUMscUJBQUEsRUFDQTtJQUNBLElBQUF6RCxXQUFBLEdBQUFzRCxnQkFBQSxDQUFBSSxJQUFBLE9BQUFGLGtCQUFBLEVBQUFDLHFCQUFBO0lBQ0EsSUFBQXpELFdBQUEsS0FBQWtCLFNBQUE7TUFDQSxXQUFBakIsZ0JBQUEsb0JBQUFBLGdCQUFBO1FBQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO01BQ0E7TUFDQSxPQUFBSixXQUFBO0lBQ0E7SUFFQSxPQUFBSyw0QkFBQSxDQUFBTCxXQUFBO0VBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFBMkQsNkJBQUE7RUFDQSxJQUFBQyxPQUFBLEdBQUFoRCxJQUFBLENBQUFpRCxjQUFBO0VBQ0EsS0FBQUQsT0FBQSxDQUFBRSxVQUFBO0lBQ0EsV0FBQTdELGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtJQUNBO0lBQ0E7RUFDQTtFQUNBd0QsT0FBQSxDQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUgsT0FBQSxDQUFBRSxVQUFBLENBQUFDLFVBQUE7RUFFQSxLQUFBSCxPQUFBLENBQUFFLFVBQUEsQ0FBQUMsVUFBQTtJQUNBLFdBQUE5RCxnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsQ0FDQSw0S0FDQTtJQUNBO0lBQ0E7RUFDQTtFQUVBLFdBQUFILGdCQUFBLG9CQUFBQSxnQkFBQTtJQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtFQUNBO0VBRUF3RCxPQUFBLENBQUFFLFVBQUEsQ0FBQUMsVUFBQSx1QkFBQVYsNENBQUE7RUFDQTtFQUNBTyxPQUFBLENBQUFFLFVBQUEsQ0FBQUMsVUFBQSxvQkFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL3Byb2ZpbGluZy9odWJleHRlbnNpb25zLnRzPzE3Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiwgZ2V0TWFpbkNhcnJpZXIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBDdXN0b21TYW1wbGluZ0NvbnRleHQsIEh1YiwgVHJhbnNhY3Rpb24sIFRyYW5zYWN0aW9uQ29udGV4dCB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyLCB1dWlkNCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5pbXBvcnQgeyBXSU5ET1cgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB0eXBlIHtcbiAgSlNTZWxmUHJvZmlsZSxcbiAgSlNTZWxmUHJvZmlsZXIsXG4gIEpTU2VsZlByb2ZpbGVyQ29uc3RydWN0b3IsXG4gIFByb2Nlc3NlZEpTU2VsZlByb2ZpbGUsXG59IGZyb20gJy4vanNTZWxmUHJvZmlsaW5nJztcbmltcG9ydCB7IHNlbmRQcm9maWxlIH0gZnJvbSAnLi9zZW5kUHJvZmlsZSc7XG5cbi8vIE1heCBwcm9maWxlIGR1cmF0aW9uLlxuY29uc3QgTUFYX1BST0ZJTEVfRFVSQVRJT05fTVMgPSAzMF8wMDA7XG4vLyBLZWVwIGEgZmxhZyB2YWx1ZSB0byBhdm9pZCByZS1pbml0aWFsaXppbmcgdGhlIHByb2ZpbGVyIGNvbnN0cnVjdG9yLiBJZiBpdCBmYWlsc1xuLy8gb25jZSwgaXQgd2lsbCBhbHdheXMgZmFpbCBhbmQgdGhpcyBhbGxvd3MgdXMgdG8gZWFybHkgcmV0dXJuLlxubGV0IFBST0ZJTElOR19DT05TVFJVQ1RPUl9GQUlMRUQgPSBmYWxzZTtcblxuLy8gV2hpbGUgd2UgZXhwZXJpbWVudCwgcGVyIHRyYW5zYWN0aW9uIHNhbXBsaW5nIGludGVydmFsIHdpbGwgYmUgbW9yZSBmbGV4aWJsZSB0byB3b3JrIHdpdGguXG50eXBlIFN0YXJ0VHJhbnNhY3Rpb24gPSAoXG4gIHRoaXM6IEh1YixcbiAgdHJhbnNhY3Rpb25Db250ZXh0OiBUcmFuc2FjdGlvbkNvbnRleHQsXG4gIGN1c3RvbVNhbXBsaW5nQ29udGV4dD86IEN1c3RvbVNhbXBsaW5nQ29udGV4dCxcbikgPT4gVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2sgaWYgcHJvZmlsZXIgY29uc3RydWN0b3IgaXMgYXZhaWxhYmxlLlxuICogQHBhcmFtIG1heWJlUHJvZmlsZXJcbiAqL1xuZnVuY3Rpb24gaXNKU1Byb2ZpbGVyU3VwcG9ydGVkKG1heWJlUHJvZmlsZXI6IHVua25vd24pOiBtYXliZVByb2ZpbGVyIGlzIHR5cGVvZiBKU1NlbGZQcm9maWxlckNvbnN0cnVjdG9yIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZVByb2ZpbGVyID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIFNhZmV0eSB3cmFwcGVyIGZvciBzdGFydFRyYW5zYWN0aW9uIGZvciB0aGUgdW5saWtlbHkgY2FzZSB0aGF0IHRyYW5zYWN0aW9uIHN0YXJ0cyBiZWZvcmUgdHJhY2luZyBpcyBpbXBvcnRlZCAtXG4gKiBpZiB0aGF0IGhhcHBlbnMgd2Ugd2FudCB0byBhdm9pZCB0aHJvd2luZyBhbiBlcnJvciBmcm9tIHByb2ZpbGluZyBjb2RlLlxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzQ3MzEuXG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gb25Qcm9maWxpbmdTdGFydFJvdXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uIHwgdW5kZWZpbmVkKTogVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQge1xuICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgbG9nZ2VyLmxvZygnW1Byb2ZpbGluZ10gVHJhbnNhY3Rpb24gaXMgdW5kZWZpbmVkLCBza2lwcGluZyBwcm9maWxpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHdyYXBUcmFuc2FjdGlvbldpdGhQcm9maWxpbmcodHJhbnNhY3Rpb24pO1xufVxuXG4vKipcbiAqIFdyYXBzIHN0YXJ0VHJhbnNhY3Rpb24gYW5kIHN0b3BUcmFuc2FjdGlvbiB3aXRoIHByb2ZpbGluZyByZWxhdGVkIGxvZ2ljLlxuICogc3RhcnRQcm9maWxpbmcgaXMgY2FsbGVkIGFmdGVyIHRoZSBjYWxsIHRvIHN0YXJ0VHJhbnNhY3Rpb24gaW4gb3JkZXIgdG8gYXZvaWQgb3VyIG93biBjb2RlIGZyb21cbiAqIGJlaW5nIHByb2ZpbGVkLiBCZWNhdXNlIG9mIHRoYXQgc2FtZSByZWFzb24sIHN0b3BQcm9maWxpbmcgaXMgY2FsbGVkIGJlZm9yZSB0aGUgY2FsbCB0byBzdG9wVHJhbnNhY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHdyYXBUcmFuc2FjdGlvbldpdGhQcm9maWxpbmcodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogVHJhbnNhY3Rpb24ge1xuICAvLyBGZWF0dXJlIHN1cHBvcnQgY2hlY2sgZmlyc3RcbiAgY29uc3QgSlNQcm9maWxlckNvbnN0cnVjdG9yID0gV0lORE9XLlByb2ZpbGVyO1xuXG4gIGlmICghaXNKU1Byb2ZpbGVyU3VwcG9ydGVkKEpTUHJvZmlsZXJDb25zdHJ1Y3RvcikpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIubG9nKFxuICAgICAgICAnW1Byb2ZpbGluZ10gUHJvZmlsaW5nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLCBQcm9maWxlciBpbnRlcmZhY2UgbWlzc2luZyBvbiB3aW5kb3cgb2JqZWN0LicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gIH1cblxuICAvLyBwcm9maWxlc1NhbXBsZVJhdGUgaXMgbXVsdGlwbGllZCB3aXRoIHRyYWNlc1NhbXBsZVJhdGUgdG8gZ2V0IHRoZSBmaW5hbCBzYW1wbGluZyByYXRlLlxuICBpZiAoIXRyYW5zYWN0aW9uLnNhbXBsZWQpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIubG9nKCdbUHJvZmlsaW5nXSBUcmFuc2FjdGlvbiBpcyBub3Qgc2FtcGxlZCwgc2tpcHBpbmcgcHJvZmlsaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGZhaWxlZCBvbmNlLCBpdCB3aWxsIGFsd2F5cyBmYWlsLCBzbyB3ZSBjYW4gZWFybHkgcmV0dXJuLlxuICBpZiAoUFJPRklMSU5HX0NPTlNUUlVDVE9SX0ZBSUxFRCkge1xuICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgIGxvZ2dlci5sb2coJ1tQcm9maWxpbmddIFByb2ZpbGluZyBoYXMgYmVlbiBkaXNhYmxlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBjdXJyZW50IHVzZXIgc2Vzc2lvbi4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gZ2V0Q3VycmVudEh1YigpLmdldENsaWVudCgpO1xuICBjb25zdCBvcHRpb25zID0gY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgLy8gQHRzLWlnbm9yZSBub3QgcGFydCBvZiB0aGUgYnJvd3NlciBvcHRpb25zIHlldFxuICBjb25zdCBwcm9maWxlc1NhbXBsZVJhdGUgPSAob3B0aW9ucyAmJiBvcHRpb25zLnByb2ZpbGVzU2FtcGxlUmF0ZSkgfHwgMDtcbiAgaWYgKHByb2ZpbGVzU2FtcGxlUmF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgbG9nZ2VyLmxvZygnW1Byb2ZpbGluZ10gUHJvZmlsaW5nIGRpc2FibGVkLCBlbmFibGUgaXQgYnkgc2V0dGluZyBgcHJvZmlsZXNTYW1wbGVSYXRlYCBvcHRpb24gdG8gU0RLIGluaXQgY2FsbC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIHNhbXBsZSB0aGlzIHByb2ZpbGVcbiAgaWYgKE1hdGgucmFuZG9tKCkgPiBwcm9maWxlc1NhbXBsZVJhdGUpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIubG9nKCdbUHJvZmlsaW5nXSBTa2lwIHByb2ZpbGluZyB0cmFuc2FjdGlvbiBkdWUgdG8gc2FtcGxpbmcuJyk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8vIEZyb20gaW5pdGlhbCB0ZXN0aW5nLCBpdCBzZWVtcyB0aGF0IHRoZSBtaW5pbXVtIHZhbHVlIGZvciBzYW1wbGVJbnRlcnZhbCBpcyAxMG1zLlxuICBjb25zdCBzYW1wbGluZ0ludGVydmFsTVMgPSAxMDtcbiAgLy8gU3RhcnQgdGhlIHByb2ZpbGVyXG4gIGNvbnN0IG1heFNhbXBsZXMgPSBNYXRoLmZsb29yKE1BWF9QUk9GSUxFX0RVUkFUSU9OX01TIC8gc2FtcGxpbmdJbnRlcnZhbE1TKTtcbiAgbGV0IHByb2ZpbGVyOiBKU1NlbGZQcm9maWxlciB8IHVuZGVmaW5lZDtcblxuICAvLyBBdHRlbXB0IHRvIGluaXRpYWxpemUgdGhlIHByb2ZpbGVyIGNvbnN0cnVjdG9yLCBpZiBpdCBmYWlscywgd2UgZGlzYWJsZSBwcm9maWxpbmcgZm9yIHRoZSBjdXJyZW50IHVzZXIgc2Vzc2lvbi5cbiAgLy8gVGhpcyBpcyBsaWtlbHkgZHVlIHRvIGEgbWlzc2luZyAnRG9jdW1lbnQtUG9saWN5JzogJ2pzLXByb2ZpbGluZycgaGVhZGVyLiBXZSBkbyBub3Qgd2FudCB0byB0aHJvdyBhbiBlcnJvciBpZiB0aGlzIGhhcHBlbnNcbiAgLy8gYXMgd2UgcmlzayBicmVha2luZyB0aGUgdXNlcidzIGFwcGxpY2F0aW9uLCBzbyBqdXN0IGRpc2FibGUgcHJvZmlsaW5nIGFuZCBsb2cgYW4gZXJyb3IuXG4gIHRyeSB7XG4gICAgcHJvZmlsZXIgPSBuZXcgSlNQcm9maWxlckNvbnN0cnVjdG9yKHsgc2FtcGxlSW50ZXJ2YWw6IHNhbXBsaW5nSW50ZXJ2YWxNUywgbWF4QnVmZmVyU2l6ZTogbWF4U2FtcGxlcyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgIFwiW1Byb2ZpbGluZ10gRmFpbGVkIHRvIGluaXRpYWxpemUgdGhlIFByb2ZpbGluZyBjb25zdHJ1Y3RvciwgdGhpcyBpcyBsaWtlbHkgZHVlIHRvIGEgbWlzc2luZyAnRG9jdW1lbnQtUG9saWN5JzogJ2pzLXByb2ZpbGluZycgaGVhZGVyLlwiLFxuICAgICAgKTtcbiAgICAgIGxvZ2dlci5sb2coJ1tQcm9maWxpbmddIERpc2FibGluZyBwcm9maWxpbmcgZm9yIGN1cnJlbnQgdXNlciBzZXNzaW9uLicpO1xuICAgIH1cbiAgICBQUk9GSUxJTkdfQ09OU1RSVUNUT1JfRkFJTEVEID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFdlIGZhaWxlZCB0byBjb25zdHJ1Y3QgdGhlIHByb2ZpbGVyLCBmYWxsYmFjayB0byBvcmlnaW5hbCB0cmFuc2FjdGlvbiAtIHRoZXJlIGlzIG5vIG5lZWQgdG8gbG9nXG4gIC8vIGFueXRoaW5nIGFzIHdlIGFscmVhZHkgZGlkIHRoYXQgaW4gdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgaWYgKCFwcm9maWxlcikge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICBsb2dnZXIubG9nKGBbUHJvZmlsaW5nXSBzdGFydGVkIHByb2ZpbGluZyB0cmFuc2FjdGlvbjogJHt0cmFuc2FjdGlvbi5uYW1lIHx8IHRyYW5zYWN0aW9uLmRlc2NyaXB0aW9ufWApO1xuICB9XG5cbiAgLy8gV2UgY3JlYXRlIFwidW5pcXVlXCIgdHJhbnNhY3Rpb24gbmFtZXMgdG8gYXZvaWQgY29uY3VycmVudCB0cmFuc2FjdGlvbnMgd2l0aCBzYW1lIG5hbWVzXG4gIC8vIGZyb20gYmVpbmcgaWdub3JlZCBieSB0aGUgcHJvZmlsZXIuIEZyb20gaGVyZSBvbiwgb25seSB0aGlzIHRyYW5zYWN0aW9uIG5hbWUgc2hvdWxkIGJlIHVzZWQgd2hlblxuICAvLyBjYWxsaW5nIHRoZSBwcm9maWxlciBtZXRob2RzLiBOb3RlOiB3ZSBsb2cgdGhlIG9yaWdpbmFsIG5hbWUgdG8gdGhlIHVzZXIgdG8gYXZvaWQgY29uZnVzaW9uLlxuICBjb25zdCBwcm9maWxlSWQgPSB1dWlkNCgpO1xuXG4gIC8vIEEgY291cGxlIG9mIGltcG9ydGFudCB0aGluZ3MgdG8gbm90ZSBoZXJlOlxuICAvLyBgQ3B1UHJvZmlsZXJCaW5kaW5ncy5zdG9wUHJvZmlsaW5nYCB3aWxsIGJlIHNjaGVkdWxlZCB0byBydW4gaW4gMzBzZWNvbmRzIGluIG9yZGVyIHRvIGV4Y2VlZCBtYXggcHJvZmlsZSBkdXJhdGlvbi5cbiAgLy8gV2hpY2hldmVyIG9mIHRoZSB0d28gKHRyYW5zYWN0aW9uLmZpbmlzaC90aW1lb3V0KSBpcyBmaXJzdCB0byBydW4sIHRoZSBwcm9maWxpbmcgd2lsbCBiZSBzdG9wcGVkIGFuZCB0aGUgZ2F0aGVyZWQgcHJvZmlsZVxuICAvLyB3aWxsIGJlIHByb2Nlc3NlZCB3aGVuIHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiBpcyBmaW5pc2hlZC4gU2luY2Ugb25Qcm9maWxlSGFuZGxlciBjYW4gYmUgaW52b2tlZCBtdWx0aXBsZSB0aW1lcyBpbiB0aGVcbiAgLy8gZXZlbnQgb2YgYW4gZXJyb3Igb3IgdXNlciBtaXN0YWtlIChjYWxsaW5nIHRyYW5zYWN0aW9uLmZpbmlzaCBtdWx0aXBsZSB0aW1lcyksIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBiZWhhdmlvciBvZiBvblByb2ZpbGVIYW5kbGVyXG4gIC8vIGlzIGlkZW1wb3RlbnQgYXMgd2UgZG8gbm90IHdhbnQgYW55IHRpbWluZ3Mgb3IgcHJvZmlsZXMgdG8gYmUgb3ZlcnJpZGVuIGJ5IHRoZSBsYXN0IGNhbGwgdG8gb25Qcm9maWxlSGFuZGxlci5cbiAgLy8gQWZ0ZXIgdGhlIG9yaWdpbmFsIGZpbmlzaCBtZXRob2QgaXMgY2FsbGVkLCB0aGUgZXZlbnQgd2lsbCBiZSByZXBvcnRlZCB0aHJvdWdoIHRoZSBpbnRlZ3JhdGlvbiBhbmQgZGVsZWdhdGVkIHRvIHRyYW5zcG9ydC5cbiAgbGV0IHByb2Nlc3NlZFByb2ZpbGU6IFByb2Nlc3NlZEpTU2VsZlByb2ZpbGUgfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogSWRlbXBvdGVudCBoYW5kbGVyIGZvciBwcm9maWxlIHN0b3BcbiAgICovXG4gIGZ1bmN0aW9uIG9uUHJvZmlsZUhhbmRsZXIoKTogdm9pZCB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHByb2ZpbGUgZXhpc3RzIGFuZCByZXR1cm4gaXQgdGhlIGJlaGF2aW9yIGhhcyB0byBiZSBpZGVtcG90ZW50IGFzIHVzZXJzIG1heSBjYWxsIHRyYW5zYWN0aW9uLmZpbmlzaCBtdWx0aXBsZSB0aW1lcy5cbiAgICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNhdGlzZnkgdGhlIHR5cGUgY2hlY2tlciwgYnV0IHByb2ZpbGVyIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQgaGVyZS5cbiAgICBpZiAoIXByb2ZpbGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcm9jZXNzZWRQcm9maWxlKSB7XG4gICAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgICAgJ1tQcm9maWxpbmddIHByb2ZpbGUgZm9yOicsXG4gICAgICAgICAgdHJhbnNhY3Rpb24ubmFtZSB8fCB0cmFuc2FjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgICAnYWxyZWFkeSBleGlzdHMsIHJldHVybmluZyBlYXJseScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvZmlsZXJcbiAgICAgIC5zdG9wKClcbiAgICAgIC50aGVuKChwOiBKU1NlbGZQcm9maWxlKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChtYXhEdXJhdGlvblRpbWVvdXRJRCkge1xuICAgICAgICAgIFdJTkRPVy5jbGVhclRpbWVvdXQobWF4RHVyYXRpb25UaW1lb3V0SUQpO1xuICAgICAgICAgIG1heER1cmF0aW9uVGltZW91dElEID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgICAgIGxvZ2dlci5sb2coYFtQcm9maWxpbmddIHN0b3BwZWQgcHJvZmlsaW5nIG9mIHRyYW5zYWN0aW9uOiAke3RyYW5zYWN0aW9uLm5hbWUgfHwgdHJhbnNhY3Rpb24uZGVzY3JpcHRpb259YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiBjYXNlIG9mIGFuIG92ZXJsYXBwaW5nIHRyYW5zYWN0aW9uLCBzdG9wUHJvZmlsaW5nIG1heSByZXR1cm4gbnVsbCBhbmQgc2lsZW50bHkgaWdub3JlIHRoZSBvdmVybGFwcGluZyBwcm9maWxlLlxuICAgICAgICBpZiAoIXApIHtcbiAgICAgICAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFxuICAgICAgICAgICAgICBgW1Byb2ZpbGluZ10gcHJvZmlsZXIgcmV0dXJuZWQgbnVsbCBwcm9maWxlIGZvcjogJHt0cmFuc2FjdGlvbi5uYW1lIHx8IHRyYW5zYWN0aW9uLmRlc2NyaXB0aW9ufWAsXG4gICAgICAgICAgICAgICd0aGlzIG1heSBpbmRpY2F0ZSBhbiBvdmVybGFwcGluZyB0cmFuc2FjdGlvbiBvciBhIGNhbGwgdG8gc3RvcFByb2ZpbGluZyB3aXRoIGEgcHJvZmlsZSB0aXRsZSB0aGF0IHdhcyBuZXZlciBzdGFydGVkJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgcHJvZmlsZSBoYXMgbGVzcyB0aGFuIDIgc2FtcGxlcywgaXQgaXMgbm90IHVzZWZ1bCBhbmQgc2hvdWxkIGJlIGRpc2NhcmRlZC5cbiAgICAgICAgaWYgKHAuc2FtcGxlcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzc2VkUHJvZmlsZSA9IHsgLi4ucCwgcHJvZmlsZV9pZDogcHJvZmlsZUlkIH07XG4gICAgICAgIHNlbmRQcm9maWxlKHByb2ZpbGVJZCwgcHJvY2Vzc2VkUHJvZmlsZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgICAgIGxvZ2dlci5sb2coJ1tQcm9maWxpbmddIGVycm9yIHdoaWxlIHN0b3BwaW5nIHByb2ZpbGVyOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gRW5xdWV1ZSBhIHRpbWVvdXQgdG8gcHJldmVudCBwcm9maWxlcyBmcm9tIHJ1bm5pbmcgb3ZlciBtYXggZHVyYXRpb24uXG4gIGxldCBtYXhEdXJhdGlvblRpbWVvdXRJRDogbnVtYmVyIHwgdW5kZWZpbmVkID0gV0lORE9XLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgICdbUHJvZmlsaW5nXSBtYXggcHJvZmlsZSBkdXJhdGlvbiBlbGFwc2VkLCBzdG9wcGluZyBwcm9maWxpbmcgZm9yOicsXG4gICAgICAgIHRyYW5zYWN0aW9uLm5hbWUgfHwgdHJhbnNhY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICApO1xuICAgIH1cbiAgICB2b2lkIG9uUHJvZmlsZUhhbmRsZXIoKTtcbiAgfSwgTUFYX1BST0ZJTEVfRFVSQVRJT05fTVMpO1xuXG4gIC8vIFdlIG5lZWQgdG8gcmVmZXJlbmNlIHRoZSBvcmlnaW5hbCBmaW5pc2ggY2FsbCB0byBhdm9pZCBjcmVhdGluZyBhbiBpbmZpbml0ZSBsb29wXG4gIGNvbnN0IG9yaWdpbmFsRmluaXNoID0gdHJhbnNhY3Rpb24uZmluaXNoLmJpbmQodHJhbnNhY3Rpb24pO1xuXG4gIC8qKlxuICAgKiBXcmFwcyBzdGFydFRyYW5zYWN0aW9uIGFuZCBzdG9wVHJhbnNhY3Rpb24gd2l0aCBwcm9maWxpbmcgcmVsYXRlZCBsb2dpYy5cbiAgICogc3RhcnRQcm9maWxpbmcgaXMgY2FsbGVkIGFmdGVyIHRoZSBjYWxsIHRvIHN0YXJ0VHJhbnNhY3Rpb24gaW4gb3JkZXIgdG8gYXZvaWQgb3VyIG93biBjb2RlIGZyb21cbiAgICogYmVpbmcgcHJvZmlsZWQuIEJlY2F1c2Ugb2YgdGhhdCBzYW1lIHJlYXNvbiwgc3RvcFByb2ZpbGluZyBpcyBjYWxsZWQgYmVmb3JlIHRoZSBjYWxsIHRvIHN0b3BUcmFuc2FjdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIHByb2ZpbGluZ1dyYXBwZWRUcmFuc2FjdGlvbkZpbmlzaCgpOiBQcm9taXNlPFRyYW5zYWN0aW9uPiB7XG4gICAgaWYgKCF0cmFuc2FjdGlvbikge1xuICAgICAgcmV0dXJuIG9yaWdpbmFsRmluaXNoKCk7XG4gICAgfVxuICAgIC8vIG9uUHJvZmlsZUhhbmRsZXIgc2hvdWxkIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgcHJvZmlsZSBldmVuIGlmIHRoaXMgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgIC8vIEFsd2F5cyBjYWxsIG9uUHJvZmlsZUhhbmRsZXIgdG8gZW5zdXJlIHN0b3BQcm9maWxpbmcgaXMgY2FsbGVkIGFuZCB0aGUgdGltZW91dCBpcyBjbGVhcmVkLlxuICAgIG9uUHJvZmlsZUhhbmRsZXIoKTtcblxuICAgIC8vIFNldCBwcm9maWxlIGNvbnRleHRcbiAgICB0cmFuc2FjdGlvbi5zZXRDb250ZXh0KCdwcm9maWxlJywgeyBwcm9maWxlX2lkOiBwcm9maWxlSWQgfSk7XG5cbiAgICByZXR1cm4gb3JpZ2luYWxGaW5pc2goKTtcbiAgfVxuXG4gIHRyYW5zYWN0aW9uLmZpbmlzaCA9IHByb2ZpbGluZ1dyYXBwZWRUcmFuc2FjdGlvbkZpbmlzaDtcbiAgcmV0dXJuIHRyYW5zYWN0aW9uO1xufVxuXG4vKipcbiAqIFdyYXBzIHN0YXJ0VHJhbnNhY3Rpb24gd2l0aCBwcm9maWxpbmcgbG9naWMuIFRoaXMgaXMgZG9uZSBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBwcm9maWxpbmcgaW50ZWdyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIF9fUFJJVkFURV9fd3JhcFN0YXJ0VHJhbnNhY3Rpb25XaXRoUHJvZmlsaW5nKHN0YXJ0VHJhbnNhY3Rpb246IFN0YXJ0VHJhbnNhY3Rpb24pOiBTdGFydFRyYW5zYWN0aW9uIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZWRTdGFydFRyYW5zYWN0aW9uKFxuICAgIHRoaXM6IEh1YixcbiAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IFRyYW5zYWN0aW9uQ29udGV4dCxcbiAgICBjdXN0b21TYW1wbGluZ0NvbnRleHQ/OiBDdXN0b21TYW1wbGluZ0NvbnRleHQsXG4gICk6IFRyYW5zYWN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQgPSBzdGFydFRyYW5zYWN0aW9uLmNhbGwodGhpcywgdHJhbnNhY3Rpb25Db250ZXh0LCBjdXN0b21TYW1wbGluZ0NvbnRleHQpO1xuICAgIGlmICh0cmFuc2FjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICAgIGxvZ2dlci5sb2coJ1tQcm9maWxpbmddIFRyYW5zYWN0aW9uIGlzIHVuZGVmaW5lZCwgc2tpcHBpbmcgcHJvZmlsaW5nJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBUcmFuc2FjdGlvbldpdGhQcm9maWxpbmcodHJhbnNhY3Rpb24pO1xuICB9O1xufVxuXG4vKipcbiAqIFBhdGNoZXMgc3RhcnRUcmFuc2FjdGlvbiBhbmQgc3RvcFRyYW5zYWN0aW9uIHdpdGggcHJvZmlsaW5nIGxvZ2ljLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvZmlsaW5nRXh0ZW5zaW9uTWV0aG9kcygpOiB2b2lkIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGlmICghY2Fycmllci5fX1NFTlRSWV9fKSB7XG4gICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgbG9nZ2VyLmxvZyhcIltQcm9maWxpbmddIENhbid0IGZpbmQgbWFpbiBjYXJyaWVyLCBwcm9maWxpbmcgd29uJ3Qgd29yay5cIik7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBjYXJyaWVyLl9fU0VOVFJZX18uZXh0ZW5zaW9ucyA9IGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zIHx8IHt9O1xuXG4gIGlmICghY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnNbJ3N0YXJ0VHJhbnNhY3Rpb24nXSkge1xuICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgICdbUHJvZmlsaW5nXSBzdGFydFRyYW5zYWN0aW9uIGRvZXMgbm90IGV4aXN0cywgcHJvZmlsaW5nIHdpbGwgbm90IHdvcmsuIE1ha2Ugc3VyZSB5b3UgaW1wb3J0IEBzZW50cnkvdHJhY2luZyBwYWNrYWdlIGJlZm9yZSBAc2VudHJ5L3Byb2ZpbGluZy1ub2RlIGFzIGltcG9ydCBvcmRlciBtYXR0ZXJzLicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgbG9nZ2VyLmxvZygnW1Byb2ZpbGluZ10gc3RhcnRUcmFuc2FjdGlvbiBleGlzdHMsIHBhdGNoaW5nIGl0IHdpdGggcHJvZmlsaW5nIGZ1bmN0aW9uYWxpdHkuLi4nKTtcbiAgfVxuXG4gIGNhcnJpZXIuX19TRU5UUllfXy5leHRlbnNpb25zWydzdGFydFRyYW5zYWN0aW9uJ10gPSBfX1BSSVZBVEVfX3dyYXBTdGFydFRyYW5zYWN0aW9uV2l0aFByb2ZpbGluZyhcbiAgICAvLyBUaGlzIGlzIGFscmVhZHkgcGF0Y2hlZCBieSBzZW50cnkvdHJhY2luZywgd2UgYXJlIGdvaW5nIHRvIHJlLXBhdGNoIGl0Li4uXG4gICAgY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnNbJ3N0YXJ0VHJhbnNhY3Rpb24nXSBhcyBTdGFydFRyYW5zYWN0aW9uLFxuICApO1xufVxuIl0sIm5hbWVzIjpbIk1BWF9QUk9GSUxFX0RVUkFUSU9OX01TIiwiUFJPRklMSU5HX0NPTlNUUlVDVE9SX0ZBSUxFRCIsImlzSlNQcm9maWxlclN1cHBvcnRlZCIsIm1heWJlUHJvZmlsZXIiLCJvblByb2ZpbGluZ1N0YXJ0Um91dGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uIiwiX19TRU5UUllfREVCVUdfXyIsInV0aWxzIiwibG9nZ2VyIiwibG9nIiwid3JhcFRyYW5zYWN0aW9uV2l0aFByb2ZpbGluZyIsIkpTUHJvZmlsZXJDb25zdHJ1Y3RvciIsImhlbHBlcnMiLCJXSU5ET1ciLCJQcm9maWxlciIsInNhbXBsZWQiLCJjbGllbnQiLCJjb3JlIiwiZ2V0Q3VycmVudEh1YiIsImdldENsaWVudCIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwicHJvZmlsZXNTYW1wbGVSYXRlIiwidW5kZWZpbmVkIiwiTWF0aCIsInJhbmRvbSIsInNhbXBsaW5nSW50ZXJ2YWxNUyIsIm1heFNhbXBsZXMiLCJmbG9vciIsInByb2ZpbGVyIiwic2FtcGxlSW50ZXJ2YWwiLCJtYXhCdWZmZXJTaXplIiwiZSIsImNvbmNhdCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByb2ZpbGVJZCIsInV1aWQ0IiwicHJvY2Vzc2VkUHJvZmlsZSIsIm9uUHJvZmlsZUhhbmRsZXIiLCJzdG9wIiwidGhlbiIsInAiLCJtYXhEdXJhdGlvblRpbWVvdXRJRCIsImNsZWFyVGltZW91dCIsInNhbXBsZXMiLCJsZW5ndGgiLCJfb2JqZWN0U3ByZWFkIiwicHJvZmlsZV9pZCIsInNlbmRQcm9maWxlIiwiY2F0Y2giLCJlcnJvciIsInNldFRpbWVvdXQiLCJvcmlnaW5hbEZpbmlzaCIsImZpbmlzaCIsImJpbmQiLCJwcm9maWxpbmdXcmFwcGVkVHJhbnNhY3Rpb25GaW5pc2giLCJzZXRDb250ZXh0IiwiX19QUklWQVRFX193cmFwU3RhcnRUcmFuc2FjdGlvbldpdGhQcm9maWxpbmciLCJzdGFydFRyYW5zYWN0aW9uIiwid3JhcHBlZFN0YXJ0VHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbkNvbnRleHQiLCJjdXN0b21TYW1wbGluZ0NvbnRleHQiLCJjYWxsIiwiYWRkUHJvZmlsaW5nRXh0ZW5zaW9uTWV0aG9kcyIsImNhcnJpZXIiLCJnZXRNYWluQ2FycmllciIsIl9fU0VOVFJZX18iLCJleHRlbnNpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/profiling/hubextensions.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/profiling/integration.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/profiling/integration.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar cache = __webpack_require__(/*! ./cache.js */ \"./node_modules/@sentry/browser/cjs/profiling/cache.js\");\nvar hubextensions = __webpack_require__(/*! ./hubextensions.js */ \"./node_modules/@sentry/browser/cjs/profiling/hubextensions.js\");\n\n/**\n * Browser profiling integration. Stores any event that has contexts[\"profile\"][\"profile_id\"]\n * This exists because we do not want to await async profiler.stop calls as transaction.finish is called\n * in a synchronous context. Instead, we handle sending the profile async from the promise callback and\n * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the\n * integration less reliable as we might be dropping profiles when the cache is full.\n *\n * @experimental\n */\nvar BrowserProfilingIntegration = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BrowserProfilingIntegration() {\n    _classCallCheck(this, BrowserProfilingIntegration);\n    BrowserProfilingIntegration.prototype.__init.call(this);\n  }\n  _createClass(BrowserProfilingIntegration, [{\n    key: \"__init\",\n    value: function __init() {\n      this.name = 'BrowserProfilingIntegration';\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor) {\n      // Patching the hub to add the extension methods.\n      // Warning: we have an implicit dependency on import order and we will fail patching if the constructor of\n      // BrowserProfilingIntegration is called before @sentry/tracing is imported. This is because we need to patch\n      // the methods of @sentry/tracing which are patched as a side effect of importing @sentry/tracing.\n      hubextensions.addProfilingExtensionMethods();\n\n      // Add our event processor\n      addGlobalEventProcessor(this.handleGlobalEvent.bind(this));\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"handleGlobalEvent\",\n    value: function handleGlobalEvent(event) {\n      var profileId = event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id'];\n      if (profileId && typeof profileId === 'string') {\n        if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n          utils.logger.log('[Profiling] Profiling event found, caching it.');\n        }\n        cache.PROFILING_EVENT_CACHE.add(profileId, event);\n      }\n      return event;\n    }\n  }]);\n  return BrowserProfilingIntegration;\n}();\nexports.BrowserProfilingIntegration = BrowserProfilingIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9wcm9maWxpbmcvaW50ZWdyYXRpb24uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkEsSUFTQUEsMkJBQUE7RUFBQTs7RUFBQSxTQUFBQSw0QkFBQTtJQUFBQyxlQUFBLE9BQUFELDJCQUFBO0lBQUFBLDJCQUFBLENBQUFFLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0VBQUE7RUFBQUMsWUFBQSxDQUFBTCwyQkFBQTtJQUFBTSxHQUFBO0lBQUFDLEtBQUEsRUFDQSxTQUFBSixPQUFBO01BQUEsS0FBQUssSUFBQTtJQUFBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFGLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFFLFVBQUFDLHVCQUFBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQUMsYUFBQSxDQUFBQyw0QkFBQTs7TUFFQTtNQUNBRix1QkFBQSxNQUFBRyxpQkFBQSxDQUFBQyxJQUFBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVIsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQU0sa0JBQUFFLEtBQUE7TUFDQSxJQUFBQyxTQUFBLEdBQUFELEtBQUEsQ0FBQUUsUUFBQSxJQUFBRixLQUFBLENBQUFFLFFBQUEsZUFBQUYsS0FBQSxDQUFBRSxRQUFBO01BRUEsSUFBQUQsU0FBQSxXQUFBQSxTQUFBO1FBQ0EsV0FBQUUsZ0JBQUEsb0JBQUFBLGdCQUFBO1VBQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO1FBQ0E7UUFDQUMsS0FBQSxDQUFBQyxxQkFBQSxDQUFBQyxHQUFBLENBQUFSLFNBQUEsRUFBQUQsS0FBQTtNQUNBO01BRUEsT0FBQUEsS0FBQTtJQUNBO0VBQUE7RUFBQSxPQUFBZiwyQkFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL3Byb2ZpbGluZy9pbnRlZ3JhdGlvbi50cz8zYzQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXZlbnQsIEV2ZW50UHJvY2Vzc29yLCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IFBST0ZJTElOR19FVkVOVF9DQUNIRSB9IGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IHsgYWRkUHJvZmlsaW5nRXh0ZW5zaW9uTWV0aG9kcyB9IGZyb20gJy4vaHViZXh0ZW5zaW9ucyc7XG5cbi8qKlxuICogQnJvd3NlciBwcm9maWxpbmcgaW50ZWdyYXRpb24uIFN0b3JlcyBhbnkgZXZlbnQgdGhhdCBoYXMgY29udGV4dHNbXCJwcm9maWxlXCJdW1wicHJvZmlsZV9pZFwiXVxuICogVGhpcyBleGlzdHMgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0byBhd2FpdCBhc3luYyBwcm9maWxlci5zdG9wIGNhbGxzIGFzIHRyYW5zYWN0aW9uLmZpbmlzaCBpcyBjYWxsZWRcbiAqIGluIGEgc3luY2hyb25vdXMgY29udGV4dC4gSW5zdGVhZCwgd2UgaGFuZGxlIHNlbmRpbmcgdGhlIHByb2ZpbGUgYXN5bmMgZnJvbSB0aGUgcHJvbWlzZSBjYWxsYmFjayBhbmRcbiAqIHJlbHkgb24gYmVpbmcgYWJsZSB0byBwdWxsIHRoZSBldmVudCBmcm9tIHRoZSBjYWNoZSB3aGVuIHdlIG5lZWQgdG8gY29uc3RydWN0IHRoZSBlbnZlbG9wZS4gVGhpcyBtYWtlcyB0aGVcbiAqIGludGVncmF0aW9uIGxlc3MgcmVsaWFibGUgYXMgd2UgbWlnaHQgYmUgZHJvcHBpbmcgcHJvZmlsZXMgd2hlbiB0aGUgY2FjaGUgaXMgZnVsbC5cbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBjbGFzcyBCcm93c2VyUHJvZmlsaW5nSW50ZWdyYXRpb24gaW1wbGVtZW50cyBJbnRlZ3JhdGlvbiB7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSAnQnJvd3NlclByb2ZpbGluZ0ludGVncmF0aW9uJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3I6IChjYWxsYmFjazogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAvLyBQYXRjaGluZyB0aGUgaHViIHRvIGFkZCB0aGUgZXh0ZW5zaW9uIG1ldGhvZHMuXG4gICAgLy8gV2FybmluZzogd2UgaGF2ZSBhbiBpbXBsaWNpdCBkZXBlbmRlbmN5IG9uIGltcG9ydCBvcmRlciBhbmQgd2Ugd2lsbCBmYWlsIHBhdGNoaW5nIGlmIHRoZSBjb25zdHJ1Y3RvciBvZlxuICAgIC8vIEJyb3dzZXJQcm9maWxpbmdJbnRlZ3JhdGlvbiBpcyBjYWxsZWQgYmVmb3JlIEBzZW50cnkvdHJhY2luZyBpcyBpbXBvcnRlZC4gVGhpcyBpcyBiZWNhdXNlIHdlIG5lZWQgdG8gcGF0Y2hcbiAgICAvLyB0aGUgbWV0aG9kcyBvZiBAc2VudHJ5L3RyYWNpbmcgd2hpY2ggYXJlIHBhdGNoZWQgYXMgYSBzaWRlIGVmZmVjdCBvZiBpbXBvcnRpbmcgQHNlbnRyeS90cmFjaW5nLlxuICAgIGFkZFByb2ZpbGluZ0V4dGVuc2lvbk1ldGhvZHMoKTtcblxuICAgIC8vIEFkZCBvdXIgZXZlbnQgcHJvY2Vzc29yXG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IodGhpcy5oYW5kbGVHbG9iYWxFdmVudC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGhhbmRsZUdsb2JhbEV2ZW50KGV2ZW50OiBFdmVudCk6IEV2ZW50IHtcbiAgICBjb25zdCBwcm9maWxlSWQgPSBldmVudC5jb250ZXh0cyAmJiBldmVudC5jb250ZXh0c1sncHJvZmlsZSddICYmIGV2ZW50LmNvbnRleHRzWydwcm9maWxlJ11bJ3Byb2ZpbGVfaWQnXTtcblxuICAgIGlmIChwcm9maWxlSWQgJiYgdHlwZW9mIHByb2ZpbGVJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgICAgbG9nZ2VyLmxvZygnW1Byb2ZpbGluZ10gUHJvZmlsaW5nIGV2ZW50IGZvdW5kLCBjYWNoaW5nIGl0LicpO1xuICAgICAgfVxuICAgICAgUFJPRklMSU5HX0VWRU5UX0NBQ0hFLmFkZChwcm9maWxlSWQsIGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJCcm93c2VyUHJvZmlsaW5nSW50ZWdyYXRpb24iLCJfY2xhc3NDYWxsQ2hlY2siLCJwcm90b3R5cGUiLCJfX2luaXQiLCJjYWxsIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJuYW1lIiwic2V0dXBPbmNlIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJodWJleHRlbnNpb25zIiwiYWRkUHJvZmlsaW5nRXh0ZW5zaW9uTWV0aG9kcyIsImhhbmRsZUdsb2JhbEV2ZW50IiwiYmluZCIsImV2ZW50IiwicHJvZmlsZUlkIiwiY29udGV4dHMiLCJfX1NFTlRSWV9ERUJVR19fIiwidXRpbHMiLCJsb2dnZXIiLCJsb2ciLCJjYWNoZSIsIlBST0ZJTElOR19FVkVOVF9DQUNIRSIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/profiling/integration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/profiling/sendProfile.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/profiling/sendProfile.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar cache = __webpack_require__(/*! ./cache.js */ \"./node_modules/@sentry/browser/cjs/profiling/cache.js\");\nvar utils$1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/browser/cjs/profiling/utils.js\");\n\n/**\n * Performs lookup in the event cache and sends the profile to Sentry.\n * If the profiled transaction event is found, we use the profiled transaction event and profile\n * to construct a profile type envelope and send it to Sentry.\n */\nfunction sendProfile(profileId, profile) {\n  var event = cache.PROFILING_EVENT_CACHE.get(profileId);\n  if (!event) {\n    // We could not find a corresponding transaction event for this profile.\n    // Opt to do nothing for now, but in the future we should implement a simple retry mechanism.\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log(\"[Profiling] Couldn't find a transaction event for this profile, dropping it.\");\n    }\n    return;\n  }\n  event.sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n  if (event.sdkProcessingMetadata && !event.sdkProcessingMetadata['profile']) {\n    event.sdkProcessingMetadata['profile'] = profile;\n  }\n\n  // Client, Dsn and Transport are all required to be able to send the profiling event to Sentry.\n  // If either of them is not available, we remove the profile from the transaction event.\n  // and forward it to the next event processor.\n  var hub = core.getCurrentHub();\n  var client = hub.getClient();\n  if (!client) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] getClient did not return a Client, removing profile from event and forwarding to next event processors.');\n    }\n    return;\n  }\n  var dsn = client.getDsn();\n  if (!dsn) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] getDsn did not return a Dsn, removing profile from event and forwarding to next event processors.');\n    }\n    return;\n  }\n  var transport = client.getTransport();\n  if (!transport) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] getTransport did not return a Transport, removing profile from event and forwarding to next event processors.');\n    }\n    return;\n  }\n\n  // If all required components are available, we construct a profiling event envelope and send it to Sentry.\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    utils.logger.log('[Profiling] Preparing envelope and sending a profiling event');\n  }\n  var envelope = utils$1.createProfilingEventEnvelope(event, dsn);\n\n  // Evict event from the cache - we want to prevent the LRU cache from prioritizing already sent events over new ones.\n  cache.PROFILING_EVENT_CACHE.delete(profileId);\n  if (!envelope) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log('[Profiling] Failed to construct envelope');\n    }\n    return;\n  }\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    utils.logger.log('[Profiling] Envelope constructed, sending it');\n  }\n\n  // Wrap in try/catch because send will throw in case of a network error.\n  transport.send(envelope).then(null, function (reason) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Profiling] Error while sending event:', reason);\n  });\n}\nexports.sendProfile = sendProfile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9wcm9maWxpbmcvc2VuZFByb2ZpbGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsWUFBQUMsU0FBQSxFQUFBQyxPQUFBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBQyxLQUFBLENBQUFDLHFCQUFBLENBQUFDLEdBQUEsQ0FBQUwsU0FBQTtFQUVBLEtBQUFFLEtBQUE7SUFDQTtJQUNBO0lBQ0EsV0FBQUksZ0JBQUEsb0JBQUFBLGdCQUFBO01BQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO0lBQ0E7SUFDQTtFQUNBO0VBRUFQLEtBQUEsQ0FBQVEscUJBQUEsR0FBQVIsS0FBQSxDQUFBUSxxQkFBQTtFQUNBLElBQUFSLEtBQUEsQ0FBQVEscUJBQUEsS0FBQVIsS0FBQSxDQUFBUSxxQkFBQTtJQUNBUixLQUFBLENBQUFRLHFCQUFBLGNBQUFULE9BQUE7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQSxJQUFBVSxHQUFBLEdBQUFDLElBQUEsQ0FBQUMsYUFBQTtFQUNBLElBQUFDLE1BQUEsR0FBQUgsR0FBQSxDQUFBSSxTQUFBO0VBRUEsS0FBQUQsTUFBQTtJQUNBLFdBQUFSLGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQSxDQUNBLHFIQUNBO0lBQ0E7SUFDQTtFQUNBO0VBRUEsSUFBQU8sR0FBQSxHQUFBRixNQUFBLENBQUFHLE1BQUE7RUFDQSxLQUFBRCxHQUFBO0lBQ0EsV0FBQVYsZ0JBQUEsb0JBQUFBLGdCQUFBO01BQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBLENBQ0EsK0dBQ0E7SUFDQTtJQUNBO0VBQ0E7RUFFQSxJQUFBUyxTQUFBLEdBQUFKLE1BQUEsQ0FBQUssWUFBQTtFQUNBLEtBQUFELFNBQUE7SUFDQSxXQUFBWixnQkFBQSxvQkFBQUEsZ0JBQUE7TUFDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsQ0FDQSwySEFDQTtJQUNBO0lBQ0E7RUFDQTs7RUFFQTtFQUNBLFdBQUFILGdCQUFBLG9CQUFBQSxnQkFBQTtJQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsR0FBQTtFQUNBO0VBQ0EsSUFBQVcsUUFBQSxHQUFBQyxPQUFBLENBQUFDLDRCQUFBLENBQUFwQixLQUFBLEVBQUFjLEdBQUE7O0VBRUE7RUFDQWIsS0FBQSxDQUFBQyxxQkFBQSxDQUFBbUIsTUFBQSxDQUFBdkIsU0FBQTtFQUVBLEtBQUFvQixRQUFBO0lBQ0EsV0FBQWQsZ0JBQUEsb0JBQUFBLGdCQUFBO01BQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO0lBQ0E7SUFDQTtFQUNBO0VBRUEsV0FBQUgsZ0JBQUEsb0JBQUFBLGdCQUFBO0lBQ0FDLEtBQUEsQ0FBQUMsTUFBQSxDQUFBQyxHQUFBO0VBQ0E7O0VBRUE7RUFDQVMsU0FBQSxDQUFBTSxJQUFBLENBQUFKLFFBQUEsRUFBQUssSUFBQSxpQkFBQUMsTUFBQTtJQUNBLFFBQUFwQixnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLEdBQUEsMkNBQUFpQixNQUFBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uLy4uL3NyYy9wcm9maWxpbmcvc2VuZFByb2ZpbGUudHM/YzRjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5pbXBvcnQgeyBQUk9GSUxJTkdfRVZFTlRfQ0FDSEUgfSBmcm9tICcuL2NhY2hlJztcbmltcG9ydCB0eXBlIHsgUHJvY2Vzc2VkSlNTZWxmUHJvZmlsZSB9IGZyb20gJy4vanNTZWxmUHJvZmlsaW5nJztcbmltcG9ydCB0eXBlIHsgUHJvZmlsZWRFdmVudCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlUHJvZmlsaW5nRXZlbnRFbnZlbG9wZSB9IGZyb20gJy4vdXRpbHMnO1xuLyoqXG4gKiBQZXJmb3JtcyBsb29rdXAgaW4gdGhlIGV2ZW50IGNhY2hlIGFuZCBzZW5kcyB0aGUgcHJvZmlsZSB0byBTZW50cnkuXG4gKiBJZiB0aGUgcHJvZmlsZWQgdHJhbnNhY3Rpb24gZXZlbnQgaXMgZm91bmQsIHdlIHVzZSB0aGUgcHJvZmlsZWQgdHJhbnNhY3Rpb24gZXZlbnQgYW5kIHByb2ZpbGVcbiAqIHRvIGNvbnN0cnVjdCBhIHByb2ZpbGUgdHlwZSBlbnZlbG9wZSBhbmQgc2VuZCBpdCB0byBTZW50cnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZW5kUHJvZmlsZShwcm9maWxlSWQ6IHN0cmluZywgcHJvZmlsZTogUHJvY2Vzc2VkSlNTZWxmUHJvZmlsZSk6IHZvaWQge1xuICBjb25zdCBldmVudCA9IFBST0ZJTElOR19FVkVOVF9DQUNIRS5nZXQocHJvZmlsZUlkKTtcblxuICBpZiAoIWV2ZW50KSB7XG4gICAgLy8gV2UgY291bGQgbm90IGZpbmQgYSBjb3JyZXNwb25kaW5nIHRyYW5zYWN0aW9uIGV2ZW50IGZvciB0aGlzIHByb2ZpbGUuXG4gICAgLy8gT3B0IHRvIGRvIG5vdGhpbmcgZm9yIG5vdywgYnV0IGluIHRoZSBmdXR1cmUgd2Ugc2hvdWxkIGltcGxlbWVudCBhIHNpbXBsZSByZXRyeSBtZWNoYW5pc20uXG4gICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgbG9nZ2VyLmxvZyhcIltQcm9maWxpbmddIENvdWxkbid0IGZpbmQgYSB0cmFuc2FjdGlvbiBldmVudCBmb3IgdGhpcyBwcm9maWxlLCBkcm9wcGluZyBpdC5cIik7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSB8fCB7fTtcbiAgaWYgKGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSAmJiAhZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhWydwcm9maWxlJ10pIHtcbiAgICBldmVudC5zZGtQcm9jZXNzaW5nTWV0YWRhdGFbJ3Byb2ZpbGUnXSA9IHByb2ZpbGU7XG4gIH1cblxuICAvLyBDbGllbnQsIERzbiBhbmQgVHJhbnNwb3J0IGFyZSBhbGwgcmVxdWlyZWQgdG8gYmUgYWJsZSB0byBzZW5kIHRoZSBwcm9maWxpbmcgZXZlbnQgdG8gU2VudHJ5LlxuICAvLyBJZiBlaXRoZXIgb2YgdGhlbSBpcyBub3QgYXZhaWxhYmxlLCB3ZSByZW1vdmUgdGhlIHByb2ZpbGUgZnJvbSB0aGUgdHJhbnNhY3Rpb24gZXZlbnQuXG4gIC8vIGFuZCBmb3J3YXJkIGl0IHRvIHRoZSBuZXh0IGV2ZW50IHByb2Nlc3Nvci5cbiAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICBjb25zdCBjbGllbnQgPSBodWIuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKCFjbGllbnQpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIubG9nKFxuICAgICAgICAnW1Byb2ZpbGluZ10gZ2V0Q2xpZW50IGRpZCBub3QgcmV0dXJuIGEgQ2xpZW50LCByZW1vdmluZyBwcm9maWxlIGZyb20gZXZlbnQgYW5kIGZvcndhcmRpbmcgdG8gbmV4dCBldmVudCBwcm9jZXNzb3JzLicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkc24gPSBjbGllbnQuZ2V0RHNuKCk7XG4gIGlmICghZHNuKSB7XG4gICAgaWYgKF9fREVCVUdfQlVJTERfXykge1xuICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgJ1tQcm9maWxpbmddIGdldERzbiBkaWQgbm90IHJldHVybiBhIERzbiwgcmVtb3ZpbmcgcHJvZmlsZSBmcm9tIGV2ZW50IGFuZCBmb3J3YXJkaW5nIHRvIG5leHQgZXZlbnQgcHJvY2Vzc29ycy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdHJhbnNwb3J0ID0gY2xpZW50LmdldFRyYW5zcG9ydCgpO1xuICBpZiAoIXRyYW5zcG9ydCkge1xuICAgIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICAgIGxvZ2dlci5sb2coXG4gICAgICAgICdbUHJvZmlsaW5nXSBnZXRUcmFuc3BvcnQgZGlkIG5vdCByZXR1cm4gYSBUcmFuc3BvcnQsIHJlbW92aW5nIHByb2ZpbGUgZnJvbSBldmVudCBhbmQgZm9yd2FyZGluZyB0byBuZXh0IGV2ZW50IHByb2Nlc3NvcnMuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIGFsbCByZXF1aXJlZCBjb21wb25lbnRzIGFyZSBhdmFpbGFibGUsIHdlIGNvbnN0cnVjdCBhIHByb2ZpbGluZyBldmVudCBlbnZlbG9wZSBhbmQgc2VuZCBpdCB0byBTZW50cnkuXG4gIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICBsb2dnZXIubG9nKCdbUHJvZmlsaW5nXSBQcmVwYXJpbmcgZW52ZWxvcGUgYW5kIHNlbmRpbmcgYSBwcm9maWxpbmcgZXZlbnQnKTtcbiAgfVxuICBjb25zdCBlbnZlbG9wZSA9IGNyZWF0ZVByb2ZpbGluZ0V2ZW50RW52ZWxvcGUoZXZlbnQgYXMgUHJvZmlsZWRFdmVudCwgZHNuKTtcblxuICAvLyBFdmljdCBldmVudCBmcm9tIHRoZSBjYWNoZSAtIHdlIHdhbnQgdG8gcHJldmVudCB0aGUgTFJVIGNhY2hlIGZyb20gcHJpb3JpdGl6aW5nIGFscmVhZHkgc2VudCBldmVudHMgb3ZlciBuZXcgb25lcy5cbiAgUFJPRklMSU5HX0VWRU5UX0NBQ0hFLmRlbGV0ZShwcm9maWxlSWQpO1xuXG4gIGlmICghZW52ZWxvcGUpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIubG9nKCdbUHJvZmlsaW5nXSBGYWlsZWQgdG8gY29uc3RydWN0IGVudmVsb3BlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICBsb2dnZXIubG9nKCdbUHJvZmlsaW5nXSBFbnZlbG9wZSBjb25zdHJ1Y3RlZCwgc2VuZGluZyBpdCcpO1xuICB9XG5cbiAgLy8gV3JhcCBpbiB0cnkvY2F0Y2ggYmVjYXVzZSBzZW5kIHdpbGwgdGhyb3cgaW4gY2FzZSBvZiBhIG5ldHdvcmsgZXJyb3IuXG4gIHRyYW5zcG9ydC5zZW5kKGVudmVsb3BlKS50aGVuKG51bGwsIHJlYXNvbiA9PiB7XG4gICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5sb2coJ1tQcm9maWxpbmddIEVycm9yIHdoaWxlIHNlbmRpbmcgZXZlbnQ6JywgcmVhc29uKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsic2VuZFByb2ZpbGUiLCJwcm9maWxlSWQiLCJwcm9maWxlIiwiZXZlbnQiLCJjYWNoZSIsIlBST0ZJTElOR19FVkVOVF9DQUNIRSIsImdldCIsIl9fU0VOVFJZX0RFQlVHX18iLCJ1dGlscyIsImxvZ2dlciIsImxvZyIsInNka1Byb2Nlc3NpbmdNZXRhZGF0YSIsImh1YiIsImNvcmUiLCJnZXRDdXJyZW50SHViIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiZHNuIiwiZ2V0RHNuIiwidHJhbnNwb3J0IiwiZ2V0VHJhbnNwb3J0IiwiZW52ZWxvcGUiLCJ1dGlscyQxIiwiY3JlYXRlUHJvZmlsaW5nRXZlbnRFbnZlbG9wZSIsImRlbGV0ZSIsInNlbmQiLCJ0aGVuIiwicmVhc29uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/profiling/sendProfile.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/profiling/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/profiling/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ \"./node_modules/core-js/modules/es.number.to-fixed.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar MS_TO_NS = 1e6;\n// Use 0 as main thread id which is identical to threadId in node:worker_threads\n// where main logs 0 and workers seem to log in increments of 1\nvar THREAD_ID_STRING = String(0);\nvar THREAD_NAME = 'main';\n\n// Machine properties (eval only once)\nvar OS_PLATFORM = ''; // macos\nvar OS_PLATFORM_VERSION = ''; // 13.2\nvar OS_ARCH = ''; // arm64\nvar OS_BROWSER = helpers.WINDOW.navigator && helpers.WINDOW.navigator.userAgent || '';\nvar OS_MODEL = '';\nvar OS_LOCALE = helpers.WINDOW.navigator && helpers.WINDOW.navigator.language || helpers.WINDOW.navigator && helpers.WINDOW.navigator.languages && helpers.WINDOW.navigator.languages[0] || '';\nfunction isUserAgentData(data) {\n  return _typeof(data) === 'object' && data !== null && 'getHighEntropyValues' in data;\n}\n\n// @ts-ignore userAgentData is not part of the navigator interface yet\nvar userAgentData = helpers.WINDOW.navigator && helpers.WINDOW.navigator.userAgentData;\nif (isUserAgentData(userAgentData)) {\n  userAgentData.getHighEntropyValues(['architecture', 'model', 'platform', 'platformVersion', 'fullVersionList']).then(function (ua) {\n    OS_PLATFORM = ua.platform || '';\n    OS_ARCH = ua.architecture || '';\n    OS_MODEL = ua.model || '';\n    OS_PLATFORM_VERSION = ua.platformVersion || '';\n    if (ua.fullVersionList && ua.fullVersionList.length > 0) {\n      var firstUa = ua.fullVersionList[ua.fullVersionList.length - 1];\n      OS_BROWSER = \"\".concat(firstUa.brand, \" \").concat(firstUa.version);\n    }\n  }).catch(function (e) {\n    return void e;\n  });\n}\nfunction isRawThreadCpuProfile(profile) {\n  return !('thread_metadata' in profile);\n}\n\n// Enriches the profile with threadId of the current thread.\n// This is done in node as we seem to not be able to get the info from C native code.\n/**\n *\n */\nfunction enrichWithThreadInformation(profile) {\n  if (!isRawThreadCpuProfile(profile)) {\n    return profile;\n  }\n  return convertJSSelfProfileToSampledFormat(profile);\n}\n\n// Profile is marked as optional because it is deleted from the metadata\n// by the integration before the event is processed by other integrations.\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(metadata) {\n  if (!metadata || !metadata.sdk) {\n    return undefined;\n  }\n  return {\n    name: metadata.sdk.name,\n    version: metadata.sdk.version\n  };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name || 'unknown sdk';\n  event.sdk.version = event.sdk.version || sdkInfo.version || 'unknown sdk version';\n  event.sdk.integrations = [].concat(_toConsumableArray(event.sdk.integrations || []), _toConsumableArray(sdkInfo.integrations || []));\n  event.sdk.packages = [].concat(_toConsumableArray(event.sdk.packages || []), _toConsumableArray(sdkInfo.packages || []));\n  return event;\n}\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n  var dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata['dynamicSamplingContext'];\n  return _objectSpread(_objectSpread(_objectSpread({\n    event_id: event.event_id,\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!tunnel && {\n    dsn: utils.dsnToString(dsn)\n  }), event.type === 'transaction' && dynamicSamplingContext && {\n    trace: utils.dropUndefinedKeys(_objectSpread({}, dynamicSamplingContext))\n  });\n}\nfunction getTraceId(event) {\n  var traceId = event && event.contexts && event.contexts['trace'] && event.contexts['trace']['trace_id'];\n  // Log a warning if the profile has an invalid traceId (should be uuidv4).\n  // All profiles and transactions are rejected if this is the case and we want to\n  // warn users that this is happening if they enable debug flag\n  if (typeof traceId === 'string' && traceId.length !== 32) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.log(\"[Profiling] Invalid traceId: \".concat(traceId, \" on profiled event\"));\n    }\n  }\n  if (typeof traceId !== 'string') {\n    return '';\n  }\n  return traceId;\n}\n/**\n * Creates a profiling event envelope from a Sentry event. If profile does not pass\n * validation, returns null.\n * @param event\n * @param dsn\n * @param metadata\n * @param tunnel\n * @returns {EventEnvelope | null}\n */\n\n/**\n * Creates a profiling event envelope from a Sentry event.\n */\nfunction createProfilingEventEnvelope(event, dsn, metadata, tunnel) {\n  if (event.type !== 'transaction') {\n    // createProfilingEventEnvelope should only be called for transactions,\n    // we type guard this behavior with isProfiledTransactionEvent.\n    throw new TypeError('Profiling events may only be attached to transactions, this should never occur.');\n  }\n  var rawProfile = event.sdkProcessingMetadata['profile'];\n  if (rawProfile === undefined || rawProfile === null) {\n    throw new TypeError(\"Cannot construct profiling event envelope without a valid profile. Got \".concat(rawProfile, \" instead.\"));\n  }\n  if (!rawProfile.profile_id) {\n    throw new TypeError('Profile is missing profile_id');\n  }\n  if (rawProfile.samples.length <= 1) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      // Log a warning if the profile has less than 2 samples so users can know why\n      // they are not seeing any profiling data and we cant avoid the back and forth\n      // of asking them to provide us with a dump of the profile data.\n      utils.logger.log('[Profiling] Discarding profile because it contains less than 2 samples');\n    }\n    return null;\n  }\n  var traceId = getTraceId(event);\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  var envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n  var enrichedThreadProfile = enrichWithThreadInformation(rawProfile);\n  var transactionStartMs = typeof event.start_timestamp === 'number' ? event.start_timestamp * 1000 : Date.now();\n  var transactionEndMs = typeof event.timestamp === 'number' ? event.timestamp * 1000 : Date.now();\n  var profile = {\n    event_id: rawProfile.profile_id,\n    timestamp: new Date(transactionStartMs).toISOString(),\n    platform: 'javascript',\n    version: '1',\n    release: event.release || '',\n    environment: event.environment || core.DEFAULT_ENVIRONMENT,\n    runtime: {\n      name: 'javascript',\n      version: helpers.WINDOW.navigator.userAgent\n    },\n    os: {\n      name: OS_PLATFORM,\n      version: OS_PLATFORM_VERSION,\n      build_number: OS_BROWSER\n    },\n    device: {\n      locale: OS_LOCALE,\n      model: OS_MODEL,\n      manufacturer: OS_BROWSER,\n      architecture: OS_ARCH,\n      is_emulator: false\n    },\n    profile: enrichedThreadProfile,\n    transactions: [{\n      name: event.transaction || '',\n      id: event.event_id || utils.uuid4(),\n      trace_id: traceId,\n      active_thread_id: THREAD_ID_STRING,\n      relative_start_ns: '0',\n      relative_end_ns: ((transactionEndMs - transactionStartMs) * 1e6).toFixed(0)\n    }]\n  };\n  var envelopeItem = [{\n    type: 'profile'\n  },\n  // @ts-ignore this is missing in typedef\n  profile];\n  return utils.createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Converts a JSSelfProfile to a our sampled format.\n * Does not currently perform stack indexing.\n */\nfunction convertJSSelfProfileToSampledFormat(input) {\n  var EMPTY_STACK_ID = undefined;\n  var STACK_ID = 0;\n\n  // Initialize the profile that we will fill with data\n  var profile = {\n    samples: [],\n    stacks: [],\n    frames: [],\n    thread_metadata: _defineProperty({}, THREAD_ID_STRING, {\n      name: THREAD_NAME\n    })\n  };\n  if (!input.samples.length) {\n    return profile;\n  }\n\n  // We assert samples.length > 0 above and timestamp should always be present\n  var start = input.samples[0].timestamp;\n  for (var i = 0; i < input.samples.length; i++) {\n    var jsSample = input.samples[i];\n\n    // If sample has no stack, add an empty sample\n    if (jsSample.stackId === undefined) {\n      if (EMPTY_STACK_ID === undefined) {\n        EMPTY_STACK_ID = STACK_ID;\n        profile.stacks[EMPTY_STACK_ID] = [];\n        STACK_ID++;\n      }\n      profile['samples'][i] = {\n        // convert ms timestamp to ns\n        elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),\n        stack_id: EMPTY_STACK_ID,\n        thread_id: THREAD_ID_STRING\n      };\n      continue;\n    }\n    var stackTop = input.stacks[jsSample.stackId];\n\n    // Functions in top->down order (root is last)\n    // We follow the stackTop.parentId trail and collect each visited frameId\n    var stack = [];\n    while (stackTop) {\n      stack.push(stackTop.frameId);\n      var frame = input.frames[stackTop.frameId];\n\n      // If our frame has not been indexed yet, index it\n      if (profile.frames[stackTop.frameId] === undefined) {\n        profile.frames[stackTop.frameId] = {\n          function: frame.name,\n          file: frame.resourceId ? input.resources[frame.resourceId] : undefined,\n          line: frame.line,\n          column: frame.column\n        };\n      }\n      stackTop = stackTop.parentId === undefined ? undefined : input.stacks[stackTop.parentId];\n    }\n    var sample = {\n      // convert ms timestamp to ns\n      elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),\n      stack_id: STACK_ID,\n      thread_id: THREAD_ID_STRING\n    };\n    profile['stacks'][STACK_ID] = stack;\n    profile['samples'][i] = sample;\n    STACK_ID++;\n  }\n  return profile;\n}\nexports.convertJSSelfProfileToSampledFormat = convertJSSelfProfileToSampledFormat;\nexports.createProfilingEventEnvelope = createProfilingEventEnvelope;\nexports.enrichWithThreadInformation = enrichWithThreadInformation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/profiling/utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/sdk.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/sdk.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar client = __webpack_require__(/*! ./client.js */ \"./node_modules/@sentry/browser/cjs/client.js\");\nvar helpers = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar globalhandlers = __webpack_require__(/*! ./integrations/globalhandlers.js */ \"./node_modules/@sentry/browser/cjs/integrations/globalhandlers.js\");\nvar trycatch = __webpack_require__(/*! ./integrations/trycatch.js */ \"./node_modules/@sentry/browser/cjs/integrations/trycatch.js\");\nvar breadcrumbs = __webpack_require__(/*! ./integrations/breadcrumbs.js */ \"./node_modules/@sentry/browser/cjs/integrations/breadcrumbs.js\");\nvar linkederrors = __webpack_require__(/*! ./integrations/linkederrors.js */ \"./node_modules/@sentry/browser/cjs/integrations/linkederrors.js\");\nvar httpcontext = __webpack_require__(/*! ./integrations/httpcontext.js */ \"./node_modules/@sentry/browser/cjs/integrations/httpcontext.js\");\nvar dedupe = __webpack_require__(/*! ./integrations/dedupe.js */ \"./node_modules/@sentry/browser/cjs/integrations/dedupe.js\");\nvar stackParsers = __webpack_require__(/*! ./stack-parsers.js */ \"./node_modules/@sentry/browser/cjs/stack-parsers.js\");\nvar fetch = __webpack_require__(/*! ./transports/fetch.js */ \"./node_modules/@sentry/browser/cjs/transports/fetch.js\");\nvar xhr = __webpack_require__(/*! ./transports/xhr.js */ \"./node_modules/@sentry/browser/cjs/transports/xhr.js\");\nvar defaultIntegrations = [new core.Integrations.InboundFilters(), new core.Integrations.FunctionToString(), new trycatch.TryCatch(), new breadcrumbs.Breadcrumbs(), new globalhandlers.GlobalHandlers(), new linkederrors.LinkedErrors(), new dedupe.Dedupe(), new httpcontext.HttpContext()];\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nfunction init() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (helpers.WINDOW.SENTRY_RELEASE && helpers.WINDOW.SENTRY_RELEASE.id) {\n      options.release = helpers.WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n  var clientOptions = _objectSpread(_objectSpread({}, options), {}, {\n    stackParser: utils.stackParserFromStackParserOptions(options.stackParser || stackParsers.defaultStackParser),\n    integrations: core.getIntegrationsToSetup(options),\n    transport: options.transport || (utils.supportsFetch() ? fetch.makeFetchTransport : xhr.makeXHRTransport)\n  });\n  core.initAndBind(client.BrowserClient, clientOptions);\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nfunction showReportDialog() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var hub = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : core.getCurrentHub();\n  // doesn't work without a document (React Native)\n  if (!helpers.WINDOW.document) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n  var _hub$getStackTop = hub.getStackTop(),\n    client = _hub$getStackTop.client,\n    scope = _hub$getStackTop.scope;\n  var dsn = options.dsn || client && client.getDsn();\n  if (!dsn) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n  if (scope) {\n    options.user = _objectSpread(_objectSpread({}, scope.getUser()), options.user);\n  }\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  var script = helpers.WINDOW.document.createElement('script');\n  script.async = true;\n  script.src = core.getReportDialogEndpoint(dsn, options);\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n  var injectionPoint = helpers.WINDOW.document.head || helpers.WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nfunction lastEventId() {\n  return core.getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction forceLoad() {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction onLoad(callback) {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nfunction flush(timeout) {\n  var client = core.getCurrentHub().getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Cannot flush events. No client defined.');\n  return utils.resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nfunction close(timeout) {\n  var client = core.getCurrentHub().getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return utils.resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrap(fn) {\n  return helpers.wrap(fn)();\n}\nfunction startSessionOnHub(hub) {\n  hub.startSession({\n    ignoreDuration: true\n  });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n  if (typeof helpers.WINDOW.document === 'undefined') {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n  var hub = core.getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  utils.addInstrumentationHandler('history', function (_ref) {\n    var from = _ref.from,\n      to = _ref.to;\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(core.getCurrentHub());\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nfunction captureUserFeedback(feedback) {\n  var client = core.getCurrentHub().getClient();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\nexports.captureUserFeedback = captureUserFeedback;\nexports.close = close;\nexports.defaultIntegrations = defaultIntegrations;\nexports.flush = flush;\nexports.forceLoad = forceLoad;\nexports.init = init;\nexports.lastEventId = lastEventId;\nexports.onLoad = onLoad;\nexports.showReportDialog = showReportDialog;\nexports.wrap = wrap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy9zZGsuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxJQUFBQSxtQkFBQSxJQUNBLElBQUFDLElBQUEsQ0FBQUMsWUFBQSxDQUFBQyxjQUFBLElBQ0EsSUFBQUYsSUFBQSxDQUFBQyxZQUFBLENBQUFFLGdCQUFBLElBQ0EsSUFBQUMsUUFBQSxDQUFBQyxRQUFBLElBQ0EsSUFBQUMsV0FBQSxDQUFBQyxXQUFBLElBQ0EsSUFBQUMsY0FBQSxDQUFBQyxjQUFBLElBQ0EsSUFBQUMsWUFBQSxDQUFBQyxZQUFBLElBQ0EsSUFBQUMsTUFBQSxDQUFBQyxNQUFBLElBQ0EsSUFBQUMsV0FBQSxDQUFBQyxXQUFBLEdBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLEtBQUE7RUFBQSxJQUFBQyxPQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUNBLElBQUFELE9BQUEsQ0FBQWxCLG1CQUFBLEtBQUFxQixTQUFBO0lBQ0FILE9BQUEsQ0FBQWxCLG1CQUFBLEdBQUFBLG1CQUFBO0VBQ0E7RUFDQSxJQUFBa0IsT0FBQSxDQUFBSSxPQUFBLEtBQUFELFNBQUE7SUFDQTtJQUNBLFdBQUFFLGtCQUFBO01BQ0FMLE9BQUEsQ0FBQUksT0FBQSxHQUFBQyxrQkFBQTtJQUNBOztJQUVBO0lBQ0EsSUFBQUMsT0FBQSxDQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUYsT0FBQSxDQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsRUFBQTtNQUNBVCxPQUFBLENBQUFJLE9BQUEsR0FBQUUsT0FBQSxDQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsRUFBQTtJQUNBO0VBQ0E7RUFDQSxJQUFBVCxPQUFBLENBQUFVLG1CQUFBLEtBQUFQLFNBQUE7SUFDQUgsT0FBQSxDQUFBVSxtQkFBQTtFQUNBO0VBQ0EsSUFBQVYsT0FBQSxDQUFBVyxpQkFBQSxLQUFBUixTQUFBO0lBQ0FILE9BQUEsQ0FBQVcsaUJBQUE7RUFDQTtFQUVBLElBQUFDLGFBQUEsR0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQ0FiLE9BQUE7SUFDQWMsV0FBQSxFQUFBQyxLQUFBLENBQUFDLGlDQUFBLENBQUFoQixPQUFBLENBQUFjLFdBQUEsSUFBQUcsWUFBQSxDQUFBQyxrQkFBQTtJQUNBQyxZQUFBLEVBQUFwQyxJQUFBLENBQUFxQyxzQkFBQSxDQUFBcEIsT0FBQTtJQUNBcUIsU0FBQSxFQUFBckIsT0FBQSxDQUFBcUIsU0FBQSxLQUFBTixLQUFBLENBQUFPLGFBQUEsS0FBQUMsS0FBQSxDQUFBQyxrQkFBQSxHQUFBQyxHQUFBLENBQUFDLGdCQUFBO0VBQUEsRUFDQTtFQUVBM0MsSUFBQSxDQUFBNEMsV0FBQSxDQUFBQyxNQUFBLENBQUFDLGFBQUEsRUFBQWpCLGFBQUE7RUFFQSxJQUFBWixPQUFBLENBQUFVLG1CQUFBO0lBQ0FvQixvQkFBQTtFQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLGlCQUFBO0VBQUEsSUFBQS9CLE9BQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBO0VBQUEsSUFBQStCLEdBQUEsR0FBQS9CLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFBbEIsSUFBQSxDQUFBa0QsYUFBQTtFQUNBO0VBQ0EsS0FBQTNCLE9BQUEsQ0FBQUMsTUFBQSxDQUFBMkIsUUFBQTtJQUNBLFFBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBcEIsS0FBQSxDQUFBcUIsTUFBQSxDQUFBQyxLQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFDLGdCQUFBLEdBQUFOLEdBQUEsQ0FBQU8sV0FBQTtJQUFBWCxNQUFBLEdBQUFVLGdCQUFBLENBQUFWLE1BQUE7SUFBQVksS0FBQSxHQUFBRixnQkFBQSxDQUFBRSxLQUFBO0VBQ0EsSUFBQUMsR0FBQSxHQUFBekMsT0FBQSxDQUFBeUMsR0FBQSxJQUFBYixNQUFBLElBQUFBLE1BQUEsQ0FBQWMsTUFBQTtFQUNBLEtBQUFELEdBQUE7SUFDQSxRQUFBTixnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQXBCLEtBQUEsQ0FBQXFCLE1BQUEsQ0FBQUMsS0FBQTtJQUNBO0VBQ0E7RUFFQSxJQUFBRyxLQUFBO0lBQ0F4QyxPQUFBLENBQUEyQyxJQUFBLEdBQUE5QixhQUFBLENBQUFBLGFBQUEsS0FDQTJCLEtBQUEsQ0FBQUksT0FBQSxLQUNBNUMsT0FBQSxDQUFBMkMsSUFBQSxDQUNBO0VBQ0E7RUFFQSxLQUFBM0MsT0FBQSxDQUFBNkMsT0FBQTtJQUNBN0MsT0FBQSxDQUFBNkMsT0FBQSxHQUFBYixHQUFBLENBQUFjLFdBQUE7RUFDQTtFQUVBLElBQUFDLE1BQUEsR0FBQXpDLE9BQUEsQ0FBQUMsTUFBQSxDQUFBMkIsUUFBQSxDQUFBYyxhQUFBO0VBQ0FELE1BQUEsQ0FBQUUsS0FBQTtFQUNBRixNQUFBLENBQUFHLEdBQUEsR0FBQW5FLElBQUEsQ0FBQW9FLHVCQUFBLENBQUFWLEdBQUEsRUFBQXpDLE9BQUE7RUFFQSxJQUFBQSxPQUFBLENBQUFvRCxNQUFBO0lBQ0FMLE1BQUEsQ0FBQU0sTUFBQSxHQUFBckQsT0FBQSxDQUFBb0QsTUFBQTtFQUNBO0VBRUEsSUFBQUUsY0FBQSxHQUFBaEQsT0FBQSxDQUFBQyxNQUFBLENBQUEyQixRQUFBLENBQUFxQixJQUFBLElBQUFqRCxPQUFBLENBQUFDLE1BQUEsQ0FBQTJCLFFBQUEsQ0FBQXNCLElBQUE7RUFDQSxJQUFBRixjQUFBO0lBQ0FBLGNBQUEsQ0FBQUcsV0FBQSxDQUFBVixNQUFBO0VBQ0E7SUFDQSxRQUFBWixnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQXBCLEtBQUEsQ0FBQXFCLE1BQUEsQ0FBQUMsS0FBQTtFQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFTLFlBQUE7RUFDQSxPQUFBL0QsSUFBQSxDQUFBa0QsYUFBQSxHQUFBYSxXQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBWSxVQUFBO0VBQ0E7QUFBQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFOLE9BQUFPLFFBQUE7RUFDQUEsUUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxNQUFBQyxPQUFBO0VBQ0EsSUFBQWpDLE1BQUEsR0FBQTdDLElBQUEsQ0FBQWtELGFBQUEsR0FBQTZCLFNBQUE7RUFDQSxJQUFBbEMsTUFBQTtJQUNBLE9BQUFBLE1BQUEsQ0FBQWdDLEtBQUEsQ0FBQUMsT0FBQTtFQUNBO0VBQ0EsUUFBQTFCLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBcEIsS0FBQSxDQUFBcUIsTUFBQSxDQUFBMkIsSUFBQTtFQUNBLE9BQUFoRCxLQUFBLENBQUFpRCxtQkFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxNQUFBSixPQUFBO0VBQ0EsSUFBQWpDLE1BQUEsR0FBQTdDLElBQUEsQ0FBQWtELGFBQUEsR0FBQTZCLFNBQUE7RUFDQSxJQUFBbEMsTUFBQTtJQUNBLE9BQUFBLE1BQUEsQ0FBQXFDLEtBQUEsQ0FBQUosT0FBQTtFQUNBO0VBQ0EsUUFBQTFCLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBcEIsS0FBQSxDQUFBcUIsTUFBQSxDQUFBMkIsSUFBQTtFQUNBLE9BQUFoRCxLQUFBLENBQUFpRCxtQkFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBRSxLQUFBQyxFQUFBO0VBQ0EsT0FBQTdELE9BQUEsQ0FBQTRELElBQUEsQ0FBQUMsRUFBQTtBQUNBO0FBRUEsU0FBQUMsa0JBQUFwQyxHQUFBO0VBQ0FBLEdBQUEsQ0FBQXFDLFlBQUE7SUFBQUMsY0FBQTtFQUFBO0VBQ0F0QyxHQUFBLENBQUF1QyxjQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQXpDLHFCQUFBO0VBQ0EsV0FBQXhCLE9BQUEsQ0FBQUMsTUFBQSxDQUFBMkIsUUFBQTtJQUNBLFFBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUNBcEIsS0FBQSxDQUFBcUIsTUFBQSxDQUFBMkIsSUFBQTtJQUNBO0VBQ0E7RUFFQSxJQUFBL0IsR0FBQSxHQUFBakQsSUFBQSxDQUFBa0QsYUFBQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxLQUFBRCxHQUFBLENBQUF1QyxjQUFBO0lBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBSCxpQkFBQSxDQUFBcEMsR0FBQTs7RUFFQTtFQUNBakIsS0FBQSxDQUFBeUQseUJBQUEsc0JBQUFDLElBQUE7SUFBQSxJQUFBQyxJQUFBLEdBQUFELElBQUEsQ0FBQUMsSUFBQTtNQUFBQyxFQUFBLEdBQUFGLElBQUEsQ0FBQUUsRUFBQTtJQUNBO0lBQ0EsTUFBQUQsSUFBQSxLQUFBdkUsU0FBQSxJQUFBdUUsSUFBQSxLQUFBQyxFQUFBO01BQ0FQLGlCQUFBLENBQUFyRixJQUFBLENBQUFrRCxhQUFBO0lBQ0E7RUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQUEyQyxvQkFBQUMsUUFBQTtFQUNBLElBQUFqRCxNQUFBLEdBQUE3QyxJQUFBLENBQUFrRCxhQUFBLEdBQUE2QixTQUFBO0VBQ0EsSUFBQWxDLE1BQUE7SUFDQUEsTUFBQSxDQUFBZ0QsbUJBQUEsQ0FBQUMsUUFBQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvc2RrLnRzP2YzYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHtcbiAgZ2V0Q3VycmVudEh1YixcbiAgZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCxcbiAgZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQsXG4gIGluaXRBbmRCaW5kLFxuICBJbnRlZ3JhdGlvbnMgYXMgQ29yZUludGVncmF0aW9ucyxcbn0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB0eXBlIHsgVXNlckZlZWRiYWNrIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQge1xuICBhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyLFxuICBsb2dnZXIsXG4gIHJlc29sdmVkU3luY1Byb21pc2UsXG4gIHN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyxcbiAgc3VwcG9ydHNGZXRjaCxcbn0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgQnJvd3NlckNsaWVudE9wdGlvbnMsIEJyb3dzZXJPcHRpb25zIH0gZnJvbSAnLi9jbGllbnQnO1xuaW1wb3J0IHsgQnJvd3NlckNsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB0eXBlIHsgUmVwb3J0RGlhbG9nT3B0aW9ucyB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBXSU5ET1csIHdyYXAgYXMgaW50ZXJuYWxXcmFwIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IEJyZWFkY3J1bWJzLCBEZWR1cGUsIEdsb2JhbEhhbmRsZXJzLCBIdHRwQ29udGV4dCwgTGlua2VkRXJyb3JzLCBUcnlDYXRjaCB9IGZyb20gJy4vaW50ZWdyYXRpb25zJztcbmltcG9ydCB7IGRlZmF1bHRTdGFja1BhcnNlciB9IGZyb20gJy4vc3RhY2stcGFyc2Vycyc7XG5pbXBvcnQgeyBtYWtlRmV0Y2hUcmFuc3BvcnQsIG1ha2VYSFJUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydHMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEludGVncmF0aW9ucyA9IFtcbiAgbmV3IENvcmVJbnRlZ3JhdGlvbnMuSW5ib3VuZEZpbHRlcnMoKSxcbiAgbmV3IENvcmVJbnRlZ3JhdGlvbnMuRnVuY3Rpb25Ub1N0cmluZygpLFxuICBuZXcgVHJ5Q2F0Y2goKSxcbiAgbmV3IEJyZWFkY3J1bWJzKCksXG4gIG5ldyBHbG9iYWxIYW5kbGVycygpLFxuICBuZXcgTGlua2VkRXJyb3JzKCksXG4gIG5ldyBEZWR1cGUoKSxcbiAgbmV3IEh0dHBDb250ZXh0KCksXG5dO1xuXG4vKipcbiAqIEEgbWFnaWMgc3RyaW5nIHRoYXQgYnVpbGQgdG9vbGluZyBjYW4gbGV2ZXJhZ2UgaW4gb3JkZXIgdG8gaW5qZWN0IGEgcmVsZWFzZSB2YWx1ZSBpbnRvIHRoZSBTREsuXG4gKi9cbmRlY2xhcmUgY29uc3QgX19TRU5UUllfUkVMRUFTRV9fOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIFNlbnRyeSBCcm93c2VyIFNESyBDbGllbnQuXG4gKlxuICogVG8gdXNlIHRoaXMgU0RLLCBjYWxsIHRoZSB7QGxpbmsgaW5pdH0gZnVuY3Rpb24gYXMgZWFybHkgYXMgcG9zc2libGUgd2hlblxuICogbG9hZGluZyB0aGUgd2ViIHBhZ2UuIFRvIHNldCBjb250ZXh0IGluZm9ybWF0aW9uIG9yIHNlbmQgbWFudWFsIGV2ZW50cywgdXNlXG4gKiB0aGUgcHJvdmlkZWQgbWV0aG9kcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICpcbiAqIGltcG9ydCB7IGluaXQgfSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuICpcbiAqIGluaXQoe1xuICogICBkc246ICdfX0RTTl9fJyxcbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgeyBjb25maWd1cmVTY29wZSB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBjb25maWd1cmVTY29wZSgoc2NvcGU6IFNjb3BlKSA9PiB7XG4gKiAgIHNjb3BlLnNldEV4dHJhKHsgYmF0dGVyeTogMC43IH0pO1xuICogICBzY29wZS5zZXRUYWcoeyB1c2VyX21vZGU6ICdhZG1pbicgfSk7XG4gKiAgIHNjb3BlLnNldFVzZXIoeyBpZDogJzQ3MTEnIH0pO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKlxuICogaW1wb3J0IHsgYWRkQnJlYWRjcnVtYiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG4gKiBhZGRCcmVhZGNydW1iKHtcbiAqICAgbWVzc2FnZTogJ015IEJyZWFkY3J1bWInLFxuICogICAvLyAuLi5cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqIFNlbnRyeS5jYXB0dXJlTWVzc2FnZSgnSGVsbG8sIHdvcmxkIScpO1xuICogU2VudHJ5LmNhcHR1cmVFeGNlcHRpb24obmV3IEVycm9yKCdHb29kIGJ5ZScpKTtcbiAqIFNlbnRyeS5jYXB0dXJlRXZlbnQoe1xuICogICBtZXNzYWdlOiAnTWFudWFsJyxcbiAqICAgc3RhY2t0cmFjZTogW1xuICogICAgIC8vIC4uLlxuICogICBdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBCcm93c2VyT3B0aW9uc30gZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdChvcHRpb25zOiBCcm93c2VyT3B0aW9ucyA9IHt9KTogdm9pZCB7XG4gIGlmIChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9IGRlZmF1bHRJbnRlZ3JhdGlvbnM7XG4gIH1cbiAgaWYgKG9wdGlvbnMucmVsZWFzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVGhpcyBhbGxvd3MgYnVpbGQgdG9vbGluZyB0byBmaW5kLWFuZC1yZXBsYWNlIF9fU0VOVFJZX1JFTEVBU0VfXyB0byBpbmplY3QgYSByZWxlYXNlIHZhbHVlXG4gICAgaWYgKHR5cGVvZiBfX1NFTlRSWV9SRUxFQVNFX18gPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zLnJlbGVhc2UgPSBfX1NFTlRSWV9SRUxFQVNFX187XG4gICAgfVxuXG4gICAgLy8gVGhpcyBzdXBwb3J0cyB0aGUgdmFyaWFibGUgdGhhdCBzZW50cnktd2VicGFjay1wbHVnaW4gaW5qZWN0c1xuICAgIGlmIChXSU5ET1cuU0VOVFJZX1JFTEVBU0UgJiYgV0lORE9XLlNFTlRSWV9SRUxFQVNFLmlkKSB7XG4gICAgICBvcHRpb25zLnJlbGVhc2UgPSBXSU5ET1cuU0VOVFJZX1JFTEVBU0UuaWQ7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZyA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMgPSB0cnVlO1xuICB9XG5cbiAgY29uc3QgY2xpZW50T3B0aW9uczogQnJvd3NlckNsaWVudE9wdGlvbnMgPSB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBzdGFja1BhcnNlcjogc3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zKG9wdGlvbnMuc3RhY2tQYXJzZXIgfHwgZGVmYXVsdFN0YWNrUGFyc2VyKSxcbiAgICBpbnRlZ3JhdGlvbnM6IGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucyksXG4gICAgdHJhbnNwb3J0OiBvcHRpb25zLnRyYW5zcG9ydCB8fCAoc3VwcG9ydHNGZXRjaCgpID8gbWFrZUZldGNoVHJhbnNwb3J0IDogbWFrZVhIUlRyYW5zcG9ydCksXG4gIH07XG5cbiAgaW5pdEFuZEJpbmQoQnJvd3NlckNsaWVudCwgY2xpZW50T3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMuYXV0b1Nlc3Npb25UcmFja2luZykge1xuICAgIHN0YXJ0U2Vzc2lvblRyYWNraW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcmVzZW50IHRoZSB1c2VyIHdpdGggYSByZXBvcnQgZGlhbG9nLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEV2ZXJ5dGhpbmcgaXMgb3B0aW9uYWwsIHdlIHRyeSB0byBmZXRjaCBhbGwgaW5mbyBuZWVkIGZyb20gdGhlIGdsb2JhbCBzY29wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dSZXBvcnREaWFsb2cob3B0aW9uczogUmVwb3J0RGlhbG9nT3B0aW9ucyA9IHt9LCBodWI6IEh1YiA9IGdldEN1cnJlbnRIdWIoKSk6IHZvaWQge1xuICAvLyBkb2Vzbid0IHdvcmsgd2l0aG91dCBhIGRvY3VtZW50IChSZWFjdCBOYXRpdmUpXG4gIGlmICghV0lORE9XLmRvY3VtZW50KSB7XG4gICAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci5lcnJvcignR2xvYmFsIGRvY3VtZW50IG5vdCBkZWZpbmVkIGluIHNob3dSZXBvcnREaWFsb2cgY2FsbCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgY2xpZW50LCBzY29wZSB9ID0gaHViLmdldFN0YWNrVG9wKCk7XG4gIGNvbnN0IGRzbiA9IG9wdGlvbnMuZHNuIHx8IChjbGllbnQgJiYgY2xpZW50LmdldERzbigpKTtcbiAgaWYgKCFkc24pIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiYgbG9nZ2VyLmVycm9yKCdEU04gbm90IGNvbmZpZ3VyZWQgZm9yIHNob3dSZXBvcnREaWFsb2cgY2FsbCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzY29wZSkge1xuICAgIG9wdGlvbnMudXNlciA9IHtcbiAgICAgIC4uLnNjb3BlLmdldFVzZXIoKSxcbiAgICAgIC4uLm9wdGlvbnMudXNlcixcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLmV2ZW50SWQpIHtcbiAgICBvcHRpb25zLmV2ZW50SWQgPSBodWIubGFzdEV2ZW50SWQoKTtcbiAgfVxuXG4gIGNvbnN0IHNjcmlwdCA9IFdJTkRPVy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgc2NyaXB0LnNyYyA9IGdldFJlcG9ydERpYWxvZ0VuZHBvaW50KGRzbiwgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMub25Mb2FkKSB7XG4gICAgc2NyaXB0Lm9ubG9hZCA9IG9wdGlvbnMub25Mb2FkO1xuICB9XG5cbiAgY29uc3QgaW5qZWN0aW9uUG9pbnQgPSBXSU5ET1cuZG9jdW1lbnQuaGVhZCB8fCBXSU5ET1cuZG9jdW1lbnQuYm9keTtcbiAgaWYgKGluamVjdGlvblBvaW50KSB7XG4gICAgaW5qZWN0aW9uUG9pbnQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfSBlbHNlIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiYgbG9nZ2VyLmVycm9yKCdOb3QgaW5qZWN0aW5nIHJlcG9ydCBkaWFsb2cuIE5vIGluamVjdGlvbiBwb2ludCBmb3VuZCBpbiBIVE1MJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBnZXR0ZXIgZm9yIGxhc3RFdmVudElkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIGEgY2FwdHVyZWQgZXZlbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXN0RXZlbnRJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gZ2V0Q3VycmVudEh1YigpLmxhc3RFdmVudElkKCk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBoZXJlIHRvIGJlIEFQSSBjb21wYXRpYmxlIHdpdGggdGhlIGxvYWRlci5cbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlTG9hZCgpOiB2b2lkIHtcbiAgLy8gTm9vcFxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaGVyZSB0byBiZSBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBsb2FkZXIuXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWQoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgY2FsbGJhY2soKTtcbn1cblxuLyoqXG4gKiBDYWxsIGBmbHVzaCgpYCBvbiB0aGUgY3VycmVudCBjbGllbnQsIGlmIHRoZXJlIGlzIG9uZS4gU2VlIHtAbGluayBDbGllbnQuZmx1c2h9LlxuICpcbiAqIEBwYXJhbSB0aW1lb3V0IE1heGltdW0gdGltZSBpbiBtcyB0aGUgY2xpZW50IHNob3VsZCB3YWl0IHRvIGZsdXNoIGl0cyBldmVudCBxdWV1ZS4gT21pdHRpbmcgdGhpcyBwYXJhbWV0ZXIgd2lsbCBjYXVzZVxuICogdGhlIGNsaWVudCB0byB3YWl0IHVudGlsIGFsbCBldmVudHMgYXJlIHNlbnQgYmVmb3JlIHJlc29sdmluZyB0aGUgcHJvbWlzZS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byBgdHJ1ZWAgaWYgdGhlIHF1ZXVlIHN1Y2Nlc3NmdWxseSBkcmFpbnMgYmVmb3JlIHRoZSB0aW1lb3V0LCBvciBgZmFsc2VgIGlmIGl0XG4gKiBkb2Vzbid0IChvciBpZiB0aGVyZSdzIG5vIGNsaWVudCBkZWZpbmVkKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQ/OiBudW1iZXIpOiBQcm9taXNlTGlrZTxib29sZWFuPiB7XG4gIGNvbnN0IGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQ8QnJvd3NlckNsaWVudD4oKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIHJldHVybiBjbGllbnQuZmx1c2godGltZW91dCk7XG4gIH1cbiAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci53YXJuKCdDYW5ub3QgZmx1c2ggZXZlbnRzLiBObyBjbGllbnQgZGVmaW5lZC4nKTtcbiAgcmV0dXJuIHJlc29sdmVkU3luY1Byb21pc2UoZmFsc2UpO1xufVxuXG4vKipcbiAqIENhbGwgYGNsb3NlKClgIG9uIHRoZSBjdXJyZW50IGNsaWVudCwgaWYgdGhlcmUgaXMgb25lLiBTZWUge0BsaW5rIENsaWVudC5jbG9zZX0uXG4gKlxuICogQHBhcmFtIHRpbWVvdXQgTWF4aW11bSB0aW1lIGluIG1zIHRoZSBjbGllbnQgc2hvdWxkIHdhaXQgdG8gZmx1c2ggaXRzIGV2ZW50IHF1ZXVlIGJlZm9yZSBzaHV0dGluZyBkb3duLiBPbWl0dGluZyB0aGlzXG4gKiBwYXJhbWV0ZXIgd2lsbCBjYXVzZSB0aGUgY2xpZW50IHRvIHdhaXQgdW50aWwgYWxsIGV2ZW50cyBhcmUgc2VudCBiZWZvcmUgZGlzYWJsaW5nIGl0c2VsZi5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byBgdHJ1ZWAgaWYgdGhlIHF1ZXVlIHN1Y2Nlc3NmdWxseSBkcmFpbnMgYmVmb3JlIHRoZSB0aW1lb3V0LCBvciBgZmFsc2VgIGlmIGl0XG4gKiBkb2Vzbid0IChvciBpZiB0aGVyZSdzIG5vIGNsaWVudCBkZWZpbmVkKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKHRpbWVvdXQ/OiBudW1iZXIpOiBQcm9taXNlTGlrZTxib29sZWFuPiB7XG4gIGNvbnN0IGNsaWVudCA9IGdldEN1cnJlbnRIdWIoKS5nZXRDbGllbnQ8QnJvd3NlckNsaWVudD4oKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIHJldHVybiBjbGllbnQuY2xvc2UodGltZW91dCk7XG4gIH1cbiAgX19ERUJVR19CVUlMRF9fICYmIGxvZ2dlci53YXJuKCdDYW5ub3QgZmx1c2ggZXZlbnRzIGFuZCBkaXNhYmxlIFNESy4gTm8gY2xpZW50IGRlZmluZWQuJyk7XG4gIHJldHVybiByZXNvbHZlZFN5bmNQcm9taXNlKGZhbHNlKTtcbn1cblxuLyoqXG4gKiBXcmFwIGNvZGUgd2l0aGluIGEgdHJ5L2NhdGNoIGJsb2NrIHNvIHRoZSBTREsgaXMgYWJsZSB0byBjYXB0dXJlIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0gZm4gQSBmdW5jdGlvbiB0byB3cmFwLlxuICpcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2Ygd3JhcHBlZCBmdW5jdGlvbiBjYWxsLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXAoZm46ICguLi5hcmdzOiBhbnkpID0+IGFueSk6IGFueSB7XG4gIHJldHVybiBpbnRlcm5hbFdyYXAoZm4pKCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0U2Vzc2lvbk9uSHViKGh1YjogSHViKTogdm9pZCB7XG4gIGh1Yi5zdGFydFNlc3Npb24oeyBpZ25vcmVEdXJhdGlvbjogdHJ1ZSB9KTtcbiAgaHViLmNhcHR1cmVTZXNzaW9uKCk7XG59XG5cbi8qKlxuICogRW5hYmxlIGF1dG9tYXRpYyBTZXNzaW9uIFRyYWNraW5nIGZvciB0aGUgaW5pdGlhbCBwYWdlIGxvYWQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0U2Vzc2lvblRyYWNraW5nKCk6IHZvaWQge1xuICBpZiAodHlwZW9mIFdJTkRPVy5kb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiZcbiAgICAgIGxvZ2dlci53YXJuKCdTZXNzaW9uIHRyYWNraW5nIGluIG5vbi1icm93c2VyIGVudmlyb25tZW50IHdpdGggQHNlbnRyeS9icm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuXG4gIC8vIFRoZSBvbmx5IHdheSBmb3IgdGhpcyB0byBiZSBmYWxzZSBpcyBmb3IgdGhlcmUgdG8gYmUgYSB2ZXJzaW9uIG1pc21hdGNoIGJldHdlZW4gQHNlbnRyeS9icm93c2VyICg+PSA2LjAuMCkgYW5kXG4gIC8vIEBzZW50cnkvaHViICg8IDUuMjcuMCkuIEluIHRoZSBzaW1wbGUgY2FzZSwgdGhlcmUgd29uJ3QgZXZlciBiZSBzdWNoIGEgbWlzbWF0Y2gsIGJlY2F1c2UgdGhlIHR3byBwYWNrYWdlcyBhcmVcbiAgLy8gcGlubmVkIGF0IHRoZSBzYW1lIHZlcnNpb24gaW4gcGFja2FnZS5qc29uLCBidXQgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgaXQncyBwb3NzaWJsZS4gU2VlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzMyMDcgYW5kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzMyMzQgYW5kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzMyNzguXG4gIGlmICghaHViLmNhcHR1cmVTZXNzaW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIHNlc3Npb24gZHVyYXRpb24gZm9yIGJyb3dzZXIgc2Vzc2lvbnMgZG9lcyBub3QgdHJhY2sgYSBtZWFuaW5nZnVsXG4gIC8vIGNvbmNlcHQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIG1ldHJpYy5cbiAgLy8gQXV0b21hdGljYWxseSBjYXB0dXJlZCBzZXNzaW9ucyBhcmUgYWtpbiB0byBwYWdlIHZpZXdzLCBhbmQgdGh1cyB3ZVxuICAvLyBkaXNjYXJkIHRoZWlyIGR1cmF0aW9uLlxuICBzdGFydFNlc3Npb25Pbkh1YihodWIpO1xuXG4gIC8vIFdlIHdhbnQgdG8gY3JlYXRlIGEgc2Vzc2lvbiBmb3IgZXZlcnkgbmF2aWdhdGlvbiBhcyB3ZWxsXG4gIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoJ2hpc3RvcnknLCAoeyBmcm9tLCB0byB9KSA9PiB7XG4gICAgLy8gRG9uJ3QgY3JlYXRlIGFuIGFkZGl0aW9uYWwgc2Vzc2lvbiBmb3IgdGhlIGluaXRpYWwgcm91dGUgb3IgaWYgdGhlIGxvY2F0aW9uIGRpZCBub3QgY2hhbmdlXG4gICAgaWYgKCEoZnJvbSA9PT0gdW5kZWZpbmVkIHx8IGZyb20gPT09IHRvKSkge1xuICAgICAgc3RhcnRTZXNzaW9uT25IdWIoZ2V0Q3VycmVudEh1YigpKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIENhcHR1cmVzIHVzZXIgZmVlZGJhY2sgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVVc2VyRmVlZGJhY2soZmVlZGJhY2s6IFVzZXJGZWVkYmFjayk6IHZvaWQge1xuICBjb25zdCBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50PEJyb3dzZXJDbGllbnQ+KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQuY2FwdHVyZVVzZXJGZWVkYmFjayhmZWVkYmFjayk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJkZWZhdWx0SW50ZWdyYXRpb25zIiwiY29yZSIsIkludGVncmF0aW9ucyIsIkluYm91bmRGaWx0ZXJzIiwiRnVuY3Rpb25Ub1N0cmluZyIsInRyeWNhdGNoIiwiVHJ5Q2F0Y2giLCJicmVhZGNydW1icyIsIkJyZWFkY3J1bWJzIiwiZ2xvYmFsaGFuZGxlcnMiLCJHbG9iYWxIYW5kbGVycyIsImxpbmtlZGVycm9ycyIsIkxpbmtlZEVycm9ycyIsImRlZHVwZSIsIkRlZHVwZSIsImh0dHBjb250ZXh0IiwiSHR0cENvbnRleHQiLCJpbml0Iiwib3B0aW9ucyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlbGVhc2UiLCJfX1NFTlRSWV9SRUxFQVNFX18iLCJoZWxwZXJzIiwiV0lORE9XIiwiU0VOVFJZX1JFTEVBU0UiLCJpZCIsImF1dG9TZXNzaW9uVHJhY2tpbmciLCJzZW5kQ2xpZW50UmVwb3J0cyIsImNsaWVudE9wdGlvbnMiLCJfb2JqZWN0U3ByZWFkIiwic3RhY2tQYXJzZXIiLCJ1dGlscyIsInN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyIsInN0YWNrUGFyc2VycyIsImRlZmF1bHRTdGFja1BhcnNlciIsImludGVncmF0aW9ucyIsImdldEludGVncmF0aW9uc1RvU2V0dXAiLCJ0cmFuc3BvcnQiLCJzdXBwb3J0c0ZldGNoIiwiZmV0Y2giLCJtYWtlRmV0Y2hUcmFuc3BvcnQiLCJ4aHIiLCJtYWtlWEhSVHJhbnNwb3J0IiwiaW5pdEFuZEJpbmQiLCJjbGllbnQiLCJCcm93c2VyQ2xpZW50Iiwic3RhcnRTZXNzaW9uVHJhY2tpbmciLCJzaG93UmVwb3J0RGlhbG9nIiwiaHViIiwiZ2V0Q3VycmVudEh1YiIsImRvY3VtZW50IiwiX19TRU5UUllfREVCVUdfXyIsImxvZ2dlciIsImVycm9yIiwiX2h1YiRnZXRTdGFja1RvcCIsImdldFN0YWNrVG9wIiwic2NvcGUiLCJkc24iLCJnZXREc24iLCJ1c2VyIiwiZ2V0VXNlciIsImV2ZW50SWQiLCJsYXN0RXZlbnRJZCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJhc3luYyIsInNyYyIsImdldFJlcG9ydERpYWxvZ0VuZHBvaW50Iiwib25Mb2FkIiwib25sb2FkIiwiaW5qZWN0aW9uUG9pbnQiLCJoZWFkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZm9yY2VMb2FkIiwiY2FsbGJhY2siLCJmbHVzaCIsInRpbWVvdXQiLCJnZXRDbGllbnQiLCJ3YXJuIiwicmVzb2x2ZWRTeW5jUHJvbWlzZSIsImNsb3NlIiwid3JhcCIsImZuIiwic3RhcnRTZXNzaW9uT25IdWIiLCJzdGFydFNlc3Npb24iLCJpZ25vcmVEdXJhdGlvbiIsImNhcHR1cmVTZXNzaW9uIiwiYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsIl9yZWYiLCJmcm9tIiwidG8iLCJjYXB0dXJlVXNlckZlZWRiYWNrIiwiZmVlZGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/sdk.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/stack-parsers.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/stack-parsers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n// global reference to slice\nvar UNKNOWN_FUNCTION = '?';\nvar OPERA10_PRIORITY = 10;\nvar OPERA11_PRIORITY = 20;\nvar CHROME_PRIORITY = 30;\nvar WINJS_PRIORITY = 40;\nvar GECKO_PRIORITY = 50;\nfunction createFrame(filename, func, lineno, colno) {\n  var frame = {\n    filename: filename,\n    function: func,\n    in_app: true // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nvar chromeRegex = /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nvar chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nvar chrome = function chrome(line) {\n  var parts = chromeRegex.exec(line);\n  if (parts) {\n    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      var subMatch = chromeEvalRegex.exec(parts[2]);\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    var _extractSafariExtensi = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]),\n      _extractSafariExtensi2 = _slicedToArray(_extractSafariExtensi, 2),\n      func = _extractSafariExtensi2[0],\n      filename = _extractSafariExtensi2[1];\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n  return;\n};\nvar chromeStackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nvar geckoREgex = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nvar geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nvar gecko = function gecko(line) {\n  var parts = geckoREgex.exec(line);\n  if (parts) {\n    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      var subMatch = geckoEvalRegex.exec(parts[3]);\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    var filename = parts[3];\n    var func = parts[1] || UNKNOWN_FUNCTION;\n    var _extractSafariExtensi3 = extractSafariExtensionDetails(func, filename);\n    var _extractSafariExtensi4 = _slicedToArray(_extractSafariExtensi3, 2);\n    func = _extractSafariExtensi4[0];\n    filename = _extractSafariExtensi4[1];\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n  return;\n};\nvar geckoStackLineParser = [GECKO_PRIORITY, gecko];\nvar winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar winjs = function winjs(line) {\n  var parts = winjsRegex.exec(line);\n  return parts ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined) : undefined;\n};\nvar winjsStackLineParser = [WINJS_PRIORITY, winjs];\nvar opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\nvar opera10 = function opera10(line) {\n  var parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\nvar opera10StackLineParser = [OPERA10_PRIORITY, opera10];\nvar opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\nvar opera11 = function opera11(line) {\n  var parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\nvar opera11StackLineParser = [OPERA11_PRIORITY, opera11];\nvar defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\nvar defaultStackParser = utils.createStackParser.apply(utils, defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nvar extractSafariExtensionDetails = function extractSafariExtensionDetails(func, filename) {\n  var isSafariExtension = func.indexOf('safari-extension') !== -1;\n  var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n  return isSafariExtension || isSafariWebExtension ? [func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION, isSafariExtension ? \"safari-extension:\".concat(filename) : \"safari-web-extension:\".concat(filename)] : [func, filename];\n};\nexports.chromeStackLineParser = chromeStackLineParser;\nexports.defaultStackLineParsers = defaultStackLineParsers;\nexports.defaultStackParser = defaultStackParser;\nexports.geckoStackLineParser = geckoStackLineParser;\nexports.opera10StackLineParser = opera10StackLineParser;\nexports.opera11StackLineParser = opera11StackLineParser;\nexports.winjsStackLineParser = winjsStackLineParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/stack-parsers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/transports/fetch.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/transports/fetch.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils$1 = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar utils = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/browser/cjs/transports/utils.js\");\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nfunction makeFetchTransport(options) {\n  var nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : utils.getNativeFetchImplementation();\n  var pendingBodySize = 0;\n  var pendingCount = 0;\n  function makeRequest(request) {\n    var requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n    var requestOptions = _objectSpread({\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60000 && pendingCount < 15\n    }, options.fetchOptions);\n    try {\n      return nativeFetch(options.url, requestOptions).then(function (response) {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          }\n        };\n      });\n    } catch (e) {\n      utils.clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return utils$1.rejectedSyncPromise(e);\n    }\n  }\n  return core.createTransport(options, makeRequest);\n}\nexports.makeFetchTransport = makeFetchTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy90cmFuc3BvcnRzL2ZldGNoLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxtQkFDQUMsT0FBQSxFQUVBO0VBQUEsSUFEQUMsV0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBQUcsS0FBQSxDQUFBQyw0QkFBQTtFQUVBLElBQUFDLGVBQUE7RUFDQSxJQUFBQyxZQUFBO0VBRUEsU0FBQUMsWUFBQUMsT0FBQTtJQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQSxDQUFBRSxJQUFBLENBQUFULE1BQUE7SUFDQUksZUFBQSxJQUFBSSxXQUFBO0lBQ0FILFlBQUE7SUFFQSxJQUFBSyxjQUFBLEdBQUFDLGFBQUE7TUFDQUYsSUFBQSxFQUFBRixPQUFBLENBQUFFLElBQUE7TUFDQUcsTUFBQTtNQUNBQyxjQUFBO01BQ0FDLE9BQUEsRUFBQWpCLE9BQUEsQ0FBQWlCLE9BQUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0FDLFNBQUEsRUFBQVgsZUFBQSxhQUFBQyxZQUFBO0lBQUEsR0FDQVIsT0FBQSxDQUFBbUIsWUFBQSxDQUNBO0lBRUE7TUFDQSxPQUFBbEIsV0FBQSxDQUFBRCxPQUFBLENBQUFvQixHQUFBLEVBQUFQLGNBQUEsRUFBQVEsSUFBQSxXQUFBQyxRQUFBO1FBQ0FmLGVBQUEsSUFBQUksV0FBQTtRQUNBSCxZQUFBO1FBQ0E7VUFDQWUsVUFBQSxFQUFBRCxRQUFBLENBQUFFLE1BQUE7VUFDQVAsT0FBQTtZQUNBLHdCQUFBSyxRQUFBLENBQUFMLE9BQUEsQ0FBQVEsR0FBQTtZQUNBLGVBQUFILFFBQUEsQ0FBQUwsT0FBQSxDQUFBUSxHQUFBO1VBQ0E7UUFDQTtNQUNBO0lBQ0EsU0FBQUMsQ0FBQTtNQUNBckIsS0FBQSxDQUFBc0IsOEJBQUE7TUFDQXBCLGVBQUEsSUFBQUksV0FBQTtNQUNBSCxZQUFBO01BQ0EsT0FBQW9CLE9BQUEsQ0FBQUMsbUJBQUEsQ0FBQUgsQ0FBQTtJQUNBO0VBQ0E7RUFFQSxPQUFBSSxJQUFBLENBQUFDLGVBQUEsQ0FBQS9CLE9BQUEsRUFBQVMsV0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL3RyYW5zcG9ydHMvZmV0Y2gudHM/ZTgyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVUcmFuc3BvcnQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBUcmFuc3BvcnQsIFRyYW5zcG9ydE1ha2VSZXF1ZXN0UmVzcG9uc2UsIFRyYW5zcG9ydFJlcXVlc3QgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IHJlamVjdGVkU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHR5cGUgeyBCcm93c2VyVHJhbnNwb3J0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBGZXRjaEltcGwgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNsZWFyQ2FjaGVkRmV0Y2hJbXBsZW1lbnRhdGlvbiwgZ2V0TmF0aXZlRmV0Y2hJbXBsZW1lbnRhdGlvbiB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBUcmFuc3BvcnQgdGhhdCB1c2VzIHRoZSBGZXRjaCBBUEkgdG8gc2VuZCBldmVudHMgdG8gU2VudHJ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUZldGNoVHJhbnNwb3J0KFxuICBvcHRpb25zOiBCcm93c2VyVHJhbnNwb3J0T3B0aW9ucyxcbiAgbmF0aXZlRmV0Y2g6IEZldGNoSW1wbCA9IGdldE5hdGl2ZUZldGNoSW1wbGVtZW50YXRpb24oKSxcbik6IFRyYW5zcG9ydCB7XG4gIGxldCBwZW5kaW5nQm9keVNpemUgPSAwO1xuICBsZXQgcGVuZGluZ0NvdW50ID0gMDtcblxuICBmdW5jdGlvbiBtYWtlUmVxdWVzdChyZXF1ZXN0OiBUcmFuc3BvcnRSZXF1ZXN0KTogUHJvbWlzZUxpa2U8VHJhbnNwb3J0TWFrZVJlcXVlc3RSZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3RTaXplID0gcmVxdWVzdC5ib2R5Lmxlbmd0aDtcbiAgICBwZW5kaW5nQm9keVNpemUgKz0gcmVxdWVzdFNpemU7XG4gICAgcGVuZGluZ0NvdW50Kys7XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0aW9uczogUmVxdWVzdEluaXQgPSB7XG4gICAgICBib2R5OiByZXF1ZXN0LmJvZHksXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIHJlZmVycmVyUG9saWN5OiAnb3JpZ2luJyxcbiAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgIC8vIE91dGdvaW5nIHJlcXVlc3RzIGFyZSB1c3VhbGx5IGNhbmNlbGxlZCB3aGVuIG5hdmlnYXRpbmcgdG8gYSBkaWZmZXJlbnQgcGFnZSwgY2F1c2luZyBhIFwiVHlwZUVycm9yOiBGYWlsZWQgdG9cbiAgICAgIC8vIGZldGNoXCIgZXJyb3IgYW5kIHNlbmRpbmcgYSBcIm5ldHdvcmtfZXJyb3JcIiBjbGllbnQtb3V0Y29tZSAtIGluIENocm9tZSwgdGhlIHJlcXVlc3Qgc3RhdHVzIHNob3dzIFwiKGNhbmNlbGxlZClcIi5cbiAgICAgIC8vIFRoZSBga2VlcGFsaXZlYCBmbGFnIGtlZXBzIG91dGdvaW5nIHJlcXVlc3RzIGFsaXZlLCBldmVuIHdoZW4gc3dpdGNoaW5nIHBhZ2VzLiBXZSB3YW50IHRoaXMgc2luY2Ugd2UncmVcbiAgICAgIC8vIGZyZXF1ZW50bHkgc2VuZGluZyBldmVudHMgcmlnaHQgYmVmb3JlIHRoZSB1c2VyIGlzIHN3aXRjaGluZyBwYWdlcyAoZWcuIHdoZW5maW5pc2hpbmcgbmF2aWdhdGlvbiB0cmFuc2FjdGlvbnMpLlxuICAgICAgLy8gR290Y2hhczpcbiAgICAgIC8vIC0gYGtlZXBhbGl2ZWAgaXNuJ3Qgc3VwcG9ydGVkIGJ5IEZpcmVmb3hcbiAgICAgIC8vIC0gQXMgcGVyIHNwZWMgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNodHRwLW5ldHdvcmstb3ItY2FjaGUtZmV0Y2gpOlxuICAgICAgLy8gICBJZiB0aGUgc3VtIG9mIGNvbnRlbnRMZW5ndGggYW5kIGluZmxpZ2h0S2VlcGFsaXZlQnl0ZXMgaXMgZ3JlYXRlciB0aGFuIDY0IGtpYmlieXRlcywgdGhlbiByZXR1cm4gYSBuZXR3b3JrIGVycm9yLlxuICAgICAgLy8gICBXZSB3aWxsIHRoZXJlZm9yZSBvbmx5IGFjdGl2YXRlIHRoZSBmbGFnIHdoZW4gd2UncmUgYmVsb3cgdGhhdCBsaW1pdC5cbiAgICAgIC8vIFRoZXJlIGlzIGFsc28gYSBsaW1pdCBvZiByZXF1ZXN0cyB0aGF0IGNhbiBiZSBvcGVuIGF0IHRoZSBzYW1lIHRpbWUsIHNvIHdlIGFsc28gbGltaXQgdGhpcyB0byAxNVxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvcHVsbC83NTUzIGZvciBkZXRhaWxzXG4gICAgICBrZWVwYWxpdmU6IHBlbmRpbmdCb2R5U2l6ZSA8PSA2MF8wMDAgJiYgcGVuZGluZ0NvdW50IDwgMTUsXG4gICAgICAuLi5vcHRpb25zLmZldGNoT3B0aW9ucyxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuYXRpdmVGZXRjaChvcHRpb25zLnVybCwgcmVxdWVzdE9wdGlvbnMpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBwZW5kaW5nQm9keVNpemUgLT0gcmVxdWVzdFNpemU7XG4gICAgICAgIHBlbmRpbmdDb3VudC0tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAneC1zZW50cnktcmF0ZS1saW1pdHMnOiByZXNwb25zZS5oZWFkZXJzLmdldCgnWC1TZW50cnktUmF0ZS1MaW1pdHMnKSxcbiAgICAgICAgICAgICdyZXRyeS1hZnRlcic6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdSZXRyeS1BZnRlcicpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjbGVhckNhY2hlZEZldGNoSW1wbGVtZW50YXRpb24oKTtcbiAgICAgIHBlbmRpbmdCb2R5U2l6ZSAtPSByZXF1ZXN0U2l6ZTtcbiAgICAgIHBlbmRpbmdDb3VudC0tO1xuICAgICAgcmV0dXJuIHJlamVjdGVkU3luY1Byb21pc2UoZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRyYW5zcG9ydChvcHRpb25zLCBtYWtlUmVxdWVzdCk7XG59XG4iXSwibmFtZXMiOlsibWFrZUZldGNoVHJhbnNwb3J0Iiwib3B0aW9ucyIsIm5hdGl2ZUZldGNoIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidXRpbHMiLCJnZXROYXRpdmVGZXRjaEltcGxlbWVudGF0aW9uIiwicGVuZGluZ0JvZHlTaXplIiwicGVuZGluZ0NvdW50IiwibWFrZVJlcXVlc3QiLCJyZXF1ZXN0IiwicmVxdWVzdFNpemUiLCJib2R5IiwicmVxdWVzdE9wdGlvbnMiLCJfb2JqZWN0U3ByZWFkIiwibWV0aG9kIiwicmVmZXJyZXJQb2xpY3kiLCJoZWFkZXJzIiwia2VlcGFsaXZlIiwiZmV0Y2hPcHRpb25zIiwidXJsIiwidGhlbiIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsImdldCIsImUiLCJjbGVhckNhY2hlZEZldGNoSW1wbGVtZW50YXRpb24iLCJ1dGlscyQxIiwicmVqZWN0ZWRTeW5jUHJvbWlzZSIsImNvcmUiLCJjcmVhdGVUcmFuc3BvcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/transports/fetch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/transports/offline.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/transports/offline.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction promisifyRequest(request) {\n  return new Promise(function (resolve, reject) {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = function () {\n      return resolve(request.result);\n    };\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = function () {\n      return reject(request.error);\n    };\n  });\n}\n\n/** Create or open an IndexedDb store */\nfunction createStore(dbName, storeName) {\n  var request = indexedDB.open(dbName);\n  request.onupgradeneeded = function () {\n    return request.result.createObjectStore(storeName);\n  };\n  var dbp = promisifyRequest(request);\n  return function (callback) {\n    return dbp.then(function (db) {\n      return callback(db.transaction(storeName, 'readwrite').objectStore(storeName));\n    });\n  };\n}\nfunction keys(store) {\n  return promisifyRequest(store.getAllKeys());\n}\n\n/** Insert into the store */\nfunction _insert(store, value, maxQueueSize) {\n  return store(function (store) {\n    return keys(store).then(function (keys) {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max.apply(Math, _toConsumableArray(keys).concat([0])) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nfunction _pop(store) {\n  return store(function (store) {\n    return keys(store).then(function (keys) {\n      if (keys.length === 0) {\n        return undefined;\n      }\n      return promisifyRequest(store.get(keys[0])).then(function (value) {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(function () {\n          return value;\n        });\n      });\n    });\n  });\n}\nfunction createIndexedDbStore(options) {\n  var store;\n\n  // Lazily create the store only when it's needed\n  function getStore() {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n    return store;\n  }\n  return {\n    insert: function () {\n      var _insert2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(env) {\n        var serialized;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return utils.serializeEnvelope(env, options.textEncoder);\n            case 3:\n              serialized = _context.sent;\n              _context.next = 6;\n              return _insert(getStore(), serialized, options.maxQueueSize || 30);\n            case 6:\n              _context.next = 10;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      function insert(_x) {\n        return _insert2.apply(this, arguments);\n      }\n      return insert;\n    }(),\n    pop: function () {\n      var _pop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var deserialized;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _pop(getStore());\n            case 3:\n              deserialized = _context2.sent;\n              if (!deserialized) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\", utils.parseEnvelope(deserialized, options.textEncoder || new TextEncoder(), options.textDecoder || new TextDecoder()));\n            case 6:\n              _context2.next = 10;\n              break;\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n            case 10:\n              return _context2.abrupt(\"return\", undefined);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n      function pop() {\n        return _pop2.apply(this, arguments);\n      }\n      return pop;\n    }()\n  };\n}\nfunction makeIndexedDbOfflineTransport(createTransport) {\n  return function (options) {\n    return createTransport(_objectSpread(_objectSpread({}, options), {}, {\n      createStore: createIndexedDbStore\n    }));\n  };\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nfunction makeBrowserOfflineTransport(createTransport) {\n  return makeIndexedDbOfflineTransport(core.makeOfflineTransport(createTransport));\n}\nexports.createStore = createStore;\nexports.insert = _insert;\nexports.makeBrowserOfflineTransport = makeBrowserOfflineTransport;\nexports.pop = _pop;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/transports/offline.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/transports/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/transports/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar helpers = __webpack_require__(/*! ../helpers.js */ \"./node_modules/@sentry/browser/cjs/helpers.js\");\nvar cachedFetchImpl = undefined;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction getNativeFetchImplementation() {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (utils.isNativeFetch(helpers.WINDOW.fetch)) {\n    return cachedFetchImpl = helpers.WINDOW.fetch.bind(helpers.WINDOW);\n  }\n  var document = helpers.WINDOW.document;\n  var fetchImpl = helpers.WINDOW.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      var sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      var contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n  return cachedFetchImpl = fetchImpl.bind(helpers.WINDOW);\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** Clears cached fetch impl */\nfunction clearCachedFetchImplementation() {\n  cachedFetchImpl = undefined;\n}\nexports.clearCachedFetchImplementation = clearCachedFetchImplementation;\nexports.getNativeFetchImplementation = getNativeFetchImplementation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy90cmFuc3BvcnRzL3V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsSUFBQUEsZUFBQSxHQUFBQyxTQUFBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyw2QkFBQTtFQUNBLElBQUFGLGVBQUE7SUFDQSxPQUFBQSxlQUFBO0VBQ0E7O0VBRUE7O0VBRUE7RUFDQSxJQUFBRyxLQUFBLENBQUFDLGFBQUEsQ0FBQUMsT0FBQSxDQUFBQyxNQUFBLENBQUFDLEtBQUE7SUFDQSxPQUFBUCxlQUFBLEdBQUFLLE9BQUEsQ0FBQUMsTUFBQSxDQUFBQyxLQUFBLENBQUFDLElBQUEsQ0FBQUgsT0FBQSxDQUFBQyxNQUFBO0VBQ0E7RUFFQSxJQUFBRyxRQUFBLEdBQUFKLE9BQUEsQ0FBQUMsTUFBQSxDQUFBRyxRQUFBO0VBQ0EsSUFBQUMsU0FBQSxHQUFBTCxPQUFBLENBQUFDLE1BQUEsQ0FBQUMsS0FBQTtFQUNBO0VBQ0EsSUFBQUUsUUFBQSxXQUFBQSxRQUFBLENBQUFFLGFBQUE7SUFDQTtNQUNBLElBQUFDLE9BQUEsR0FBQUgsUUFBQSxDQUFBRSxhQUFBO01BQ0FDLE9BQUEsQ0FBQUMsTUFBQTtNQUNBSixRQUFBLENBQUFLLElBQUEsQ0FBQUMsV0FBQSxDQUFBSCxPQUFBO01BQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBLENBQUFJLGFBQUE7TUFDQSxJQUFBQSxhQUFBLElBQUFBLGFBQUEsQ0FBQVQsS0FBQTtRQUNBRyxTQUFBLEdBQUFNLGFBQUEsQ0FBQVQsS0FBQTtNQUNBO01BQ0FFLFFBQUEsQ0FBQUssSUFBQSxDQUFBRyxXQUFBLENBQUFMLE9BQUE7SUFDQSxTQUFBTSxDQUFBO01BQ0EsUUFBQUMsZ0JBQUEsb0JBQUFBLGdCQUFBLEtBQ0FoQixLQUFBLENBQUFpQixNQUFBLENBQUFDLElBQUEsb0ZBQUFILENBQUE7SUFDQTtFQUNBO0VBRUEsT0FBQWxCLGVBQUEsR0FBQVUsU0FBQSxDQUFBRixJQUFBLENBQUFILE9BQUEsQ0FBQUMsTUFBQTtFQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFBZ0IsK0JBQUE7RUFDQXRCLGVBQUEsR0FBQUMsU0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vLi4vc3JjL3RyYW5zcG9ydHMvdXRpbHMudHM/ZTMwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05hdGl2ZUZldGNoLCBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmxldCBjYWNoZWRGZXRjaEltcGw6IEZldGNoSW1wbCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IHR5cGUgRmV0Y2hJbXBsID0gdHlwZW9mIGZldGNoO1xuXG4vKipcbiAqIEEgc3BlY2lhbCB1c2VjYXNlIGZvciBpbmNvcnJlY3RseSB3cmFwcGVkIEZldGNoIEFQSXMgaW4gY29uanVuY3Rpb24gd2l0aCBhZC1ibG9ja2Vycy5cbiAqIFdoZW5ldmVyIHNvbWVvbmUgd3JhcHMgdGhlIEZldGNoIEFQSSBhbmQgcmV0dXJucyB0aGUgd3JvbmcgcHJvbWlzZSBjaGFpbixcbiAqIHRoaXMgY2hhaW4gYmVjb21lcyBvcnBoYW5lZCBhbmQgdGhlcmUgaXMgbm8gcG9zc2libGUgd2F5IHRvIGNhcHR1cmUgaXQncyByZWplY3Rpb25zXG4gKiBvdGhlciB0aGFuIGFsbG93aW5nIGl0IGJ1YmJsZSB1cCB0byB0aGlzIHZlcnkgaGFuZGxlci4gZWcuXG4gKlxuICogY29uc3QgZiA9IHdpbmRvdy5mZXRjaDtcbiAqIHdpbmRvdy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAqICAgY29uc3QgcCA9IGYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAqXG4gKiAgIHAudGhlbihmdW5jdGlvbigpIHtcbiAqICAgICBjb25zb2xlLmxvZygnaGkuJyk7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIHA7XG4gKiB9XG4gKlxuICogYHAudGhlbihmdW5jdGlvbiAoKSB7IC4uLiB9KWAgaXMgcHJvZHVjaW5nIGEgY29tcGxldGVseSBzZXBhcmF0ZSBwcm9taXNlIGNoYWluLFxuICogaG93ZXZlciwgd2hhdCdzIHJldHVybmVkIGlzIGBwYCAtIHRoZSByZXN1bHQgb2Ygb3JpZ2luYWwgYGZldGNoYCBjYWxsLlxuICpcbiAqIFRoaXMgbWVhbiwgdGhhdCB3aGVuZXZlciB3ZSB1c2UgdGhlIEZldGNoIEFQSSB0byBzZW5kIG91ciBvd24gcmVxdWVzdHMsIF9hbmRfXG4gKiBzb21lIGFkLWJsb2NrZXIgYmxvY2tzIGl0LCB0aGlzIG9ycGhhbmVkIGNoYWluIHdpbGwgX2Fsd2F5c18gcmVqZWN0LFxuICogZWZmZWN0aXZlbHkgY2F1c2luZyBhbm90aGVyIGV2ZW50IHRvIGJlIGNhcHR1cmVkLlxuICogVGhpcyBtYWtlcyBhIHdob2xlIHByb2Nlc3MgYmVjb21lIGFuIGluZmluaXRlIGxvb3AsIHdoaWNoIHdlIG5lZWQgdG8gc29tZWhvd1xuICogZGVhbCB3aXRoLCBhbmQgYnJlYWsgaXQgaW4gb25lIHdheSBvciBhbm90aGVyLlxuICpcbiAqIFRvIGRlYWwgd2l0aCB0aGlzIGlzc3VlLCB3ZSBhcmUgbWFraW5nIHN1cmUgdGhhdCB3ZSBfYWx3YXlzXyB1c2UgdGhlIHJlYWxcbiAqIGJyb3dzZXIgRmV0Y2ggQVBJLCBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gd2hhdCBgd2luZG93LmZldGNoYCBleHBvc2VzLlxuICogVGhlIG9ubHkgZG93bnNpZGUgdG8gdGhpcyB3b3VsZCBiZSBtaXNzaW5nIG91ciBvd24gcmVxdWVzdHMgYXMgYnJlYWRjcnVtYnMsXG4gKiBidXQgYmVjYXVzZSB3ZSBhcmUgYWxyZWFkeSBub3QgZG9pbmcgdGhpcywgaXQgc2hvdWxkIGJlIGp1c3QgZmluZS5cbiAqXG4gKiBQb3NzaWJsZSBmYWlsZWQgZmV0Y2ggZXJyb3IgbWVzc2FnZXMgcGVyLWJyb3dzZXI6XG4gKlxuICogQ2hyb21lOiAgRmFpbGVkIHRvIGZldGNoXG4gKiBFZGdlOiAgICBGYWlsZWQgdG8gRmV0Y2hcbiAqIEZpcmVmb3g6IE5ldHdvcmtFcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gZmV0Y2ggcmVzb3VyY2VcbiAqIFNhZmFyaTogIHJlc291cmNlIGJsb2NrZWQgYnkgY29udGVudCBibG9ja2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVGZXRjaEltcGxlbWVudGF0aW9uKCk6IEZldGNoSW1wbCB7XG4gIGlmIChjYWNoZWRGZXRjaEltcGwpIHtcbiAgICByZXR1cm4gY2FjaGVkRmV0Y2hJbXBsO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kICovXG5cbiAgLy8gRmFzdCBwYXRoIHRvIGF2b2lkIERPTSBJL09cbiAgaWYgKGlzTmF0aXZlRmV0Y2goV0lORE9XLmZldGNoKSkge1xuICAgIHJldHVybiAoY2FjaGVkRmV0Y2hJbXBsID0gV0lORE9XLmZldGNoLmJpbmQoV0lORE9XKSk7XG4gIH1cblxuICBjb25zdCBkb2N1bWVudCA9IFdJTkRPVy5kb2N1bWVudDtcbiAgbGV0IGZldGNoSW1wbCA9IFdJTkRPVy5mZXRjaDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGlmIChkb2N1bWVudCAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzYW5kYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBzYW5kYm94LmhpZGRlbiA9IHRydWU7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNhbmRib3gpO1xuICAgICAgY29uc3QgY29udGVudFdpbmRvdyA9IHNhbmRib3guY29udGVudFdpbmRvdztcbiAgICAgIGlmIChjb250ZW50V2luZG93ICYmIGNvbnRlbnRXaW5kb3cuZmV0Y2gpIHtcbiAgICAgICAgZmV0Y2hJbXBsID0gY29udGVudFdpbmRvdy5mZXRjaDtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc2FuZGJveCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICAgIGxvZ2dlci53YXJuKCdDb3VsZCBub3QgY3JlYXRlIHNhbmRib3ggaWZyYW1lIGZvciBwdXJlIGZldGNoIGNoZWNrLCBiYWlsaW5nIHRvIHdpbmRvdy5mZXRjaDogJywgZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChjYWNoZWRGZXRjaEltcGwgPSBmZXRjaEltcGwuYmluZChXSU5ET1cpKTtcbiAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2QgKi9cbn1cblxuLyoqIENsZWFycyBjYWNoZWQgZmV0Y2ggaW1wbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQ2FjaGVkRmV0Y2hJbXBsZW1lbnRhdGlvbigpOiB2b2lkIHtcbiAgY2FjaGVkRmV0Y2hJbXBsID0gdW5kZWZpbmVkO1xufVxuIl0sIm5hbWVzIjpbImNhY2hlZEZldGNoSW1wbCIsInVuZGVmaW5lZCIsImdldE5hdGl2ZUZldGNoSW1wbGVtZW50YXRpb24iLCJ1dGlscyIsImlzTmF0aXZlRmV0Y2giLCJoZWxwZXJzIiwiV0lORE9XIiwiZmV0Y2giLCJiaW5kIiwiZG9jdW1lbnQiLCJmZXRjaEltcGwiLCJjcmVhdGVFbGVtZW50Iiwic2FuZGJveCIsImhpZGRlbiIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJyZW1vdmVDaGlsZCIsImUiLCJfX1NFTlRSWV9ERUJVR19fIiwibG9nZ2VyIiwid2FybiIsImNsZWFyQ2FjaGVkRmV0Y2hJbXBsZW1lbnRhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/transports/utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/transports/xhr.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/transports/xhr.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nvar XHR_READYSTATE_DONE = 4;\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nfunction makeXHRTransport(options) {\n  function makeRequest(request) {\n    return new utils.SyncPromise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.onerror = reject;\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          resolve({\n            statusCode: xhr.status,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After')\n            }\n          });\n        }\n      };\n      xhr.open('POST', options.url);\n      for (var header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n      xhr.send(request.body);\n    });\n  }\n  return core.createTransport(options, makeRequest);\n}\nexports.makeXHRTransport = makeXHRTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy90cmFuc3BvcnRzL3hoci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBQUEsbUJBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQUMsaUJBQUFDLE9BQUE7RUFDQSxTQUFBQyxZQUFBQyxPQUFBO0lBQ0EsV0FBQUMsS0FBQSxDQUFBQyxXQUFBLFdBQUFDLE9BQUEsRUFBQUMsTUFBQTtNQUNBLElBQUFDLEdBQUEsT0FBQUMsY0FBQTtNQUVBRCxHQUFBLENBQUFFLE9BQUEsR0FBQUgsTUFBQTtNQUVBQyxHQUFBLENBQUFHLGtCQUFBO1FBQ0EsSUFBQUgsR0FBQSxDQUFBSSxVQUFBLEtBQUFiLG1CQUFBO1VBQ0FPLE9BQUE7WUFDQU8sVUFBQSxFQUFBTCxHQUFBLENBQUFNLE1BQUE7WUFDQUMsT0FBQTtjQUNBLHdCQUFBUCxHQUFBLENBQUFRLGlCQUFBO2NBQ0EsZUFBQVIsR0FBQSxDQUFBUSxpQkFBQTtZQUNBO1VBQ0E7UUFDQTtNQUNBO01BRUFSLEdBQUEsQ0FBQVMsSUFBQSxTQUFBaEIsT0FBQSxDQUFBaUIsR0FBQTtNQUVBLFNBQUFDLE1BQUEsSUFBQWxCLE9BQUEsQ0FBQWMsT0FBQTtRQUNBLElBQUFLLE1BQUEsQ0FBQUMsU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQXRCLE9BQUEsQ0FBQWMsT0FBQSxFQUFBSSxNQUFBO1VBQ0FYLEdBQUEsQ0FBQWdCLGdCQUFBLENBQUFMLE1BQUEsRUFBQWxCLE9BQUEsQ0FBQWMsT0FBQSxDQUFBSSxNQUFBO1FBQ0E7TUFDQTtNQUVBWCxHQUFBLENBQUFpQixJQUFBLENBQUF0QixPQUFBLENBQUF1QixJQUFBO0lBQ0E7RUFDQTtFQUVBLE9BQUFDLElBQUEsQ0FBQUMsZUFBQSxDQUFBM0IsT0FBQSxFQUFBQyxXQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi8uLi9zcmMvdHJhbnNwb3J0cy94aHIudHM/NzRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVUcmFuc3BvcnQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBUcmFuc3BvcnQsIFRyYW5zcG9ydE1ha2VSZXF1ZXN0UmVzcG9uc2UsIFRyYW5zcG9ydFJlcXVlc3QgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgQnJvd3NlclRyYW5zcG9ydE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgRE9ORSByZWFkeSBzdGF0ZSBmb3IgWG1sSHR0cFJlcXVlc3RcbiAqXG4gKiBEZWZpbmluZyBpdCBoZXJlIGFzIGEgY29uc3RhbnQgYi9jIFhNTEh0dHBSZXF1ZXN0LkRPTkUgaXMgbm90IGFsd2F5cyBkZWZpbmVkXG4gKiAoZS5nLiBkdXJpbmcgdGVzdGluZywgaXQgaXMgYHVuZGVmaW5lZGApXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L3JlYWR5U3RhdGV9XG4gKi9cbmNvbnN0IFhIUl9SRUFEWVNUQVRFX0RPTkUgPSA0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBUcmFuc3BvcnQgdGhhdCB1c2VzIHRoZSBYTUxIdHRwUmVxdWVzdCBBUEkgdG8gc2VuZCBldmVudHMgdG8gU2VudHJ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZVhIUlRyYW5zcG9ydChvcHRpb25zOiBCcm93c2VyVHJhbnNwb3J0T3B0aW9ucyk6IFRyYW5zcG9ydCB7XG4gIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KHJlcXVlc3Q6IFRyYW5zcG9ydFJlcXVlc3QpOiBQcm9taXNlTGlrZTxUcmFuc3BvcnRNYWtlUmVxdWVzdFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSByZWplY3Q7XG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gWEhSX1JFQURZU1RBVEVfRE9ORSkge1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogeGhyLnN0YXR1cyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ3gtc2VudHJ5LXJhdGUtbGltaXRzJzogeGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVNlbnRyeS1SYXRlLUxpbWl0cycpLFxuICAgICAgICAgICAgICAncmV0cnktYWZ0ZXInOiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1JldHJ5LUFmdGVyJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4aHIub3BlbignUE9TVCcsIG9wdGlvbnMudXJsKTtcblxuICAgICAgZm9yIChjb25zdCBoZWFkZXIgaW4gb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5oZWFkZXJzLCBoZWFkZXIpKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBvcHRpb25zLmhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQocmVxdWVzdC5ib2R5KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUcmFuc3BvcnQob3B0aW9ucywgbWFrZVJlcXVlc3QpO1xufVxuIl0sIm5hbWVzIjpbIlhIUl9SRUFEWVNUQVRFX0RPTkUiLCJtYWtlWEhSVHJhbnNwb3J0Iiwib3B0aW9ucyIsIm1ha2VSZXF1ZXN0IiwicmVxdWVzdCIsInV0aWxzIiwiU3luY1Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbmVycm9yIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1c0NvZGUiLCJzdGF0dXMiLCJoZWFkZXJzIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJvcGVuIiwidXJsIiwiaGVhZGVyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJib2R5IiwiY29yZSIsImNyZWF0ZVRyYW5zcG9ydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/transports/xhr.js\n");

/***/ }),

/***/ "./node_modules/@sentry/browser/cjs/userfeedback.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/browser/cjs/userfeedback.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Creates an envelope from a user feedback.\n */\nfunction createUserFeedbackEnvelope(feedback, _ref) {\n  var metadata = _ref.metadata,\n    tunnel = _ref.tunnel,\n    dsn = _ref.dsn;\n  var headers = _objectSpread(_objectSpread({\n    event_id: feedback.event_id,\n    sent_at: new Date().toISOString()\n  }, metadata && metadata.sdk && {\n    sdk: {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    }\n  }), !!tunnel && !!dsn && {\n    dsn: utils.dsnToString(dsn)\n  });\n  var item = createUserFeedbackEnvelopeItem(feedback);\n  return utils.createEnvelope(headers, [item]);\n}\nfunction createUserFeedbackEnvelopeItem(feedback) {\n  var feedbackHeaders = {\n    type: 'user_report'\n  };\n  return [feedbackHeaders, feedback];\n}\nexports.createUserFeedbackEnvelope = createUserFeedbackEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9icm93c2VyL2Nqcy91c2VyZmVlZGJhY2suanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsMkJBQ0FDLFFBQUEsRUFBQUMsSUFBQSxFQVVBO0VBQUEsSUFSQUMsUUFBQSxHQUFBRCxJQUFBLENBQUFDLFFBQUE7SUFDQUMsTUFBQSxHQUFBRixJQUFBLENBQUFFLE1BQUE7SUFDQUMsR0FBQSxHQUFBSCxJQUFBLENBQUFHLEdBQUE7RUFPQSxJQUFBQyxPQUFBLEdBQUFDLGFBQUEsQ0FBQUEsYUFBQTtJQUNBQyxRQUFBLEVBQUFQLFFBQUEsQ0FBQU8sUUFBQTtJQUNBQyxPQUFBLE1BQUFDLElBQUEsR0FBQUMsV0FBQTtFQUFBLEdBQ0FSLFFBQUEsSUFDQUEsUUFBQSxDQUFBUyxHQUFBO0lBQ0FBLEdBQUE7TUFDQUMsSUFBQSxFQUFBVixRQUFBLENBQUFTLEdBQUEsQ0FBQUMsSUFBQTtNQUNBQyxPQUFBLEVBQUFYLFFBQUEsQ0FBQVMsR0FBQSxDQUFBRTtJQUNBO0VBQ0EsSUFDQSxFQUFBVixNQUFBLE1BQUFDLEdBQUE7SUFBQUEsR0FBQSxFQUFBVSxLQUFBLENBQUFDLFdBQUEsQ0FBQVgsR0FBQTtFQUFBLEVBQ0E7RUFDQSxJQUFBWSxJQUFBLEdBQUFDLDhCQUFBLENBQUFqQixRQUFBO0VBRUEsT0FBQWMsS0FBQSxDQUFBSSxjQUFBLENBQUFiLE9BQUEsR0FBQVcsSUFBQTtBQUNBO0FBRUEsU0FBQUMsK0JBQUFqQixRQUFBO0VBQ0EsSUFBQW1CLGVBQUE7SUFDQUMsSUFBQTtFQUNBO0VBQ0EsUUFBQUQsZUFBQSxFQUFBbkIsUUFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL3VzZXJmZWVkYmFjay50cz9lMGE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRHNuQ29tcG9uZW50cywgRXZlbnRFbnZlbG9wZSwgU2RrTWV0YWRhdGEsIFVzZXJGZWVkYmFjaywgVXNlckZlZWRiYWNrSXRlbSB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRW52ZWxvcGUsIGRzblRvU3RyaW5nIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlbnZlbG9wZSBmcm9tIGEgdXNlciBmZWVkYmFjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVzZXJGZWVkYmFja0VudmVsb3BlKFxuICBmZWVkYmFjazogVXNlckZlZWRiYWNrLFxuICB7XG4gICAgbWV0YWRhdGEsXG4gICAgdHVubmVsLFxuICAgIGRzbixcbiAgfToge1xuICAgIG1ldGFkYXRhOiBTZGtNZXRhZGF0YSB8IHVuZGVmaW5lZDtcbiAgICB0dW5uZWw6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBkc246IERzbkNvbXBvbmVudHMgfCB1bmRlZmluZWQ7XG4gIH0sXG4pOiBFdmVudEVudmVsb3BlIHtcbiAgY29uc3QgaGVhZGVyczogRXZlbnRFbnZlbG9wZVswXSA9IHtcbiAgICBldmVudF9pZDogZmVlZGJhY2suZXZlbnRfaWQsXG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihtZXRhZGF0YSAmJlxuICAgICAgbWV0YWRhdGEuc2RrICYmIHtcbiAgICAgICAgc2RrOiB7XG4gICAgICAgICAgbmFtZTogbWV0YWRhdGEuc2RrLm5hbWUsXG4gICAgICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAuLi4oISF0dW5uZWwgJiYgISFkc24gJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gIH07XG4gIGNvbnN0IGl0ZW0gPSBjcmVhdGVVc2VyRmVlZGJhY2tFbnZlbG9wZUl0ZW0oZmVlZGJhY2spO1xuXG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbaXRlbV0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVc2VyRmVlZGJhY2tFbnZlbG9wZUl0ZW0oZmVlZGJhY2s6IFVzZXJGZWVkYmFjayk6IFVzZXJGZWVkYmFja0l0ZW0ge1xuICBjb25zdCBmZWVkYmFja0hlYWRlcnM6IFVzZXJGZWVkYmFja0l0ZW1bMF0gPSB7XG4gICAgdHlwZTogJ3VzZXJfcmVwb3J0JyxcbiAgfTtcbiAgcmV0dXJuIFtmZWVkYmFja0hlYWRlcnMsIGZlZWRiYWNrXTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVVc2VyRmVlZGJhY2tFbnZlbG9wZSIsImZlZWRiYWNrIiwiX3JlZiIsIm1ldGFkYXRhIiwidHVubmVsIiwiZHNuIiwiaGVhZGVycyIsIl9vYmplY3RTcHJlYWQiLCJldmVudF9pZCIsInNlbnRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsInV0aWxzIiwiZHNuVG9TdHJpbmciLCJpdGVtIiwiY3JlYXRlVXNlckZlZWRiYWNrRW52ZWxvcGVJdGVtIiwiY3JlYXRlRW52ZWxvcGUiLCJmZWVkYmFja0hlYWRlcnMiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/browser/cjs/userfeedback.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/api.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/cjs/api.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? \"\".concat(dsn.protocol, \":\") : '';\n  var port = dsn.port ? \":\".concat(dsn.port) : '';\n  return \"\".concat(protocol, \"//\").concat(dsn.host).concat(port).concat(dsn.path ? \"/\".concat(dsn.path) : '', \"/api/\");\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return \"\".concat(getBaseApiEndpoint(dsn)).concat(dsn.projectId, \"/envelope/\");\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  return utils.urlEncode(_objectSpread({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  }, sdkInfo && {\n    sentry_client: \"\".concat(sdkInfo.name, \"/\").concat(sdkInfo.version)\n  }));\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn) {\n  var tunnelOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  var tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  var sdkInfo = typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n  return tunnel ? tunnel : \"\".concat(_getIngestEndpoint(dsn), \"?\").concat(_encodedAuth(dsn, sdkInfo));\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = utils.makeDsn(dsnLike);\n  var endpoint = \"\".concat(getBaseApiEndpoint(dsn), \"embed/error-page/\");\n  var encodedOptions = \"dsn=\".concat(utils.dsnToString(dsn));\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      var user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += \"&name=\".concat(encodeURIComponent(user.name));\n      }\n      if (user.email) {\n        encodedOptions += \"&email=\".concat(encodeURIComponent(user.email));\n      }\n    } else {\n      encodedOptions += \"&\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(dialogOptions[key]));\n    }\n  }\n  return \"\".concat(endpoint, \"?\").concat(encodedOptions);\n}\nexports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = getReportDialogEndpoint;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9hcGkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsa0JBQUE7O0FBRUE7QUFDQSxTQUFBQyxtQkFBQUMsR0FBQTtFQUNBLElBQUFDLFFBQUEsR0FBQUQsR0FBQSxDQUFBQyxRQUFBLE1BQUFDLE1BQUEsQ0FBQUYsR0FBQSxDQUFBQyxRQUFBO0VBQ0EsSUFBQUUsSUFBQSxHQUFBSCxHQUFBLENBQUFHLElBQUEsT0FBQUQsTUFBQSxDQUFBRixHQUFBLENBQUFHLElBQUE7RUFDQSxVQUFBRCxNQUFBLENBQUFELFFBQUEsUUFBQUMsTUFBQSxDQUFBRixHQUFBLENBQUFJLElBQUEsRUFBQUYsTUFBQSxDQUFBQyxJQUFBLEVBQUFELE1BQUEsQ0FBQUYsR0FBQSxDQUFBSyxJQUFBLE9BQUFILE1BQUEsQ0FBQUYsR0FBQSxDQUFBSyxJQUFBO0FBQ0E7O0FBRUE7QUFDQSxTQUFBQyxtQkFBQU4sR0FBQTtFQUNBLFVBQUFFLE1BQUEsQ0FBQUgsa0JBQUEsQ0FBQUMsR0FBQSxHQUFBRSxNQUFBLENBQUFGLEdBQUEsQ0FBQU8sU0FBQTtBQUNBOztBQUVBO0FBQ0EsU0FBQUMsYUFBQVIsR0FBQSxFQUFBUyxPQUFBO0VBQ0EsT0FBQUMsS0FBQSxDQUFBQyxTQUFBLENBQUFDLGFBQUE7SUFDQTtJQUNBO0lBQ0FDLFVBQUEsRUFBQWIsR0FBQSxDQUFBYyxTQUFBO0lBQ0FDLGNBQUEsRUFBQWpCO0VBQUEsR0FDQVcsT0FBQTtJQUFBTyxhQUFBLEtBQUFkLE1BQUEsQ0FBQU8sT0FBQSxDQUFBUSxJQUFBLE9BQUFmLE1BQUEsQ0FBQU8sT0FBQSxDQUFBUyxPQUFBO0VBQUEsRUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxzQ0FDQW5CLEdBQUEsRUFJQTtFQUFBLElBREFvQixlQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUVBO0VBQ0E7RUFDQTs7RUFFQSxJQUFBRyxNQUFBLFVBQUFKLGVBQUEsZ0JBQUFBLGVBQUEsR0FBQUEsZUFBQSxDQUFBSSxNQUFBO0VBQ0EsSUFBQWYsT0FBQSxHQUNBLE9BQUFXLGVBQUEsa0JBQUFBLGVBQUEsQ0FBQUssU0FBQSxHQUFBRixTQUFBLEdBQUFILGVBQUEsQ0FBQUssU0FBQSxDQUFBQyxHQUFBO0VBRUEsT0FBQUYsTUFBQSxHQUFBQSxNQUFBLE1BQUF0QixNQUFBLENBQUFJLGtCQUFBLENBQUFOLEdBQUEsUUFBQUUsTUFBQSxDQUFBTSxZQUFBLENBQUFSLEdBQUEsRUFBQVMsT0FBQTtBQUNBOztBQUVBO0FBQ0EsU0FBQWtCLHdCQUNBQyxPQUFBLEVBQ0FDLGFBQUEsRUFLQTtFQUNBLElBQUE3QixHQUFBLEdBQUFVLEtBQUEsQ0FBQW9CLE9BQUEsQ0FBQUYsT0FBQTtFQUNBLElBQUFHLFFBQUEsTUFBQTdCLE1BQUEsQ0FBQUgsa0JBQUEsQ0FBQUMsR0FBQTtFQUVBLElBQUFnQyxjQUFBLFVBQUE5QixNQUFBLENBQUFRLEtBQUEsQ0FBQXVCLFdBQUEsQ0FBQWpDLEdBQUE7RUFDQSxTQUFBa0MsR0FBQSxJQUFBTCxhQUFBO0lBQ0EsSUFBQUssR0FBQTtNQUNBO0lBQ0E7SUFFQSxJQUFBQSxHQUFBO01BQ0EsSUFBQUMsSUFBQSxHQUFBTixhQUFBLENBQUFNLElBQUE7TUFDQSxLQUFBQSxJQUFBO1FBQ0E7TUFDQTtNQUNBLElBQUFBLElBQUEsQ0FBQWxCLElBQUE7UUFDQWUsY0FBQSxhQUFBOUIsTUFBQSxDQUFBa0Msa0JBQUEsQ0FBQUQsSUFBQSxDQUFBbEIsSUFBQTtNQUNBO01BQ0EsSUFBQWtCLElBQUEsQ0FBQUUsS0FBQTtRQUNBTCxjQUFBLGNBQUE5QixNQUFBLENBQUFrQyxrQkFBQSxDQUFBRCxJQUFBLENBQUFFLEtBQUE7TUFDQTtJQUNBO01BQ0FMLGNBQUEsUUFBQTlCLE1BQUEsQ0FBQWtDLGtCQUFBLENBQUFGLEdBQUEsUUFBQWhDLE1BQUEsQ0FBQWtDLGtCQUFBLENBQUFQLGFBQUEsQ0FBQUssR0FBQTtJQUNBO0VBQ0E7RUFFQSxVQUFBaEMsTUFBQSxDQUFBNkIsUUFBQSxPQUFBN0IsTUFBQSxDQUFBOEIsY0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vc3JjL2FwaS50cz81ZGViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50T3B0aW9ucywgRHNuQ29tcG9uZW50cywgRHNuTGlrZSwgU2RrSW5mbyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgZHNuVG9TdHJpbmcsIG1ha2VEc24sIHVybEVuY29kZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5jb25zdCBTRU5UUllfQVBJX1ZFUlNJT04gPSAnNyc7XG5cbi8qKiBSZXR1cm5zIHRoZSBwcmVmaXggdG8gY29uc3RydWN0IFNlbnRyeSBpbmdlc3Rpb24gQVBJIGVuZHBvaW50cy4gKi9cbmZ1bmN0aW9uIGdldEJhc2VBcGlFbmRwb2ludChkc246IERzbkNvbXBvbmVudHMpOiBzdHJpbmcge1xuICBjb25zdCBwcm90b2NvbCA9IGRzbi5wcm90b2NvbCA/IGAke2Rzbi5wcm90b2NvbH06YCA6ICcnO1xuICBjb25zdCBwb3J0ID0gZHNuLnBvcnQgPyBgOiR7ZHNuLnBvcnR9YCA6ICcnO1xuICByZXR1cm4gYCR7cHJvdG9jb2x9Ly8ke2Rzbi5ob3N0fSR7cG9ydH0ke2Rzbi5wYXRoID8gYC8ke2Rzbi5wYXRofWAgOiAnJ30vYXBpL2A7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSBpbmdlc3QgQVBJIGVuZHBvaW50IGZvciB0YXJnZXQuICovXG5mdW5jdGlvbiBfZ2V0SW5nZXN0RW5kcG9pbnQoZHNuOiBEc25Db21wb25lbnRzKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2dldEJhc2VBcGlFbmRwb2ludChkc24pfSR7ZHNuLnByb2plY3RJZH0vZW52ZWxvcGUvYDtcbn1cblxuLyoqIFJldHVybnMgYSBVUkwtZW5jb2RlZCBzdHJpbmcgd2l0aCBhdXRoIGNvbmZpZyBzdWl0YWJsZSBmb3IgYSBxdWVyeSBzdHJpbmcuICovXG5mdW5jdGlvbiBfZW5jb2RlZEF1dGgoZHNuOiBEc25Db21wb25lbnRzLCBzZGtJbmZvOiBTZGtJbmZvIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVybEVuY29kZSh7XG4gICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU3Mi5cbiAgICBzZW50cnlfa2V5OiBkc24ucHVibGljS2V5LFxuICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gICAgLi4uKHNka0luZm8gJiYgeyBzZW50cnlfY2xpZW50OiBgJHtzZGtJbmZvLm5hbWV9LyR7c2RrSW5mby52ZXJzaW9ufWAgfSksXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTCB3aXRoIGF1dGggaW4gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKFxuICBkc246IERzbkNvbXBvbmVudHMsXG4gIC8vIFRPRE8gKHY4KTogUmVtb3ZlIGB0dW5uZWxPck9wdGlvbnNgIGluIGZhdm9yIG9mIGBvcHRpb25zYCwgYW5kIHVzZSB0aGUgc3Vic3RpdHV0ZSBjb2RlIGJlbG93XG4gIC8vIG9wdGlvbnM6IENsaWVudE9wdGlvbnMgPSB7fSBhcyBDbGllbnRPcHRpb25zLFxuICB0dW5uZWxPck9wdGlvbnM6IHN0cmluZyB8IENsaWVudE9wdGlvbnMgPSB7fSBhcyBDbGllbnRPcHRpb25zLFxuKTogc3RyaW5nIHtcbiAgLy8gVE9ETyAodjgpOiBVc2UgdGhpcyBjb2RlIGluc3RlYWRcbiAgLy8gY29uc3QgeyB0dW5uZWwsIF9tZXRhZGF0YSA9IHt9IH0gPSBvcHRpb25zO1xuICAvLyByZXR1cm4gdHVubmVsID8gdHVubmVsIDogYCR7X2dldEluZ2VzdEVuZHBvaW50KGRzbil9PyR7X2VuY29kZWRBdXRoKGRzbiwgX21ldGFkYXRhLnNkayl9YDtcblxuICBjb25zdCB0dW5uZWwgPSB0eXBlb2YgdHVubmVsT3JPcHRpb25zID09PSAnc3RyaW5nJyA/IHR1bm5lbE9yT3B0aW9ucyA6IHR1bm5lbE9yT3B0aW9ucy50dW5uZWw7XG4gIGNvbnN0IHNka0luZm8gPVxuICAgIHR5cGVvZiB0dW5uZWxPck9wdGlvbnMgPT09ICdzdHJpbmcnIHx8ICF0dW5uZWxPck9wdGlvbnMuX21ldGFkYXRhID8gdW5kZWZpbmVkIDogdHVubmVsT3JPcHRpb25zLl9tZXRhZGF0YS5zZGs7XG5cbiAgcmV0dXJuIHR1bm5lbCA/IHR1bm5lbCA6IGAke19nZXRJbmdlc3RFbmRwb2ludChkc24pfT8ke19lbmNvZGVkQXV0aChkc24sIHNka0luZm8pfWA7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSB1cmwgdG8gdGhlIHJlcG9ydCBkaWFsb2cgZW5kcG9pbnQuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQoXG4gIGRzbkxpa2U6IERzbkxpa2UsXG4gIGRpYWxvZ09wdGlvbnM6IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB1c2VyPzogeyBuYW1lPzogc3RyaW5nOyBlbWFpbD86IHN0cmluZyB9O1xuICB9LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgZHNuID0gbWFrZURzbihkc25MaWtlKTtcbiAgY29uc3QgZW5kcG9pbnQgPSBgJHtnZXRCYXNlQXBpRW5kcG9pbnQoZHNuKX1lbWJlZC9lcnJvci1wYWdlL2A7XG5cbiAgbGV0IGVuY29kZWRPcHRpb25zID0gYGRzbj0ke2RzblRvU3RyaW5nKGRzbil9YDtcbiAgZm9yIChjb25zdCBrZXkgaW4gZGlhbG9nT3B0aW9ucykge1xuICAgIGlmIChrZXkgPT09ICdkc24nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndXNlcicpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBkaWFsb2dPcHRpb25zLnVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5uYW1lKSB7XG4gICAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmbmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudCh1c2VyLm5hbWUpfWA7XG4gICAgICB9XG4gICAgICBpZiAodXNlci5lbWFpbCkge1xuICAgICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJmVtYWlsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXIuZW1haWwpfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQoZGlhbG9nT3B0aW9uc1trZXldIGFzIHN0cmluZyl9YDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYCR7ZW5kcG9pbnR9PyR7ZW5jb2RlZE9wdGlvbnN9YDtcbn1cbiJdLCJuYW1lcyI6WyJTRU5UUllfQVBJX1ZFUlNJT04iLCJnZXRCYXNlQXBpRW5kcG9pbnQiLCJkc24iLCJwcm90b2NvbCIsImNvbmNhdCIsInBvcnQiLCJob3N0IiwicGF0aCIsIl9nZXRJbmdlc3RFbmRwb2ludCIsInByb2plY3RJZCIsIl9lbmNvZGVkQXV0aCIsInNka0luZm8iLCJ1dGlscyIsInVybEVuY29kZSIsIl9vYmplY3RTcHJlYWQiLCJzZW50cnlfa2V5IiwicHVibGljS2V5Iiwic2VudHJ5X3ZlcnNpb24iLCJzZW50cnlfY2xpZW50IiwibmFtZSIsInZlcnNpb24iLCJnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwidHVubmVsT3JPcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidHVubmVsIiwiX21ldGFkYXRhIiwic2RrIiwiZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQiLCJkc25MaWtlIiwiZGlhbG9nT3B0aW9ucyIsIm1ha2VEc24iLCJlbmRwb2ludCIsImVuY29kZWRPcHRpb25zIiwiZHNuVG9TdHJpbmciLCJrZXkiLCJ1c2VyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW1haWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/api.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/baseclient.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/baseclient.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar api = __webpack_require__(/*! ./api.js */ \"./node_modules/@sentry/core/cjs/api.js\");\nvar envelope = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@sentry/core/cjs/envelope.js\");\nvar integration = __webpack_require__(/*! ./integration.js */ \"./node_modules/@sentry/core/cjs/integration.js\");\nvar session = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/cjs/session.js\");\nvar prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"./node_modules/@sentry/core/cjs/utils/prepareEvent.js\");\nvar ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  function BaseClient(options) {\n    _classCallCheck(this, BaseClient);\n    BaseClient.prototype.__init.call(this);\n    BaseClient.prototype.__init2.call(this);\n    BaseClient.prototype.__init3.call(this);\n    BaseClient.prototype.__init4.call(this);\n    BaseClient.prototype.__init5.call(this);\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = utils.makeDsn(options.dsn);\n      var url = api.getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport(_objectSpread(_objectSpread({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this)\n      }, options.transportOptions), {}, {\n        url: url\n      }));\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  _createClass(BaseClient, [{\n    key: \"__init\",\n    value: /** Options passed to the SDK. */\n\n    /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n    /** Array of set up integrations. */\n    function __init() {\n      this._integrations = {};\n    }\n\n    /** Indicates whether this client's integrations have been set up. */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._integrationsInitialized = false;\n    }\n\n    /** Number of calls being processed */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._numProcessing = 0;\n    }\n\n    /** Holds flushable  */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this._outcomes = {};\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this._hooks = {};\n    }\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint, scope) {\n      var _this = this;\n      // ensure we haven't captured this very object before\n      if (utils.checkOrSetAlreadyCaught(exception)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n      var eventId = hint && hint.event_id;\n      this._process(this.eventFromException(exception, hint).then(function (event) {\n        return _this._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message,\n    // eslint-disable-next-line deprecation/deprecation\n    level, hint, scope) {\n      var _this2 = this;\n      var eventId = hint && hint.event_id;\n      var promisedEvent = utils.isPrimitive(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);\n      this._process(promisedEvent.then(function (event) {\n        return _this2._captureEvent(event, hint, scope);\n      }).then(function (result) {\n        eventId = result;\n      }));\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint, scope) {\n      // ensure we haven't captured this very object before\n      if (hint && hint.originalException && utils.checkOrSetAlreadyCaught(hint.originalException)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(ALREADY_SEEN_ERROR);\n        return;\n      }\n      var eventId = hint && hint.event_id;\n      this._process(this._captureEvent(event, hint, scope).then(function (result) {\n        eventId = result;\n      }));\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureSession\",\n    value: function captureSession(session$1) {\n      if (!this._isEnabled()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('SDK not enabled, will not capture session.');\n        return;\n      }\n      if (!(typeof session$1.release === 'string')) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Discarded session because of missing or non-string release');\n      } else {\n        this.sendSession(session$1);\n        // After sending, we set init false to indicate it's not the first occurrence\n        session.updateSession(session$1, {\n          init: false\n        });\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getDsn\",\n    value: function getDsn() {\n      return this._dsn;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this._options;\n    }\n\n    /**\n     * @see SdkMetadata in @sentry/types\n     *\n     * @return The metadata of the SDK\n     */\n  }, {\n    key: \"getSdkMetadata\",\n    value: function getSdkMetadata() {\n      return this._options._metadata;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTransport\",\n    value: function getTransport() {\n      return this._transport;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"flush\",\n    value: function flush(timeout) {\n      var transport = this._transport;\n      if (transport) {\n        return this._isClientDoneProcessing(timeout).then(function (clientFinished) {\n          return transport.flush(timeout).then(function (transportFlushed) {\n            return clientFinished && transportFlushed;\n          });\n        });\n      } else {\n        return utils.resolvedSyncPromise(true);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"close\",\n    value: function close(timeout) {\n      var _this3 = this;\n      return this.flush(timeout).then(function (result) {\n        _this3.getOptions().enabled = false;\n        return result;\n      });\n    }\n\n    /**\n     * Sets up the integrations\n     */\n  }, {\n    key: \"setupIntegrations\",\n    value: function setupIntegrations() {\n      if (this._isEnabled() && !this._integrationsInitialized) {\n        this._integrations = integration.setupIntegrations(this._options.integrations);\n        this._integrationsInitialized = true;\n      }\n    }\n\n    /**\n     * Gets an installed integration by its `id`.\n     *\n     * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n     */\n  }, {\n    key: \"getIntegrationById\",\n    value: function getIntegrationById(integrationId) {\n      return this._integrations[integrationId];\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      try {\n        return this._integrations[integration.id] || null;\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Client\"));\n        return null;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addIntegration\",\n    value: function addIntegration(integration$1) {\n      integration.setupIntegration(integration$1, this._integrations);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event) {\n      var _this4 = this;\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._dsn) {\n        var env = envelope.createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n        var _iterator = _createForOfIteratorHelper(hint.attachments || []),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var attachment = _step.value;\n            env = utils.addItemToEnvelope(env, utils.createAttachmentEnvelopeItem(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var promise = this._sendEnvelope(env);\n        if (promise) {\n          promise.then(function (sendResponse) {\n            return _this4.emit('afterSendEvent', event, sendResponse);\n          }, null);\n        }\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"sendSession\",\n    value: function sendSession(session) {\n      if (this._dsn) {\n        var env = envelope.createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n        void this._sendEnvelope(env);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"recordDroppedEvent\",\n    value: function recordDroppedEvent(reason, category, _event) {\n      // Note: we use `event` in replay, where we overwrite this hook.\n\n      if (this._options.sendClientReports) {\n        // We want to track each category (error, transaction, session, replay_event) separately\n        // but still keep the distinction between different type of outcomes.\n        // We could use nested maps, but it's much easier to read and type this way.\n        // A correct type for map-based implementation if we want to go that route\n        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n        // With typescript 4.1 we could even use template literal types\n        var key = \"\".concat(reason, \":\").concat(category);\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"Adding outcome: \\\"\".concat(key, \"\\\"\"));\n\n        // The following works because undefined + 1 === NaN and NaN is falsy\n        this._outcomes[key] = this._outcomes[key] + 1 || 1;\n      }\n    }\n\n    // Keep on() & emit() signatures in sync with types' client.ts interface\n\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n  }, {\n    key: \"on\",\n    value: function on(hook, callback) {\n      if (!this._hooks[hook]) {\n        this._hooks[hook] = [];\n      }\n\n      // @ts-ignore We assue the types are correct\n      this._hooks[hook].push(callback);\n    }\n\n    /** @inheritdoc */\n\n    /** @inheritdoc */\n  }, {\n    key: \"emit\",\n    value: function emit(hook) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      if (this._hooks[hook]) {\n        // @ts-ignore we cannot enforce the callback to match the hook\n        this._hooks[hook].forEach(function (callback) {\n          return callback.apply(void 0, rest);\n        });\n      }\n    }\n\n    /** Updates existing session based on the provided event */\n  }, {\n    key: \"_updateSessionFromEvent\",\n    value: function _updateSessionFromEvent(session$1, event) {\n      var crashed = false;\n      var errored = false;\n      var exceptions = event.exception && event.exception.values;\n      if (exceptions) {\n        errored = true;\n        var _iterator2 = _createForOfIteratorHelper(exceptions),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var ex = _step2.value;\n            var mechanism = ex.mechanism;\n            if (mechanism && mechanism.handled === false) {\n              crashed = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      // A session is updated and that session update is sent in only one of the two following scenarios:\n      // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n      // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n      var sessionNonTerminal = session$1.status === 'ok';\n      var shouldUpdateAndSend = sessionNonTerminal && session$1.errors === 0 || sessionNonTerminal && crashed;\n      if (shouldUpdateAndSend) {\n        session.updateSession(session$1, _objectSpread(_objectSpread({}, crashed && {\n          status: 'crashed'\n        }), {}, {\n          errors: session$1.errors || Number(errored || crashed)\n        }));\n        this.captureSession(session$1);\n      }\n    }\n\n    /**\n     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n     * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n     *\n     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n     * `true`.\n     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n     * `false` otherwise\n     */\n  }, {\n    key: \"_isClientDoneProcessing\",\n    value: function _isClientDoneProcessing(timeout) {\n      var _this5 = this;\n      return new utils.SyncPromise(function (resolve) {\n        var ticked = 0;\n        var tick = 1;\n        var interval = setInterval(function () {\n          if (_this5._numProcessing == 0) {\n            clearInterval(interval);\n            resolve(true);\n          } else {\n            ticked += tick;\n            if (timeout && ticked >= timeout) {\n              clearInterval(interval);\n              resolve(false);\n            }\n          }\n        }, tick);\n      });\n    }\n\n    /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  }, {\n    key: \"_isEnabled\",\n    value: function _isEnabled() {\n      return this.getOptions().enabled !== false && this._dsn !== undefined;\n    }\n\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      var options = this.getOptions();\n      var integrations = Object.keys(this._integrations);\n      if (!hint.integrations && integrations.length > 0) {\n        hint.integrations = integrations;\n      }\n      return prepareEvent.prepareEvent(options, event, hint, scope);\n    }\n\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n  }, {\n    key: \"_captureEvent\",\n    value: function _captureEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scope = arguments.length > 2 ? arguments[2] : undefined;\n      return this._processEvent(event, hint, scope).then(function (finalEvent) {\n        return finalEvent.event_id;\n      }, function (reason) {\n        if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          var sentryError = reason;\n          if (sentryError.logLevel === 'log') {\n            utils.logger.log(sentryError.message);\n          } else {\n            utils.logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      });\n    }\n\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n  }, {\n    key: \"_processEvent\",\n    value: function _processEvent(event, hint, scope) {\n      var _this6 = this;\n      var options = this.getOptions();\n      var sampleRate = options.sampleRate;\n      if (!this._isEnabled()) {\n        return utils.rejectedSyncPromise(new utils.SentryError('SDK not enabled, will not capture event.', 'log'));\n      }\n      var isTransaction = isTransactionEvent(event);\n      var isError = isErrorEvent(event);\n      var eventType = event.type || 'error';\n      var beforeSendLabel = \"before send for type `\".concat(eventType, \"`\");\n\n      // 1.0 === 100% events are sent\n      // 0.0 === 0% events are sent\n      // Sampling for transaction happens somewhere else\n      if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n        this.recordDroppedEvent('sample_rate', 'error', event);\n        return utils.rejectedSyncPromise(new utils.SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \".concat(sampleRate, \")\"), 'log'));\n      }\n      var dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n      return this._prepareEvent(event, hint, scope).then(function (prepared) {\n        if (prepared === null) {\n          _this6.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new utils.SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n        var isInternalException = hint.data && hint.data.__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n        var result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      }).then(function (processedEvent) {\n        if (processedEvent === null) {\n          _this6.recordDroppedEvent('before_send', dataCategory, event);\n          throw new utils.SentryError(\"\".concat(beforeSendLabel, \" returned `null`, will not send event.\"), 'log');\n        }\n        var session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          _this6._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        var transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          var source = 'custom';\n          processedEvent.transaction_info = _objectSpread(_objectSpread({}, transactionInfo), {}, {\n            source: source\n          });\n        }\n        _this6.sendEvent(processedEvent, hint);\n        return processedEvent;\n      }).then(null, function (reason) {\n        if (reason instanceof utils.SentryError) {\n          throw reason;\n        }\n        _this6.captureException(reason, {\n          data: {\n            __sentry__: true\n          },\n          originalException: reason\n        });\n        throw new utils.SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \".concat(reason));\n      });\n    }\n\n    /**\n     * Occupies the client with processing and event\n     */\n  }, {\n    key: \"_process\",\n    value: function _process(promise) {\n      var _this7 = this;\n      this._numProcessing++;\n      void promise.then(function (value) {\n        _this7._numProcessing--;\n        return value;\n      }, function (reason) {\n        _this7._numProcessing--;\n        return reason;\n      });\n    }\n\n    /**\n     * @inheritdoc\n     */\n  }, {\n    key: \"_sendEnvelope\",\n    value: function _sendEnvelope(envelope) {\n      if (this._transport && this._dsn) {\n        this.emit('beforeEnvelope', envelope);\n        return this._transport.send(envelope).then(null, function (reason) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Error while sending event:', reason);\n        });\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Transport disabled');\n      }\n    }\n\n    /**\n     * Clears outcomes on this client and returns them.\n     */\n  }, {\n    key: \"_clearOutcomes\",\n    value: function _clearOutcomes() {\n      var outcomes = this._outcomes;\n      this._outcomes = {};\n      return Object.keys(outcomes).map(function (key) {\n        var _key$split = key.split(':'),\n          _key$split2 = _slicedToArray(_key$split, 2),\n          reason = _key$split2[0],\n          category = _key$split2[1];\n        return {\n          reason: reason,\n          category: category,\n          quantity: outcomes[key]\n        };\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  }]);\n  return BaseClient;\n}();\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n  var invalidValueError = \"\".concat(beforeSendLabel, \" must return `null` or a valid event.\");\n  if (utils.isThenable(beforeSendResult)) {\n    return beforeSendResult.then(function (event) {\n      if (!utils.isPlainObject(event) && event !== null) {\n        throw new utils.SentryError(invalidValueError);\n      }\n      return event;\n    }, function (e) {\n      throw new utils.SentryError(\"\".concat(beforeSendLabel, \" rejected with \").concat(e));\n    });\n  } else if (!utils.isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new utils.SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(options, event, hint) {\n  var beforeSend = options.beforeSend,\n    beforeSendTransaction = options.beforeSendTransaction;\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n  return event;\n}\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\nexports.BaseClient = BaseClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/baseclient.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/checkin.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/checkin.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(checkIn, metadata, tunnel, dsn) {\n  var headers = _objectSpread(_objectSpread({\n    sent_at: new Date().toISOString()\n  }, metadata && metadata.sdk && {\n    sdk: {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    }\n  }), !!tunnel && !!dsn && {\n    dsn: utils.dsnToString(dsn)\n  });\n  var item = createCheckInEnvelopeItem(checkIn);\n  return utils.createEnvelope(headers, [item]);\n}\nfunction createCheckInEnvelopeItem(checkIn) {\n  var checkInHeaders = {\n    type: 'check_in'\n  };\n  return [checkInHeaders, checkIn];\n}\nexports.createCheckInEnvelope = createCheckInEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9jaGVja2luLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLHNCQUNBQyxPQUFBLEVBQ0FDLFFBQUEsRUFDQUMsTUFBQSxFQUNBQyxHQUFBLEVBQ0E7RUFDQSxJQUFBQyxPQUFBLEdBQUFDLGFBQUEsQ0FBQUEsYUFBQTtJQUNBQyxPQUFBLE1BQUFDLElBQUEsR0FBQUMsV0FBQTtFQUFBLEdBQ0FQLFFBQUEsSUFDQUEsUUFBQSxDQUFBUSxHQUFBO0lBQ0FBLEdBQUE7TUFDQUMsSUFBQSxFQUFBVCxRQUFBLENBQUFRLEdBQUEsQ0FBQUMsSUFBQTtNQUNBQyxPQUFBLEVBQUFWLFFBQUEsQ0FBQVEsR0FBQSxDQUFBRTtJQUNBO0VBQ0EsSUFDQSxFQUFBVCxNQUFBLE1BQUFDLEdBQUE7SUFBQUEsR0FBQSxFQUFBUyxLQUFBLENBQUFDLFdBQUEsQ0FBQVYsR0FBQTtFQUFBLEVBQ0E7RUFDQSxJQUFBVyxJQUFBLEdBQUFDLHlCQUFBLENBQUFmLE9BQUE7RUFDQSxPQUFBWSxLQUFBLENBQUFJLGNBQUEsQ0FBQVosT0FBQSxHQUFBVSxJQUFBO0FBQ0E7QUFFQSxTQUFBQywwQkFBQWYsT0FBQTtFQUNBLElBQUFpQixjQUFBO0lBQ0FDLElBQUE7RUFDQTtFQUNBLFFBQUFELGNBQUEsRUFBQWpCLE9BQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9jaGVja2luLnRzPzgwOWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGVja0luRXZlbG9wZSwgQ2hlY2tJbkl0ZW0sIERzbkNvbXBvbmVudHMsIFNka01ldGFkYXRhLCBTZXJpYWxpemVkQ2hlY2tJbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRW52ZWxvcGUsIGRzblRvU3RyaW5nIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKlxuICogQ3JlYXRlIGVudmVsb3BlIGZyb20gY2hlY2sgaW4gaXRlbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoZWNrSW5FbnZlbG9wZShcbiAgY2hlY2tJbjogU2VyaWFsaXplZENoZWNrSW4sXG4gIG1ldGFkYXRhPzogU2RrTWV0YWRhdGEsXG4gIHR1bm5lbD86IHN0cmluZyxcbiAgZHNuPzogRHNuQ29tcG9uZW50cyxcbik6IENoZWNrSW5FdmVsb3BlIHtcbiAgY29uc3QgaGVhZGVyczogQ2hlY2tJbkV2ZWxvcGVbMF0gPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihtZXRhZGF0YSAmJlxuICAgICAgbWV0YWRhdGEuc2RrICYmIHtcbiAgICAgICAgc2RrOiB7XG4gICAgICAgICAgbmFtZTogbWV0YWRhdGEuc2RrLm5hbWUsXG4gICAgICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAuLi4oISF0dW5uZWwgJiYgISFkc24gJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gIH07XG4gIGNvbnN0IGl0ZW0gPSBjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtKGNoZWNrSW4pO1xuICByZXR1cm4gY3JlYXRlRW52ZWxvcGU8Q2hlY2tJbkV2ZWxvcGU+KGhlYWRlcnMsIFtpdGVtXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrSW5FbnZlbG9wZUl0ZW0oY2hlY2tJbjogU2VyaWFsaXplZENoZWNrSW4pOiBDaGVja0luSXRlbSB7XG4gIGNvbnN0IGNoZWNrSW5IZWFkZXJzOiBDaGVja0luSXRlbVswXSA9IHtcbiAgICB0eXBlOiAnY2hlY2tfaW4nLFxuICB9O1xuICByZXR1cm4gW2NoZWNrSW5IZWFkZXJzLCBjaGVja0luXTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDaGVja0luRW52ZWxvcGUiLCJjaGVja0luIiwibWV0YWRhdGEiLCJ0dW5uZWwiLCJkc24iLCJoZWFkZXJzIiwiX29iamVjdFNwcmVhZCIsInNlbnRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsInV0aWxzIiwiZHNuVG9TdHJpbmciLCJpdGVtIiwiY3JlYXRlQ2hlY2tJbkVudmVsb3BlSXRlbSIsImNyZWF0ZUVudmVsb3BlIiwiY2hlY2tJbkhlYWRlcnMiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/checkin.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar DEFAULT_ENVIRONMENT = 'production';\nexports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9jb25zdGFudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsbUJBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvY29uc3RhbnRzLnRzP2RhMjYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IERFRkFVTFRfRU5WSVJPTk1FTlQgPSAncHJvZHVjdGlvbic7XG4iXSwibmFtZXMiOlsiREVGQVVMVF9FTlZJUk9OTUVOVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/constants.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/envelope.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/envelope.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [].concat(_toConsumableArray(event.sdk.integrations || []), _toConsumableArray(sdkInfo.integrations || []));\n  event.sdk.packages = [].concat(_toConsumableArray(event.sdk.packages || []), _toConsumableArray(sdkInfo.packages || []));\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(session, dsn, metadata, tunnel) {\n  var sdkInfo = utils.getSdkMetadataForEnvelopeHeader(metadata);\n  var envelopeHeaders = _objectSpread(_objectSpread({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!tunnel && {\n    dsn: utils.dsnToString(dsn)\n  });\n  var envelopeItem = 'aggregates' in session ? [{\n    type: 'sessions'\n  }, session] : [{\n    type: 'session'\n  }, session];\n  return utils.createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(event, dsn, metadata, tunnel) {\n  var sdkInfo = utils.getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjut a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  var eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  var envelopeHeaders = utils.createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n  var eventItem = [{\n    type: eventType\n  }, event];\n  return utils.createEnvelope(envelopeHeaders, [eventItem]);\n}\nexports.createEventEnvelope = createEventEnvelope;\nexports.createSessionEnvelope = createSessionEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9lbnZlbG9wZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsd0JBQUFDLEtBQUEsRUFBQUMsT0FBQTtFQUNBLEtBQUFBLE9BQUE7SUFDQSxPQUFBRCxLQUFBO0VBQ0E7RUFDQUEsS0FBQSxDQUFBRSxHQUFBLEdBQUFGLEtBQUEsQ0FBQUUsR0FBQTtFQUNBRixLQUFBLENBQUFFLEdBQUEsQ0FBQUMsSUFBQSxHQUFBSCxLQUFBLENBQUFFLEdBQUEsQ0FBQUMsSUFBQSxJQUFBRixPQUFBLENBQUFFLElBQUE7RUFDQUgsS0FBQSxDQUFBRSxHQUFBLENBQUFFLE9BQUEsR0FBQUosS0FBQSxDQUFBRSxHQUFBLENBQUFFLE9BQUEsSUFBQUgsT0FBQSxDQUFBRyxPQUFBO0VBQ0FKLEtBQUEsQ0FBQUUsR0FBQSxDQUFBRyxZQUFBLE1BQUFDLE1BQUEsQ0FBQUMsa0JBQUEsQ0FBQVAsS0FBQSxDQUFBRSxHQUFBLENBQUFHLFlBQUEsU0FBQUUsa0JBQUEsQ0FBQU4sT0FBQSxDQUFBSSxZQUFBO0VBQ0FMLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTSxRQUFBLE1BQUFGLE1BQUEsQ0FBQUMsa0JBQUEsQ0FBQVAsS0FBQSxDQUFBRSxHQUFBLENBQUFNLFFBQUEsU0FBQUQsa0JBQUEsQ0FBQU4sT0FBQSxDQUFBTyxRQUFBO0VBQ0EsT0FBQVIsS0FBQTtBQUNBOztBQUVBO0FBQ0EsU0FBQVMsc0JBQ0FDLE9BQUEsRUFDQUMsR0FBQSxFQUNBQyxRQUFBLEVBQ0FDLE1BQUEsRUFDQTtFQUNBLElBQUFaLE9BQUEsR0FBQWEsS0FBQSxDQUFBQywrQkFBQSxDQUFBSCxRQUFBO0VBQ0EsSUFBQUksZUFBQSxHQUFBQyxhQUFBLENBQUFBLGFBQUE7SUFDQUMsT0FBQSxNQUFBQyxJQUFBLEdBQUFDLFdBQUE7RUFBQSxHQUNBbkIsT0FBQTtJQUFBQyxHQUFBLEVBQUFEO0VBQUEsSUFDQSxFQUFBWSxNQUFBO0lBQUFGLEdBQUEsRUFBQUcsS0FBQSxDQUFBTyxXQUFBLENBQUFWLEdBQUE7RUFBQSxFQUNBO0VBRUEsSUFBQVcsWUFBQSxHQUNBLGdCQUFBWixPQUFBO0lBQUFhLElBQUE7RUFBQSxHQUFBYixPQUFBO0lBQUFhLElBQUE7RUFBQSxHQUFBYixPQUFBO0VBRUEsT0FBQUksS0FBQSxDQUFBVSxjQUFBLENBQUFSLGVBQUEsR0FBQU0sWUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQUFHLG9CQUNBekIsS0FBQSxFQUNBVyxHQUFBLEVBQ0FDLFFBQUEsRUFDQUMsTUFBQSxFQUNBO0VBQ0EsSUFBQVosT0FBQSxHQUFBYSxLQUFBLENBQUFDLCtCQUFBLENBQUFILFFBQUE7O0VBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDQSxJQUFBYyxTQUFBLEdBQUExQixLQUFBLENBQUF1QixJQUFBLElBQUF2QixLQUFBLENBQUF1QixJQUFBLHNCQUFBdkIsS0FBQSxDQUFBdUIsSUFBQTtFQUVBeEIsdUJBQUEsQ0FBQUMsS0FBQSxFQUFBWSxRQUFBLElBQUFBLFFBQUEsQ0FBQVYsR0FBQTtFQUVBLElBQUFjLGVBQUEsR0FBQUYsS0FBQSxDQUFBYSwwQkFBQSxDQUFBM0IsS0FBQSxFQUFBQyxPQUFBLEVBQUFZLE1BQUEsRUFBQUYsR0FBQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLE9BQUFYLEtBQUEsQ0FBQTRCLHFCQUFBO0VBRUEsSUFBQUMsU0FBQTtJQUFBTixJQUFBLEVBQUFHO0VBQUEsR0FBQTFCLEtBQUE7RUFDQSxPQUFBYyxLQUFBLENBQUFVLGNBQUEsQ0FBQVIsZUFBQSxHQUFBYSxTQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvZW52ZWxvcGUudHM/MWQ2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIERzbkNvbXBvbmVudHMsXG4gIEV2ZW50LFxuICBFdmVudEVudmVsb3BlLFxuICBFdmVudEl0ZW0sXG4gIFNka0luZm8sXG4gIFNka01ldGFkYXRhLFxuICBTZXNzaW9uLFxuICBTZXNzaW9uQWdncmVnYXRlcyxcbiAgU2Vzc2lvbkVudmVsb3BlLFxuICBTZXNzaW9uSXRlbSxcbn0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQge1xuICBjcmVhdGVFbnZlbG9wZSxcbiAgY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMsXG4gIGRzblRvU3RyaW5nLFxuICBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyLFxufSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqXG4gKiBBcHBseSBTZGtJbmZvIChuYW1lLCB2ZXJzaW9uLCBwYWNrYWdlcywgaW50ZWdyYXRpb25zKSB0byB0aGUgY29ycmVzcG9uZGluZyBldmVudCBrZXkuXG4gKiBNZXJnZSB3aXRoIGV4aXN0aW5nIGRhdGEgaWYgYW55LlxuICoqL1xuZnVuY3Rpb24gZW5oYW5jZUV2ZW50V2l0aFNka0luZm8oZXZlbnQ6IEV2ZW50LCBzZGtJbmZvPzogU2RrSW5mbyk6IEV2ZW50IHtcbiAgaWYgKCFzZGtJbmZvKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gIGV2ZW50LnNkayA9IGV2ZW50LnNkayB8fCB7fTtcbiAgZXZlbnQuc2RrLm5hbWUgPSBldmVudC5zZGsubmFtZSB8fCBzZGtJbmZvLm5hbWU7XG4gIGV2ZW50LnNkay52ZXJzaW9uID0gZXZlbnQuc2RrLnZlcnNpb24gfHwgc2RrSW5mby52ZXJzaW9uO1xuICBldmVudC5zZGsuaW50ZWdyYXRpb25zID0gWy4uLihldmVudC5zZGsuaW50ZWdyYXRpb25zIHx8IFtdKSwgLi4uKHNka0luZm8uaW50ZWdyYXRpb25zIHx8IFtdKV07XG4gIGV2ZW50LnNkay5wYWNrYWdlcyA9IFsuLi4oZXZlbnQuc2RrLnBhY2thZ2VzIHx8IFtdKSwgLi4uKHNka0luZm8ucGFja2FnZXMgfHwgW10pXTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKiogQ3JlYXRlcyBhbiBlbnZlbG9wZSBmcm9tIGEgU2Vzc2lvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlc3Npb25FbnZlbG9wZShcbiAgc2Vzc2lvbjogU2Vzc2lvbiB8IFNlc3Npb25BZ2dyZWdhdGVzLFxuICBkc246IERzbkNvbXBvbmVudHMsXG4gIG1ldGFkYXRhPzogU2RrTWV0YWRhdGEsXG4gIHR1bm5lbD86IHN0cmluZyxcbik6IFNlc3Npb25FbnZlbG9wZSB7XG4gIGNvbnN0IHNka0luZm8gPSBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyKG1ldGFkYXRhKTtcbiAgY29uc3QgZW52ZWxvcGVIZWFkZXJzID0ge1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAuLi4oc2RrSW5mbyAmJiB7IHNkazogc2RrSW5mbyB9KSxcbiAgICAuLi4oISF0dW5uZWwgJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gIH07XG5cbiAgY29uc3QgZW52ZWxvcGVJdGVtOiBTZXNzaW9uSXRlbSA9XG4gICAgJ2FnZ3JlZ2F0ZXMnIGluIHNlc3Npb24gPyBbeyB0eXBlOiAnc2Vzc2lvbnMnIH0sIHNlc3Npb25dIDogW3sgdHlwZTogJ3Nlc3Npb24nIH0sIHNlc3Npb25dO1xuXG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZTxTZXNzaW9uRW52ZWxvcGU+KGVudmVsb3BlSGVhZGVycywgW2VudmVsb3BlSXRlbV0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBFbnZlbG9wZSBmcm9tIGFuIGV2ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXZlbnRFbnZlbG9wZShcbiAgZXZlbnQ6IEV2ZW50LFxuICBkc246IERzbkNvbXBvbmVudHMsXG4gIG1ldGFkYXRhPzogU2RrTWV0YWRhdGEsXG4gIHR1bm5lbD86IHN0cmluZyxcbik6IEV2ZW50RW52ZWxvcGUge1xuICBjb25zdCBzZGtJbmZvID0gZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlcihtZXRhZGF0YSk7XG5cbiAgLypcbiAgICBOb3RlOiBEdWUgdG8gVFMsIGV2ZW50LnR5cGUgbWF5IGJlIGByZXBsYXlfZXZlbnRgLCB0aGVvcmV0aWNhbGx5LlxuICAgIEluIHByYWN0aWNlLCB3ZSBuZXZlciBjYWxsIGBjcmVhdGVFdmVudEVudmVsb3BlYCB3aXRoIGByZXBsYXlfZXZlbnRgIHR5cGUsXG4gICAgYW5kIHdlJ2QgaGF2ZSB0byBhZGp1dCBhIGxvb290IG9mIHR5cGVzIHRvIG1ha2UgdGhpcyB3b3JrIHByb3Blcmx5LlxuICAgIFdlIHdhbnQgdG8gYXZvaWQgY2FzdGluZyB0aGlzIGFyb3VuZCwgYXMgdGhhdCBjb3VsZCBsZWFkIHRvIGJ1Z3MgKGUuZy4gd2hlbiB3ZSBhZGQgYW5vdGhlciB0eXBlKVxuICAgIFNvIHRoZSBzYWZlIGNob2ljZSBpcyB0byByZWFsbHkgZ3VhcmQgYWdhaW5zdCB0aGUgcmVwbGF5X2V2ZW50IHR5cGUgaGVyZS5cbiAgKi9cbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSAmJiBldmVudC50eXBlICE9PSAncmVwbGF5X2V2ZW50JyA/IGV2ZW50LnR5cGUgOiAnZXZlbnQnO1xuXG4gIGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBtZXRhZGF0YSAmJiBtZXRhZGF0YS5zZGspO1xuXG4gIGNvbnN0IGVudmVsb3BlSGVhZGVycyA9IGNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzKGV2ZW50LCBzZGtJbmZvLCB0dW5uZWwsIGRzbik7XG5cbiAgLy8gUHJldmVudCB0aGlzIGRhdGEgKHdoaWNoLCBpZiBpdCBleGlzdHMsIHdhcyB1c2VkIGluIGVhcmxpZXIgc3RlcHMgaW4gdGhlIHByb2Nlc3NpbmcgcGlwZWxpbmUpIGZyb20gYmVpbmcgc2VudCB0b1xuICAvLyBzZW50cnkuIChOb3RlOiBPdXIgdXNlIG9mIHRoaXMgcHJvcGVydHkgY29tZXMgYW5kIGdvZXMgd2l0aCB3aGF0ZXZlciB3ZSBtaWdodCBiZSBkZWJ1Z2dpbmcsIHdoYXRldmVyIGhhY2tzIHdlIG1heVxuICAvLyBoYXZlIHRlbXBvcmFyaWx5IGFkZGVkLCBldGMuIEV2ZW4gaWYgd2UgZG9uJ3QgaGFwcGVuIHRvIGJlIHVzaW5nIGl0IGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZSwgbGV0J3Mgbm90IGdldCByaWRcbiAgLy8gb2YgdGhpcyBgZGVsZXRlYCwgbGVzdCB3ZSBtaXNzIHB1dHRpbmcgaXQgYmFjayBpbiB0aGUgbmV4dCB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBpbiB1c2UuKVxuICBkZWxldGUgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhO1xuXG4gIGNvbnN0IGV2ZW50SXRlbTogRXZlbnRJdGVtID0gW3sgdHlwZTogZXZlbnRUeXBlIH0sIGV2ZW50XTtcbiAgcmV0dXJuIGNyZWF0ZUVudmVsb3BlPEV2ZW50RW52ZWxvcGU+KGVudmVsb3BlSGVhZGVycywgW2V2ZW50SXRlbV0pO1xufVxuIl0sIm5hbWVzIjpbImVuaGFuY2VFdmVudFdpdGhTZGtJbmZvIiwiZXZlbnQiLCJzZGtJbmZvIiwic2RrIiwibmFtZSIsInZlcnNpb24iLCJpbnRlZ3JhdGlvbnMiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJwYWNrYWdlcyIsImNyZWF0ZVNlc3Npb25FbnZlbG9wZSIsInNlc3Npb24iLCJkc24iLCJtZXRhZGF0YSIsInR1bm5lbCIsInV0aWxzIiwiZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlciIsImVudmVsb3BlSGVhZGVycyIsIl9vYmplY3RTcHJlYWQiLCJzZW50X2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZHNuVG9TdHJpbmciLCJlbnZlbG9wZUl0ZW0iLCJ0eXBlIiwiY3JlYXRlRW52ZWxvcGUiLCJjcmVhdGVFdmVudEVudmVsb3BlIiwiZXZlbnRUeXBlIiwiY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMiLCJzZGtQcm9jZXNzaW5nTWV0YWRhdGEiLCJldmVudEl0ZW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/envelope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/exports.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/exports.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ./hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\n\n// Note: All functions in this file are typed with a return value of `ReturnType<Hub[HUB_FUNCTION]>`,\n// where HUB_FUNCTION is some method on the Hub class.\n//\n// This is done to make sure the top level SDK methods stay in sync with the hub methods.\n// Although every method here has an explicit return type, some of them (that map to void returns) do not\n// contain `return` keywords. This is done to save on bundle size, as `return` is not minifiable.\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @param captureContext Additional scope data to apply to exception event.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction captureException(exception, captureContext) {\n  return hub.getCurrentHub().captureException(exception, {\n    captureContext: captureContext\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nfunction captureMessage(message,\n// eslint-disable-next-line deprecation/deprecation\ncaptureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  var level = typeof captureContext === 'string' ? captureContext : undefined;\n  var context = typeof captureContext !== 'string' ? {\n    captureContext: captureContext\n  } : undefined;\n  return hub.getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nfunction captureEvent(event, hint) {\n  return hub.getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nfunction configureScope(callback) {\n  hub.getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nfunction addBreadcrumb(breadcrumb) {\n  hub.getCurrentHub().addBreadcrumb(breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContext(name, context) {\n  hub.getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nfunction setExtras(extras) {\n  hub.getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nfunction setExtra(key, extra) {\n  hub.getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nfunction setTags(tags) {\n  hub.getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nfunction setTag(key, value) {\n  hub.getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nfunction setUser(user) {\n  hub.getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nfunction withScope(callback) {\n  hub.getCurrentHub().withScope(callback);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nfunction startTransaction(context, customSamplingContext) {\n  return hub.getCurrentHub().startTransaction(_objectSpread({}, context), customSamplingContext);\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction captureCheckIn(checkIn, upsertMonitorConfig) {\n  var client = hub.getCurrentHub().getClient();\n  if (!client) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig);\n  }\n  return utils.uuid4();\n}\nexports.addBreadcrumb = addBreadcrumb;\nexports.captureCheckIn = captureCheckIn;\nexports.captureEvent = captureEvent;\nexports.captureException = captureException;\nexports.captureMessage = captureMessage;\nexports.configureScope = configureScope;\nexports.setContext = setContext;\nexports.setExtra = setExtra;\nexports.setExtras = setExtras;\nexports.setTag = setTag;\nexports.setTags = setTags;\nexports.setUser = setUser;\nexports.startTransaction = startTransaction;\nexports.withScope = withScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/exports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/hub.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/cjs/hub.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar constants = __webpack_require__(/*! ./constants.js */ \"./node_modules/@sentry/core/cjs/constants.js\");\nvar scope = __webpack_require__(/*! ./scope.js */ \"./node_modules/@sentry/core/cjs/scope.js\");\nvar session = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/cjs/session.js\");\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nvar API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nvar DEFAULT_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nvar Hub = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** Is a {@link Layer}[] containing the client and scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client) {\n    var scope$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new scope.Scope();\n    var _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n    _classCallCheck(this, Hub);\n    this._version = _version;\n    this._stack = [{\n      scope: scope$1\n    }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Hub, [{\n    key: \"isOlderThan\",\n    value: function isOlderThan(version) {\n      return this._version < version;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"bindClient\",\n    value: function bindClient(client) {\n      var top = this.getStackTop();\n      top.client = client;\n      if (client && client.setupIntegrations) {\n        client.setupIntegrations();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"pushScope\",\n    value: function pushScope() {\n      // We want to clone the content of prev scope\n      var scope$1 = scope.Scope.clone(this.getScope());\n      this.getStack().push({\n        client: this.getClient(),\n        scope: scope$1\n      });\n      return scope$1;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"popScope\",\n    value: function popScope() {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"withScope\",\n    value: function withScope(callback) {\n      var scope = this.pushScope();\n      try {\n        callback(scope);\n      } finally {\n        this.popScope();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getClient\",\n    value: function getClient() {\n      return this.getStackTop().client;\n    }\n\n    /** Returns the scope of the top stack. */\n  }, {\n    key: \"getScope\",\n    value: function getScope() {\n      return this.getStackTop().scope;\n    }\n\n    /** Returns the scope stack for domains or the process. */\n  }, {\n    key: \"getStack\",\n    value: function getStack() {\n      return this._stack;\n    }\n\n    /** Returns the topmost scope layer in the order domain > local > process. */\n  }, {\n    key: \"getStackTop\",\n    value: function getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : utils.uuid4();\n      var syntheticException = new Error('Sentry syntheticException');\n      this._withClient(function (client, scope) {\n        client.captureException(exception, _objectSpread(_objectSpread({\n          originalException: exception,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message,\n    // eslint-disable-next-line deprecation/deprecation\n    level, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : utils.uuid4();\n      var syntheticException = new Error(message);\n      this._withClient(function (client, scope) {\n        client.captureMessage(message, level, _objectSpread(_objectSpread({\n          originalException: message,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint) {\n      var eventId = hint && hint.event_id ? hint.event_id : utils.uuid4();\n      if (!event.type) {\n        this._lastEventId = eventId;\n      }\n      this._withClient(function (client, scope) {\n        client.captureEvent(event, _objectSpread(_objectSpread({}, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"lastEventId\",\n    value: function lastEventId() {\n      return this._lastEventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, hint) {\n      var _this$getStackTop = this.getStackTop(),\n        scope = _this$getStackTop.scope,\n        client = _this$getStackTop.client;\n      if (!client) return;\n      var _ref = client.getOptions && client.getOptions() || {},\n        _ref$beforeBreadcrumb = _ref.beforeBreadcrumb,\n        beforeBreadcrumb = _ref$beforeBreadcrumb === void 0 ? null : _ref$beforeBreadcrumb,\n        _ref$maxBreadcrumbs = _ref.maxBreadcrumbs,\n        maxBreadcrumbs = _ref$maxBreadcrumbs === void 0 ? DEFAULT_BREADCRUMBS : _ref$maxBreadcrumbs;\n      if (maxBreadcrumbs <= 0) return;\n      var timestamp = utils.dateTimestampInSeconds();\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: timestamp\n      }, breadcrumb);\n      var finalBreadcrumb = beforeBreadcrumb ? utils.consoleSandbox(function () {\n        return beforeBreadcrumb(mergedBreadcrumb, hint);\n      }) : mergedBreadcrumb;\n      if (finalBreadcrumb === null) return;\n      if (client.emit) {\n        client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n      }\n      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this.getScope().setUser(user);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this.getScope().setTags(tags);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this.getScope().setExtras(extras);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this.getScope().setTag(key, value);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this.getScope().setExtra(key, extra);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"setContext\",\n    value: function setContext(name, context) {\n      this.getScope().setContext(name, context);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"configureScope\",\n    value: function configureScope(callback) {\n      var _this$getStackTop2 = this.getStackTop(),\n        scope = _this$getStackTop2.scope,\n        client = _this$getStackTop2.client;\n      if (client) {\n        callback(scope);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var oldHub = makeMain(this);\n      try {\n        callback(this);\n      } finally {\n        makeMain(oldHub);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      var client = this.getClient();\n      if (!client) return null;\n      try {\n        return client.getIntegration(integration);\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Hub\"));\n        return null;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(context, customSamplingContext) {\n      var result = this._callExtensionMethod('startTransaction', context, customSamplingContext);\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && !result) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\\nSentry.addTracingExtensions();\\nSentry.init({...});\\n\");\n      }\n      return result;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"traceHeaders\",\n    value: function traceHeaders() {\n      return this._callExtensionMethod('traceHeaders');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureSession\",\n    value: function captureSession() {\n      var endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // both send the update and pull the session from the scope\n      if (endSession) {\n        return this.endSession();\n      }\n\n      // only send the update\n      this._sendSessionUpdate();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"endSession\",\n    value: function endSession() {\n      var layer = this.getStackTop();\n      var scope = layer.scope;\n      var session$1 = scope.getSession();\n      if (session$1) {\n        session.closeSession(session$1);\n      }\n      this._sendSessionUpdate();\n\n      // the session is over; take it off of the scope\n      scope.setSession();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startSession\",\n    value: function startSession(context) {\n      var _this$getStackTop3 = this.getStackTop(),\n        scope = _this$getStackTop3.scope,\n        client = _this$getStackTop3.client;\n      var _ref2 = client && client.getOptions() || {},\n        release = _ref2.release,\n        _ref2$environment = _ref2.environment,\n        environment = _ref2$environment === void 0 ? constants.DEFAULT_ENVIRONMENT : _ref2$environment;\n\n      // Will fetch userAgent if called from browser sdk\n      var _ref3 = utils.GLOBAL_OBJ.navigator || {},\n        userAgent = _ref3.userAgent;\n      var session$1 = session.makeSession(_objectSpread(_objectSpread({\n        release: release,\n        environment: environment,\n        user: scope.getUser()\n      }, userAgent && {\n        userAgent: userAgent\n      }), context));\n\n      // End existing session if there's one\n      var currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        session.updateSession(currentSession, {\n          status: 'exited'\n        });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session$1);\n      return session$1;\n    }\n\n    /**\n     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n     * when Tracing is used.\n     */\n  }, {\n    key: \"shouldSendDefaultPii\",\n    value: function shouldSendDefaultPii() {\n      var client = this.getClient();\n      var options = client && client.getOptions();\n      return Boolean(options && options.sendDefaultPii);\n    }\n\n    /**\n     * Sends the current Session on the scope\n     */\n  }, {\n    key: \"_sendSessionUpdate\",\n    value: function _sendSessionUpdate() {\n      var _this$getStackTop4 = this.getStackTop(),\n        scope = _this$getStackTop4.scope,\n        client = _this$getStackTop4.client;\n      var session = scope.getSession();\n      if (session && client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n\n    /**\n     * Internal helper function to call a method on the top client if it exists.\n     *\n     * @param method The method to call on the client.\n     * @param args Arguments to pass to the client function.\n     */\n  }, {\n    key: \"_withClient\",\n    value: function _withClient(callback) {\n      var _this$getStackTop5 = this.getStackTop(),\n        scope = _this$getStackTop5.scope,\n        client = _this$getStackTop5.client;\n      if (client) {\n        callback(client, scope);\n      }\n    }\n\n    /**\n     * Calls global extension method and binding current instance to the function call\n     */\n    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"_callExtensionMethod\",\n    value: function _callExtensionMethod(method) {\n      var carrier = getMainCarrier();\n      var sentry = carrier.__SENTRY__;\n      if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        return sentry.extensions[method].apply(this, args);\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Extension method \".concat(method, \" couldn't be found, doing nothing.\"));\n    }\n  }]);\n  return Hub;\n}();\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  utils.GLOBAL_OBJ.__SENTRY__ = utils.GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return utils.GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    var hub = registry.__SENTRY__.acs.getCurrentHub();\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\nfunction getGlobalHub() {\n  var registry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getMainCarrier();\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nfunction ensureHubOnCarrier(carrier) {\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalHub();\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    var globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, scope.Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nfunction runWithAsyncContext(callback) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  return utils.getGlobalSingleton('hub', function () {\n    return new Hub();\n  }, carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexports.API_VERSION = API_VERSION;\nexports.Hub = Hub;\nexports.ensureHubOnCarrier = ensureHubOnCarrier;\nexports.getCurrentHub = getCurrentHub;\nexports.getHubFromCarrier = getHubFromCarrier;\nexports.getMainCarrier = getMainCarrier;\nexports.makeMain = makeMain;\nexports.runWithAsyncContext = runWithAsyncContext;\nexports.setAsyncContextStrategy = setAsyncContextStrategy;\nexports.setHubOnCarrier = setHubOnCarrier;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/hub.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/index.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var hubextensions = __webpack_require__(/*! ./tracing/hubextensions.js */ "./node_modules/@sentry/core/cjs/tracing/hubextensions.js");
var idletransaction = __webpack_require__(/*! ./tracing/idletransaction.js */ "./node_modules/@sentry/core/cjs/tracing/idletransaction.js");
var span = __webpack_require__(/*! ./tracing/span.js */ "./node_modules/@sentry/core/cjs/tracing/span.js");
var transaction = __webpack_require__(/*! ./tracing/transaction.js */ "./node_modules/@sentry/core/cjs/tracing/transaction.js");
var utils$1 = __webpack_require__(/*! ./tracing/utils.js */ "./node_modules/@sentry/core/cjs/tracing/utils.js");
var spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ "./node_modules/@sentry/core/cjs/tracing/spanstatus.js");
var trace = __webpack_require__(/*! ./tracing/trace.js */ "./node_modules/@sentry/core/cjs/tracing/trace.js");
var exports$1 = __webpack_require__(/*! ./exports.js */ "./node_modules/@sentry/core/cjs/exports.js");
var hub = __webpack_require__(/*! ./hub.js */ "./node_modules/@sentry/core/cjs/hub.js");
var session = __webpack_require__(/*! ./session.js */ "./node_modules/@sentry/core/cjs/session.js");
var sessionflusher = __webpack_require__(/*! ./sessionflusher.js */ "./node_modules/@sentry/core/cjs/sessionflusher.js");
var scope = __webpack_require__(/*! ./scope.js */ "./node_modules/@sentry/core/cjs/scope.js");
var api = __webpack_require__(/*! ./api.js */ "./node_modules/@sentry/core/cjs/api.js");
var baseclient = __webpack_require__(/*! ./baseclient.js */ "./node_modules/@sentry/core/cjs/baseclient.js");
var sdk = __webpack_require__(/*! ./sdk.js */ "./node_modules/@sentry/core/cjs/sdk.js");
var base = __webpack_require__(/*! ./transports/base.js */ "./node_modules/@sentry/core/cjs/transports/base.js");
var offline = __webpack_require__(/*! ./transports/offline.js */ "./node_modules/@sentry/core/cjs/transports/offline.js");
var multiplexed = __webpack_require__(/*! ./transports/multiplexed.js */ "./node_modules/@sentry/core/cjs/transports/multiplexed.js");
var version = __webpack_require__(/*! ./version.js */ "./node_modules/@sentry/core/cjs/version.js");
var integration = __webpack_require__(/*! ./integration.js */ "./node_modules/@sentry/core/cjs/integration.js");
var index = __webpack_require__(/*! ./integrations/index.js */ "./node_modules/@sentry/core/cjs/integrations/index.js");
var prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ "./node_modules/@sentry/core/cjs/utils/prepareEvent.js");
var checkin = __webpack_require__(/*! ./checkin.js */ "./node_modules/@sentry/core/cjs/checkin.js");
var hasTracingEnabled = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ "./node_modules/@sentry/core/cjs/utils/hasTracingEnabled.js");
var constants = __webpack_require__(/*! ./constants.js */ "./node_modules/@sentry/core/cjs/constants.js");
var functiontostring = __webpack_require__(/*! ./integrations/functiontostring.js */ "./node_modules/@sentry/core/cjs/integrations/functiontostring.js");
var inboundfilters = __webpack_require__(/*! ./integrations/inboundfilters.js */ "./node_modules/@sentry/core/cjs/integrations/inboundfilters.js");
var utils = __webpack_require__(/*! @sentry/utils */ "./node_modules/@sentry/utils/cjs/index.js");
exports.addTracingExtensions = hubextensions.addTracingExtensions;
exports.startIdleTransaction = hubextensions.startIdleTransaction;
exports.IdleTransaction = idletransaction.IdleTransaction;
exports.TRACING_DEFAULTS = idletransaction.TRACING_DEFAULTS;
exports.Span = span.Span;
exports.spanStatusfromHttpCode = span.spanStatusfromHttpCode;
exports.Transaction = transaction.Transaction;
exports.getActiveTransaction = utils$1.getActiveTransaction;
Object.defineProperty(exports, "SpanStatus", ({
  enumerable: true,
  get: function get() {
    return spanstatus.SpanStatus;
  }
}));
exports.trace = trace.trace;
exports.addBreadcrumb = exports$1.addBreadcrumb;
exports.captureCheckIn = exports$1.captureCheckIn;
exports.captureEvent = exports$1.captureEvent;
exports.captureException = exports$1.captureException;
exports.captureMessage = exports$1.captureMessage;
exports.configureScope = exports$1.configureScope;
exports.setContext = exports$1.setContext;
exports.setExtra = exports$1.setExtra;
exports.setExtras = exports$1.setExtras;
exports.setTag = exports$1.setTag;
exports.setTags = exports$1.setTags;
exports.setUser = exports$1.setUser;
exports.startTransaction = exports$1.startTransaction;
exports.withScope = exports$1.withScope;
exports.Hub = hub.Hub;
exports.ensureHubOnCarrier = hub.ensureHubOnCarrier;
exports.getCurrentHub = hub.getCurrentHub;
exports.getHubFromCarrier = hub.getHubFromCarrier;
exports.getMainCarrier = hub.getMainCarrier;
exports.makeMain = hub.makeMain;
exports.runWithAsyncContext = hub.runWithAsyncContext;
exports.setAsyncContextStrategy = hub.setAsyncContextStrategy;
exports.setHubOnCarrier = hub.setHubOnCarrier;
exports.closeSession = session.closeSession;
exports.makeSession = session.makeSession;
exports.updateSession = session.updateSession;
exports.SessionFlusher = sessionflusher.SessionFlusher;
exports.Scope = scope.Scope;
exports.addGlobalEventProcessor = scope.addGlobalEventProcessor;
exports.getEnvelopeEndpointWithUrlEncodedAuth = api.getEnvelopeEndpointWithUrlEncodedAuth;
exports.getReportDialogEndpoint = api.getReportDialogEndpoint;
exports.BaseClient = baseclient.BaseClient;
exports.initAndBind = sdk.initAndBind;
exports.createTransport = base.createTransport;
exports.makeOfflineTransport = offline.makeOfflineTransport;
exports.makeMultiplexedTransport = multiplexed.makeMultiplexedTransport;
exports.SDK_VERSION = version.SDK_VERSION;
exports.getIntegrationsToSetup = integration.getIntegrationsToSetup;
exports.Integrations = index;
exports.prepareEvent = prepareEvent.prepareEvent;
exports.createCheckInEnvelope = checkin.createCheckInEnvelope;
exports.hasTracingEnabled = hasTracingEnabled.hasTracingEnabled;
exports.DEFAULT_ENVIRONMENT = constants.DEFAULT_ENVIRONMENT;
exports.FunctionToString = functiontostring.FunctionToString;
exports.InboundFilters = inboundfilters.InboundFilters;
exports.extractTraceparentData = utils.extractTraceparentData;

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/integration.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/integration.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ./hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\nvar scope = __webpack_require__(/*! ./scope.js */ \"./node_modules/@sentry/core/cjs/scope.js\");\nvar installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  var integrationsByName = {};\n  integrations.forEach(function (currentInstance) {\n    var name = currentInstance.name;\n    var existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n    integrationsByName[name] = currentInstance;\n  });\n  return Object.keys(integrationsByName).map(function (k) {\n    return integrationsByName[k];\n  });\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations || [];\n  var userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(function (integration) {\n    integration.isDefaultInstance = true;\n  });\n  var integrations;\n  if (Array.isArray(userIntegrations)) {\n    integrations = [].concat(_toConsumableArray(defaultIntegrations), _toConsumableArray(userIntegrations));\n  } else if (typeof userIntegrations === 'function') {\n    integrations = utils.arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n  var finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  var debugIndex = findIndex(finalIntegrations, function (integration) {\n    return integration.name === 'Debug';\n  });\n  if (debugIndex !== -1) {\n    var _finalIntegrations$sp = finalIntegrations.splice(debugIndex, 1),\n      _finalIntegrations$sp2 = _slicedToArray(_finalIntegrations$sp, 1),\n      debugInstance = _finalIntegrations$sp2[0];\n    finalIntegrations.push(debugInstance);\n  }\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(integrations) {\n  var integrationIndex = {};\n  integrations.forEach(function (integration) {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(integration, integrationIndex);\n    }\n  });\n  return integrationIndex;\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(integration, integrationIndex) {\n  integrationIndex[integration.name] = integration;\n  if (installedIntegrations.indexOf(integration.name) === -1) {\n    integration.setupOnce(scope.addGlobalEventProcessor, hub.getCurrentHub);\n    installedIntegrations.push(integration.name);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"Integration installed: \".concat(integration.name));\n  }\n}\n\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex(arr, callback) {\n  for (var i = 0; i < arr.length; i++) {\n    if (callback(arr[i]) === true) {\n      return i;\n    }\n  }\n  return -1;\n}\nexports.getIntegrationsToSetup = getIntegrationsToSetup;\nexports.installedIntegrations = installedIntegrations;\nexports.setupIntegration = setupIntegration;\nexports.setupIntegrations = setupIntegrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/integration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/integrations/functiontostring.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/integrations/functiontostring.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar originalFunctionToString;\n\n/** Patch toString calls to return proper name for wrapped functions */\nvar FunctionToString = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function FunctionToString() {\n    _classCallCheck(this, FunctionToString);\n    FunctionToString.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(FunctionToString, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = FunctionToString.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Function.prototype.toString = function () {\n          var context = utils.getOriginalFunction(this) || this;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch (e) {\n        // ignore errors here, just don't patch this\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'FunctionToString';\n    }\n  }]);\n  return FunctionToString;\n}();\nFunctionToString.__initStatic();\nexports.FunctionToString = FunctionToString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSx3QkFBQTs7QUFFQTtBQUFBLElBQ0FDLGdCQUFBO0VBQUE7O0VBQUEsU0FBQUEsaUJBQUE7SUFBQUMsZUFBQSxPQUFBRCxnQkFBQTtJQUFBQSxnQkFBQSxDQUFBRSxTQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQTtFQUFBO0VBQ0E7QUFDQTtBQUNBO0VBRkFDLFlBQUEsQ0FBQUwsZ0JBQUE7SUFBQU0sR0FBQTtJQUFBQyxLQUFBO0lBS0E7QUFDQTtBQUNBO0lBQ0EsU0FBQUosT0FBQTtNQUFBLEtBQUFLLElBQUEsR0FBQVIsZ0JBQUEsQ0FBQVMsRUFBQTtJQUFBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFHLFVBQUE7TUFDQTtNQUNBWCx3QkFBQSxHQUFBWSxRQUFBLENBQUFULFNBQUEsQ0FBQVUsUUFBQTs7TUFFQTtNQUNBO01BQ0E7UUFDQTtRQUNBRCxRQUFBLENBQUFULFNBQUEsQ0FBQVUsUUFBQTtVQUNBLElBQUFDLE9BQUEsR0FBQUMsS0FBQSxDQUFBQyxtQkFBQTtVQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBREFDLElBQUEsT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7WUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtVQUFBO1VBRUEsT0FBQXRCLHdCQUFBLENBQUF1QixLQUFBLENBQUFULE9BQUEsRUFBQU0sSUFBQTtRQUNBO01BQ0EsU0FBQUksQ0FBQTtRQUNBO01BQUE7SUFFQTtFQUFBO0lBQUFqQixHQUFBO0lBQUFDLEtBQUEsRUF6QkEsU0FBQWlCLGFBQUE7TUFBQSxLQUFBZixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFULGdCQUFBO0FBQUE7QUEwQkFBLGdCQUFBLENBQUF3QixZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2ludGVncmF0aW9ucy9mdW5jdGlvbnRvc3RyaW5nLnRzPzg0ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJbnRlZ3JhdGlvbiwgV3JhcHBlZEZ1bmN0aW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBnZXRPcmlnaW5hbEZ1bmN0aW9uIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmxldCBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmc6ICgpID0+IHZvaWQ7XG5cbi8qKiBQYXRjaCB0b1N0cmluZyBjYWxscyB0byByZXR1cm4gcHJvcGVyIG5hbWUgZm9yIHdyYXBwZWQgZnVuY3Rpb25zICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25Ub1N0cmluZyBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnRnVuY3Rpb25Ub1N0cmluZyc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gRnVuY3Rpb25Ub1N0cmluZy5pZDtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoKTogdm9pZCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIC8vIGludHJpbnNpY3MgKGxpa2UgRnVuY3Rpb24ucHJvdG90eXBlKSBtaWdodCBiZSBpbW11dGFibGUgaW4gc29tZSBlbnZpcm9ubWVudHNcbiAgICAvLyBlLmcuIE5vZGUgd2l0aCAtLWZyb3plbi1pbnRyaW5zaWNzLCBYUyAoYW4gZW1iZWRkZWQgSmF2YVNjcmlwdCBlbmdpbmUpIG9yIFNFUyAoYSBKYXZhU2NyaXB0IHByb3Bvc2FsKVxuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKHRoaXM6IFdyYXBwZWRGdW5jdGlvbiwgLi4uYXJnczogYW55W10pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0T3JpZ2luYWxGdW5jdGlvbih0aGlzKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaGVyZSwganVzdCBkb24ndCBwYXRjaCB0aGlzXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsib3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nIiwiRnVuY3Rpb25Ub1N0cmluZyIsIl9jbGFzc0NhbGxDaGVjayIsInByb3RvdHlwZSIsIl9faW5pdCIsImNhbGwiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsIm5hbWUiLCJpZCIsInNldHVwT25jZSIsIkZ1bmN0aW9uIiwidG9TdHJpbmciLCJjb250ZXh0IiwidXRpbHMiLCJnZXRPcmlnaW5hbEZ1bmN0aW9uIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImUiLCJfX2luaXRTdGF0aWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/integrations/functiontostring.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/integrations/inboundfilters.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/integrations/inboundfilters.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nvar DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\n\n/** Inbound filters configurable by the user */\nvar InboundFilters = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function InboundFilters() {\n    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, InboundFilters);\n    this._options = _options;\n    InboundFilters.prototype.__init.call(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(InboundFilters, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = InboundFilters.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcess = function eventProcess(event) {\n        var hub = getCurrentHub();\n        if (hub) {\n          var self = hub.getIntegration(InboundFilters);\n          if (self) {\n            var client = hub.getClient();\n            var clientOptions = client ? client.getOptions() : {};\n            var options = _mergeOptions(self._options, clientOptions);\n            return _shouldDropEvent(event, options) ? null : event;\n          }\n        }\n        return event;\n      };\n      eventProcess.id = this.name;\n      addGlobalEventProcessor(eventProcess);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'InboundFilters';\n    }\n  }]);\n  return InboundFilters;\n}();\nInboundFilters.__initStatic();\n\n/** JSDoc */\nfunction _mergeOptions() {\n  var internalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var clientOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    allowUrls: [].concat(_toConsumableArray(internalOptions.allowUrls || []), _toConsumableArray(clientOptions.allowUrls || [])),\n    denyUrls: [].concat(_toConsumableArray(internalOptions.denyUrls || []), _toConsumableArray(clientOptions.denyUrls || [])),\n    ignoreErrors: [].concat(_toConsumableArray(internalOptions.ignoreErrors || []), _toConsumableArray(clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),\n    ignoreTransactions: [].concat(_toConsumableArray(internalOptions.ignoreTransactions || []), _toConsumableArray(clientOptions.ignoreTransactions || [])),\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n  };\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Event dropped due to being internal Sentry Error.\\nEvent: \".concat(utils.getEventDescription(event)));\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Event dropped due to being matched by `ignoreErrors` option.\\nEvent: \".concat(utils.getEventDescription(event)));\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Event dropped due to being matched by `ignoreTransactions` option.\\nEvent: \".concat(utils.getEventDescription(event)));\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Event dropped due to being matched by `denyUrls` option.\\nEvent: \".concat(utils.getEventDescription(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Event dropped due to not being matched by `allowUrls` option.\\nEvent: \".concat(utils.getEventDescription(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n  return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n  return _getPossibleEventMessages(event).some(function (message) {\n    return utils.stringMatchesSomePattern(message, ignoreErrors);\n  });\n}\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n  var name = event.transaction;\n  return name ? utils.stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  var url = _getEventFilterUrl(event);\n  return !url ? false : utils.stringMatchesSomePattern(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  var url = _getEventFilterUrl(event);\n  return !url ? true : utils.stringMatchesSomePattern(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    var values = event.exception.values;\n    try {\n      var _ref = values && values[values.length - 1] || {},\n        _ref$type = _ref.type,\n        type = _ref$type === void 0 ? '' : _ref$type,\n        _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value;\n      return [\"\".concat(value), \"\".concat(type, \": \").concat(value)];\n    } catch (oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(\"Cannot extract message for event \".concat(utils.getEventDescription(event)));\n      return [];\n    }\n  }\n  return [];\n}\nfunction _isSentryError(event) {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\nfunction _getLastValidUrl() {\n  var frames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  for (var i = frames.length - 1; i >= 0; i--) {\n    var frame = frames[i];\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n  return null;\n}\nfunction _getEventFilterUrl(event) {\n  try {\n    var frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(\"Cannot extract url for event \".concat(utils.getEventDescription(event)));\n    return null;\n  }\n}\nexports.InboundFilters = InboundFilters;\nexports._mergeOptions = _mergeOptions;\nexports._shouldDropEvent = _shouldDropEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9pbnRlZ3JhdGlvbnMvaW5ib3VuZGZpbHRlcnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTtBQUNBO0FBQ0EsSUFBQUEscUJBQUE7O0FBRUE7O0FBU0E7QUFBQSxJQUNBQyxjQUFBO0VBQUE7O0VBV0EsU0FBQUEsZUFBQTtJQUFBLElBQUFDLFFBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBO0lBQUFHLGVBQUEsT0FBQUwsY0FBQTtJQUFBLEtBQUFDLFFBQUEsR0FBQUEsUUFBQTtJQUFBRCxjQUFBLENBQUFNLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0VBQUE7O0VBRUE7QUFDQTtBQUNBO0VBRkFDLFlBQUEsQ0FBQVQsY0FBQTtJQUFBVSxHQUFBO0lBQUFDLEtBQUE7SUFQQTtBQUNBO0FBQ0E7SUFDQSxTQUFBSixPQUFBO01BQUEsS0FBQUssSUFBQSxHQUFBWixjQUFBLENBQUFhLEVBQUE7SUFBQTtFQUFBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQU9BLFNBQUFHLFVBQUFDLHVCQUFBLEVBQUFDLGFBQUE7TUFDQSxJQUFBQyxZQUFBLFlBQUFBLGFBQUFDLEtBQUE7UUFDQSxJQUFBQyxHQUFBLEdBQUFILGFBQUE7UUFDQSxJQUFBRyxHQUFBO1VBQ0EsSUFBQUMsSUFBQSxHQUFBRCxHQUFBLENBQUFFLGNBQUEsQ0FBQXJCLGNBQUE7VUFDQSxJQUFBb0IsSUFBQTtZQUNBLElBQUFFLE1BQUEsR0FBQUgsR0FBQSxDQUFBSSxTQUFBO1lBQ0EsSUFBQUMsYUFBQSxHQUFBRixNQUFBLEdBQUFBLE1BQUEsQ0FBQUcsVUFBQTtZQUNBLElBQUFDLE9BQUEsR0FBQUMsYUFBQSxDQUFBUCxJQUFBLENBQUFuQixRQUFBLEVBQUF1QixhQUFBO1lBQ0EsT0FBQUksZ0JBQUEsQ0FBQVYsS0FBQSxFQUFBUSxPQUFBLFdBQUFSLEtBQUE7VUFDQTtRQUNBO1FBQ0EsT0FBQUEsS0FBQTtNQUNBO01BRUFELFlBQUEsQ0FBQUosRUFBQSxRQUFBRCxJQUFBO01BQ0FHLHVCQUFBLENBQUFFLFlBQUE7SUFDQTtFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQTtJQWhDQTtBQUNBO0FBQ0E7SUFDQSxTQUFBa0IsYUFBQTtNQUFBLEtBQUFoQixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFiLGNBQUE7QUFBQTtBQThCQUEsY0FBQSxDQUFBNkIsWUFBQTs7QUFFQTtBQUNBLFNBQUFGLGNBQUEsRUFHQTtFQUFBLElBRkFHLGVBQUEsR0FBQTVCLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQTtFQUFBLElBQ0FzQixhQUFBLEdBQUF0QixTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUE7RUFFQTtJQUNBNkIsU0FBQSxLQUFBQyxNQUFBLENBQUFDLGtCQUFBLENBQUFILGVBQUEsQ0FBQUMsU0FBQSxTQUFBRSxrQkFBQSxDQUFBVCxhQUFBLENBQUFPLFNBQUE7SUFDQUcsUUFBQSxLQUFBRixNQUFBLENBQUFDLGtCQUFBLENBQUFILGVBQUEsQ0FBQUksUUFBQSxTQUFBRCxrQkFBQSxDQUFBVCxhQUFBLENBQUFVLFFBQUE7SUFDQUMsWUFBQSxLQUFBSCxNQUFBLENBQUFDLGtCQUFBLENBQ0FILGVBQUEsQ0FBQUssWUFBQSxTQUFBRixrQkFBQSxDQUNBVCxhQUFBLENBQUFXLFlBQUEsU0FDQXBDLHFCQUFBLENBQ0E7SUFDQXFDLGtCQUFBLEtBQUFKLE1BQUEsQ0FBQUMsa0JBQUEsQ0FBQUgsZUFBQSxDQUFBTSxrQkFBQSxTQUFBSCxrQkFBQSxDQUFBVCxhQUFBLENBQUFZLGtCQUFBO0lBQ0FDLGNBQUEsRUFBQVAsZUFBQSxDQUFBTyxjQUFBLEtBQUFqQyxTQUFBLEdBQUEwQixlQUFBLENBQUFPLGNBQUE7RUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBQVQsaUJBQUFWLEtBQUEsRUFBQVEsT0FBQTtFQUNBLElBQUFBLE9BQUEsQ0FBQVcsY0FBQSxJQUFBQyxjQUFBLENBQUFwQixLQUFBO0lBQ0EsUUFBQXFCLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSw4REFBQVYsTUFBQSxDQUFBUSxLQUFBLENBQUFHLG1CQUFBLENBQUF6QixLQUFBO0lBQ0E7RUFDQTtFQUNBLElBQUEwQixlQUFBLENBQUExQixLQUFBLEVBQUFRLE9BQUEsQ0FBQVMsWUFBQTtJQUNBLFFBQUFJLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSx5RUFBQVYsTUFBQSxDQUNBUSxLQUFBLENBQUFHLG1CQUFBLENBQUF6QixLQUFBLEVBQ0E7SUFDQTtFQUNBO0VBQ0EsSUFBQTJCLHFCQUFBLENBQUEzQixLQUFBLEVBQUFRLE9BQUEsQ0FBQVUsa0JBQUE7SUFDQSxRQUFBRyxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsK0VBQUFWLE1BQUEsQ0FDQVEsS0FBQSxDQUFBRyxtQkFBQSxDQUFBekIsS0FBQSxFQUNBO0lBQ0E7RUFDQTtFQUNBLElBQUE0QixZQUFBLENBQUE1QixLQUFBLEVBQUFRLE9BQUEsQ0FBQVEsUUFBQTtJQUNBLFFBQUFLLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxxRUFBQVYsTUFBQSxDQUNBUSxLQUFBLENBQUFHLG1CQUFBLENBQ0F6QixLQUNBLGVBQUFjLE1BQUEsQ0FBQWUsa0JBQUEsQ0FBQTdCLEtBQUEsRUFDQTtJQUNBO0VBQ0E7RUFDQSxLQUFBOEIsYUFBQSxDQUFBOUIsS0FBQSxFQUFBUSxPQUFBLENBQUFLLFNBQUE7SUFDQSxRQUFBUSxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FDQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsMEVBQUFWLE1BQUEsQ0FDQVEsS0FBQSxDQUFBRyxtQkFBQSxDQUNBekIsS0FDQSxlQUFBYyxNQUFBLENBQUFlLGtCQUFBLENBQUE3QixLQUFBLEVBQ0E7SUFDQTtFQUNBO0VBQ0E7QUFDQTtBQUVBLFNBQUEwQixnQkFBQTFCLEtBQUEsRUFBQWlCLFlBQUE7RUFDQTtFQUNBLElBQUFqQixLQUFBLENBQUErQixJQUFBLEtBQUFkLFlBQUEsS0FBQUEsWUFBQSxDQUFBaEMsTUFBQTtJQUNBO0VBQ0E7RUFFQSxPQUFBK0MseUJBQUEsQ0FBQWhDLEtBQUEsRUFBQWlDLElBQUEsV0FBQUMsT0FBQTtJQUFBLE9BQUFaLEtBQUEsQ0FBQWEsd0JBQUEsQ0FBQUQsT0FBQSxFQUFBakIsWUFBQTtFQUFBO0FBQ0E7QUFFQSxTQUFBVSxzQkFBQTNCLEtBQUEsRUFBQWtCLGtCQUFBO0VBQ0EsSUFBQWxCLEtBQUEsQ0FBQStCLElBQUEsdUJBQUFiLGtCQUFBLEtBQUFBLGtCQUFBLENBQUFqQyxNQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFTLElBQUEsR0FBQU0sS0FBQSxDQUFBb0MsV0FBQTtFQUNBLE9BQUExQyxJQUFBLEdBQUE0QixLQUFBLENBQUFhLHdCQUFBLENBQUF6QyxJQUFBLEVBQUF3QixrQkFBQTtBQUNBO0FBRUEsU0FBQVUsYUFBQTVCLEtBQUEsRUFBQWdCLFFBQUE7RUFDQTtFQUNBLEtBQUFBLFFBQUEsS0FBQUEsUUFBQSxDQUFBL0IsTUFBQTtJQUNBO0VBQ0E7RUFDQSxJQUFBb0QsR0FBQSxHQUFBUixrQkFBQSxDQUFBN0IsS0FBQTtFQUNBLFFBQUFxQyxHQUFBLFdBQUFmLEtBQUEsQ0FBQWEsd0JBQUEsQ0FBQUUsR0FBQSxFQUFBckIsUUFBQTtBQUNBO0FBRUEsU0FBQWMsY0FBQTlCLEtBQUEsRUFBQWEsU0FBQTtFQUNBO0VBQ0EsS0FBQUEsU0FBQSxLQUFBQSxTQUFBLENBQUE1QixNQUFBO0lBQ0E7RUFDQTtFQUNBLElBQUFvRCxHQUFBLEdBQUFSLGtCQUFBLENBQUE3QixLQUFBO0VBQ0EsUUFBQXFDLEdBQUEsVUFBQWYsS0FBQSxDQUFBYSx3QkFBQSxDQUFBRSxHQUFBLEVBQUF4QixTQUFBO0FBQ0E7QUFFQSxTQUFBbUIsMEJBQUFoQyxLQUFBO0VBQ0EsSUFBQUEsS0FBQSxDQUFBa0MsT0FBQTtJQUNBLFFBQUFsQyxLQUFBLENBQUFrQyxPQUFBO0VBQ0E7RUFDQSxJQUFBbEMsS0FBQSxDQUFBc0MsU0FBQTtJQUNBLElBQUFDLE1BQUEsR0FBQXZDLEtBQUEsQ0FBQXNDLFNBQUEsQ0FBQUMsTUFBQTtJQUNBO01BQ0EsSUFBQUMsSUFBQSxHQUFBRCxNQUFBLElBQUFBLE1BQUEsQ0FBQUEsTUFBQSxDQUFBdEQsTUFBQTtRQUFBd0QsU0FBQSxHQUFBRCxJQUFBLENBQUFULElBQUE7UUFBQUEsSUFBQSxHQUFBVSxTQUFBLG1CQUFBQSxTQUFBO1FBQUFDLFVBQUEsR0FBQUYsSUFBQSxDQUFBL0MsS0FBQTtRQUFBQSxLQUFBLEdBQUFpRCxVQUFBLG1CQUFBQSxVQUFBO01BQ0EsV0FBQTVCLE1BQUEsQ0FBQXJCLEtBQUEsTUFBQXFCLE1BQUEsQ0FBQWlCLElBQUEsUUFBQWpCLE1BQUEsQ0FBQXJCLEtBQUE7SUFDQSxTQUFBa0QsRUFBQTtNQUNBLFFBQUF0QixnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQUMsS0FBQSxDQUFBQyxNQUFBLENBQUFxQixLQUFBLHFDQUFBOUIsTUFBQSxDQUFBUSxLQUFBLENBQUFHLG1CQUFBLENBQUF6QixLQUFBO01BQ0E7SUFDQTtFQUNBO0VBQ0E7QUFDQTtBQUVBLFNBQUFvQixlQUFBcEIsS0FBQTtFQUNBO0lBQ0E7SUFDQTtJQUNBLE9BQUFBLEtBQUEsQ0FBQXNDLFNBQUEsQ0FBQUMsTUFBQSxJQUFBUixJQUFBO0VBQ0EsU0FBQWMsQ0FBQTtJQUNBO0VBQUE7RUFFQTtBQUNBO0FBRUEsU0FBQUMsaUJBQUE7RUFBQSxJQUFBQyxNQUFBLEdBQUEvRCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUE7RUFDQSxTQUFBZ0UsQ0FBQSxHQUFBRCxNQUFBLENBQUE5RCxNQUFBLE1BQUErRCxDQUFBLE9BQUFBLENBQUE7SUFDQSxJQUFBQyxLQUFBLEdBQUFGLE1BQUEsQ0FBQUMsQ0FBQTtJQUVBLElBQUFDLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxRQUFBLHNCQUFBRCxLQUFBLENBQUFDLFFBQUE7TUFDQSxPQUFBRCxLQUFBLENBQUFDLFFBQUE7SUFDQTtFQUNBO0VBRUE7QUFDQTtBQUVBLFNBQUFyQixtQkFBQTdCLEtBQUE7RUFDQTtJQUNBLElBQUErQyxNQUFBO0lBQ0E7TUFDQTtNQUNBQSxNQUFBLEdBQUEvQyxLQUFBLENBQUFzQyxTQUFBLENBQUFDLE1BQUEsSUFBQVksVUFBQSxDQUFBSixNQUFBO0lBQ0EsU0FBQUYsQ0FBQTtNQUNBO0lBQUE7SUFFQSxPQUFBRSxNQUFBLEdBQUFELGdCQUFBLENBQUFDLE1BQUE7RUFDQSxTQUFBSixFQUFBO0lBQ0EsUUFBQXRCLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQXFCLEtBQUEsaUNBQUE5QixNQUFBLENBQUFRLEtBQUEsQ0FBQUcsbUJBQUEsQ0FBQXpCLEtBQUE7SUFDQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvaW50ZWdyYXRpb25zL2luYm91bmRmaWx0ZXJzLnRzPzI1NGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24sIFN0YWNrRnJhbWUgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGdldEV2ZW50RGVzY3JpcHRpb24sIGxvZ2dlciwgc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8vIFwiU2NyaXB0IGVycm9yLlwiIGlzIGhhcmQgY29kZWQgaW50byBicm93c2VycyBmb3IgZXJyb3JzIHRoYXQgaXQgY2FuJ3QgcmVhZC5cbi8vIHRoaXMgaXMgdGhlIHJlc3VsdCBvZiBhIHNjcmlwdCBiZWluZyBwdWxsZWQgaW4gZnJvbSBhbiBleHRlcm5hbCBkb21haW4gYW5kIENPUlMuXG5jb25zdCBERUZBVUxUX0lHTk9SRV9FUlJPUlMgPSBbL15TY3JpcHQgZXJyb3JcXC4/JC8sIC9eSmF2YXNjcmlwdCBlcnJvcjogU2NyaXB0IGVycm9yXFwuPyBvbiBsaW5lIDAkL107XG5cbi8qKiBPcHRpb25zIGZvciB0aGUgSW5ib3VuZEZpbHRlcnMgaW50ZWdyYXRpb24gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5ib3VuZEZpbHRlcnNPcHRpb25zIHtcbiAgYWxsb3dVcmxzOiBBcnJheTxzdHJpbmcgfCBSZWdFeHA+O1xuICBkZW55VXJsczogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcbiAgaWdub3JlRXJyb3JzOiBBcnJheTxzdHJpbmcgfCBSZWdFeHA+O1xuICBpZ25vcmVUcmFuc2FjdGlvbnM6IEFycmF5PHN0cmluZyB8IFJlZ0V4cD47XG4gIGlnbm9yZUludGVybmFsOiBib29sZWFuO1xufVxuXG4vKiogSW5ib3VuZCBmaWx0ZXJzIGNvbmZpZ3VyYWJsZSBieSB0aGUgdXNlciAqL1xuZXhwb3J0IGNsYXNzIEluYm91bmRGaWx0ZXJzIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdJbmJvdW5kRmlsdGVycyc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gSW5ib3VuZEZpbHRlcnMuaWQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnM6IFBhcnRpYWw8SW5ib3VuZEZpbHRlcnNPcHRpb25zPiA9IHt9KSB7fVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShhZGRHbG9iYWxFdmVudFByb2Nlc3NvcjogKHByb2Nlc3NvcjogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQsIGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IHZvaWQge1xuICAgIGNvbnN0IGV2ZW50UHJvY2VzczogRXZlbnRQcm9jZXNzb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gICAgICBpZiAoaHViKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSBodWIuZ2V0SW50ZWdyYXRpb24oSW5ib3VuZEZpbHRlcnMpO1xuICAgICAgICBpZiAoc2VsZikge1xuICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGh1Yi5nZXRDbGllbnQoKTtcbiAgICAgICAgICBjb25zdCBjbGllbnRPcHRpb25zID0gY2xpZW50ID8gY2xpZW50LmdldE9wdGlvbnMoKSA6IHt9O1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBfbWVyZ2VPcHRpb25zKHNlbGYuX29wdGlvbnMsIGNsaWVudE9wdGlvbnMpO1xuICAgICAgICAgIHJldHVybiBfc2hvdWxkRHJvcEV2ZW50KGV2ZW50LCBvcHRpb25zKSA/IG51bGwgOiBldmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH07XG5cbiAgICBldmVudFByb2Nlc3MuaWQgPSB0aGlzLm5hbWU7XG4gICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZXZlbnRQcm9jZXNzKTtcbiAgfVxufVxuXG4vKiogSlNEb2MgKi9cbmV4cG9ydCBmdW5jdGlvbiBfbWVyZ2VPcHRpb25zKFxuICBpbnRlcm5hbE9wdGlvbnM6IFBhcnRpYWw8SW5ib3VuZEZpbHRlcnNPcHRpb25zPiA9IHt9LFxuICBjbGllbnRPcHRpb25zOiBQYXJ0aWFsPEluYm91bmRGaWx0ZXJzT3B0aW9ucz4gPSB7fSxcbik6IFBhcnRpYWw8SW5ib3VuZEZpbHRlcnNPcHRpb25zPiB7XG4gIHJldHVybiB7XG4gICAgYWxsb3dVcmxzOiBbLi4uKGludGVybmFsT3B0aW9ucy5hbGxvd1VybHMgfHwgW10pLCAuLi4oY2xpZW50T3B0aW9ucy5hbGxvd1VybHMgfHwgW10pXSxcbiAgICBkZW55VXJsczogWy4uLihpbnRlcm5hbE9wdGlvbnMuZGVueVVybHMgfHwgW10pLCAuLi4oY2xpZW50T3B0aW9ucy5kZW55VXJscyB8fCBbXSldLFxuICAgIGlnbm9yZUVycm9yczogW1xuICAgICAgLi4uKGludGVybmFsT3B0aW9ucy5pZ25vcmVFcnJvcnMgfHwgW10pLFxuICAgICAgLi4uKGNsaWVudE9wdGlvbnMuaWdub3JlRXJyb3JzIHx8IFtdKSxcbiAgICAgIC4uLkRFRkFVTFRfSUdOT1JFX0VSUk9SUyxcbiAgICBdLFxuICAgIGlnbm9yZVRyYW5zYWN0aW9uczogWy4uLihpbnRlcm5hbE9wdGlvbnMuaWdub3JlVHJhbnNhY3Rpb25zIHx8IFtdKSwgLi4uKGNsaWVudE9wdGlvbnMuaWdub3JlVHJhbnNhY3Rpb25zIHx8IFtdKV0sXG4gICAgaWdub3JlSW50ZXJuYWw6IGludGVybmFsT3B0aW9ucy5pZ25vcmVJbnRlcm5hbCAhPT0gdW5kZWZpbmVkID8gaW50ZXJuYWxPcHRpb25zLmlnbm9yZUludGVybmFsIDogdHJ1ZSxcbiAgfTtcbn1cblxuLyoqIEpTRG9jICovXG5leHBvcnQgZnVuY3Rpb24gX3Nob3VsZERyb3BFdmVudChldmVudDogRXZlbnQsIG9wdGlvbnM6IFBhcnRpYWw8SW5ib3VuZEZpbHRlcnNPcHRpb25zPik6IGJvb2xlYW4ge1xuICBpZiAob3B0aW9ucy5pZ25vcmVJbnRlcm5hbCAmJiBfaXNTZW50cnlFcnJvcihldmVudCkpIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiZcbiAgICAgIGxvZ2dlci53YXJuKGBFdmVudCBkcm9wcGVkIGR1ZSB0byBiZWluZyBpbnRlcm5hbCBTZW50cnkgRXJyb3IuXFxuRXZlbnQ6ICR7Z2V0RXZlbnREZXNjcmlwdGlvbihldmVudCl9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKF9pc0lnbm9yZWRFcnJvcihldmVudCwgb3B0aW9ucy5pZ25vcmVFcnJvcnMpKSB7XG4gICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYEV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgXFxgaWdub3JlRXJyb3JzXFxgIG9wdGlvbi5cXG5FdmVudDogJHtnZXRFdmVudERlc2NyaXB0aW9uKGV2ZW50KX1gLFxuICAgICAgKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoX2lzSWdub3JlZFRyYW5zYWN0aW9uKGV2ZW50LCBvcHRpb25zLmlnbm9yZVRyYW5zYWN0aW9ucykpIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiZcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBgRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgbWF0Y2hlZCBieSBcXGBpZ25vcmVUcmFuc2FjdGlvbnNcXGAgb3B0aW9uLlxcbkV2ZW50OiAke2dldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpfWAsXG4gICAgICApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChfaXNEZW5pZWRVcmwoZXZlbnQsIG9wdGlvbnMuZGVueVVybHMpKSB7XG4gICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYEV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgXFxgZGVueVVybHNcXGAgb3B0aW9uLlxcbkV2ZW50OiAke2dldEV2ZW50RGVzY3JpcHRpb24oXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICl9LlxcblVybDogJHtfZ2V0RXZlbnRGaWx0ZXJVcmwoZXZlbnQpfWAsXG4gICAgICApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghX2lzQWxsb3dlZFVybChldmVudCwgb3B0aW9ucy5hbGxvd1VybHMpKSB7XG4gICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYEV2ZW50IGRyb3BwZWQgZHVlIHRvIG5vdCBiZWluZyBtYXRjaGVkIGJ5IFxcYGFsbG93VXJsc1xcYCBvcHRpb24uXFxuRXZlbnQ6ICR7Z2V0RXZlbnREZXNjcmlwdGlvbihcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgKX0uXFxuVXJsOiAke19nZXRFdmVudEZpbHRlclVybChldmVudCl9YCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfaXNJZ25vcmVkRXJyb3IoZXZlbnQ6IEV2ZW50LCBpZ25vcmVFcnJvcnM/OiBBcnJheTxzdHJpbmcgfCBSZWdFeHA+KTogYm9vbGVhbiB7XG4gIC8vIElmIGV2ZW50LnR5cGUsIHRoaXMgaXMgbm90IGFuIGVycm9yXG4gIGlmIChldmVudC50eXBlIHx8ICFpZ25vcmVFcnJvcnMgfHwgIWlnbm9yZUVycm9ycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gX2dldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyhldmVudCkuc29tZShtZXNzYWdlID0+IHN0cmluZ01hdGNoZXNTb21lUGF0dGVybihtZXNzYWdlLCBpZ25vcmVFcnJvcnMpKTtcbn1cblxuZnVuY3Rpb24gX2lzSWdub3JlZFRyYW5zYWN0aW9uKGV2ZW50OiBFdmVudCwgaWdub3JlVHJhbnNhY3Rpb25zPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPik6IGJvb2xlYW4ge1xuICBpZiAoZXZlbnQudHlwZSAhPT0gJ3RyYW5zYWN0aW9uJyB8fCAhaWdub3JlVHJhbnNhY3Rpb25zIHx8ICFpZ25vcmVUcmFuc2FjdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgbmFtZSA9IGV2ZW50LnRyYW5zYWN0aW9uO1xuICByZXR1cm4gbmFtZSA/IHN0cmluZ01hdGNoZXNTb21lUGF0dGVybihuYW1lLCBpZ25vcmVUcmFuc2FjdGlvbnMpIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9pc0RlbmllZFVybChldmVudDogRXZlbnQsIGRlbnlVcmxzPzogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPik6IGJvb2xlYW4ge1xuICAvLyBUT0RPOiBVc2UgR2xvYiBpbnN0ZWFkP1xuICBpZiAoIWRlbnlVcmxzIHx8ICFkZW55VXJscy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgdXJsID0gX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50KTtcbiAgcmV0dXJuICF1cmwgPyBmYWxzZSA6IHN0cmluZ01hdGNoZXNTb21lUGF0dGVybih1cmwsIGRlbnlVcmxzKTtcbn1cblxuZnVuY3Rpb24gX2lzQWxsb3dlZFVybChldmVudDogRXZlbnQsIGFsbG93VXJscz86IEFycmF5PHN0cmluZyB8IFJlZ0V4cD4pOiBib29sZWFuIHtcbiAgLy8gVE9ETzogVXNlIEdsb2IgaW5zdGVhZD9cbiAgaWYgKCFhbGxvd1VybHMgfHwgIWFsbG93VXJscy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCB1cmwgPSBfZ2V0RXZlbnRGaWx0ZXJVcmwoZXZlbnQpO1xuICByZXR1cm4gIXVybCA/IHRydWUgOiBzdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4odXJsLCBhbGxvd1VybHMpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UG9zc2libGVFdmVudE1lc3NhZ2VzKGV2ZW50OiBFdmVudCk6IHN0cmluZ1tdIHtcbiAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICByZXR1cm4gW2V2ZW50Lm1lc3NhZ2VdO1xuICB9XG4gIGlmIChldmVudC5leGNlcHRpb24pIHtcbiAgICBjb25zdCB7IHZhbHVlcyB9ID0gZXZlbnQuZXhjZXB0aW9uO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHR5cGUgPSAnJywgdmFsdWUgPSAnJyB9ID0gKHZhbHVlcyAmJiB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdKSB8fCB7fTtcbiAgICAgIHJldHVybiBbYCR7dmFsdWV9YCwgYCR7dHlwZX06ICR7dmFsdWV9YF07XG4gICAgfSBjYXRjaCAob08pIHtcbiAgICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIuZXJyb3IoYENhbm5vdCBleHRyYWN0IG1lc3NhZ2UgZm9yIGV2ZW50ICR7Z2V0RXZlbnREZXNjcmlwdGlvbihldmVudCl9YCk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gX2lzU2VudHJ5RXJyb3IoZXZlbnQ6IEV2ZW50KTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgLy8gQHRzLWlnbm9yZSBjYW4ndCBiZSBhIHNlbnRyeSBlcnJvciBpZiB1bmRlZmluZWRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgcmV0dXJuIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZSA9PT0gJ1NlbnRyeUVycm9yJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX2dldExhc3RWYWxpZFVybChmcmFtZXM6IFN0YWNrRnJhbWVbXSA9IFtdKTogc3RyaW5nIHwgbnVsbCB7XG4gIGZvciAobGV0IGkgPSBmcmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBmcmFtZSA9IGZyYW1lc1tpXTtcblxuICAgIGlmIChmcmFtZSAmJiBmcmFtZS5maWxlbmFtZSAhPT0gJzxhbm9ueW1vdXM+JyAmJiBmcmFtZS5maWxlbmFtZSAhPT0gJ1tuYXRpdmUgY29kZV0nKSB7XG4gICAgICByZXR1cm4gZnJhbWUuZmlsZW5hbWUgfHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gX2dldEV2ZW50RmlsdGVyVXJsKGV2ZW50OiBFdmVudCk6IHN0cmluZyB8IG51bGwge1xuICB0cnkge1xuICAgIGxldCBmcmFtZXM7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgd2Ugb25seSBjYXJlIGFib3V0IGZyYW1lcyBpZiB0aGUgd2hvbGUgdGhpbmcgaGVyZSBpcyBkZWZpbmVkXG4gICAgICBmcmFtZXMgPSBldmVudC5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2UuZnJhbWVzO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlnbm9yZVxuICAgIH1cbiAgICByZXR1cm4gZnJhbWVzID8gX2dldExhc3RWYWxpZFVybChmcmFtZXMpIDogbnVsbDtcbiAgfSBjYXRjaCAob08pIHtcbiAgICBfX0RFQlVHX0JVSUxEX18gJiYgbG9nZ2VyLmVycm9yKGBDYW5ub3QgZXh0cmFjdCB1cmwgZm9yIGV2ZW50ICR7Z2V0RXZlbnREZXNjcmlwdGlvbihldmVudCl9YCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJERUZBVUxUX0lHTk9SRV9FUlJPUlMiLCJJbmJvdW5kRmlsdGVycyIsIl9vcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwic2V0dXBPbmNlIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJnZXRDdXJyZW50SHViIiwiZXZlbnRQcm9jZXNzIiwiZXZlbnQiLCJodWIiLCJzZWxmIiwiZ2V0SW50ZWdyYXRpb24iLCJjbGllbnQiLCJnZXRDbGllbnQiLCJjbGllbnRPcHRpb25zIiwiZ2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJfbWVyZ2VPcHRpb25zIiwiX3Nob3VsZERyb3BFdmVudCIsIl9faW5pdFN0YXRpYyIsImludGVybmFsT3B0aW9ucyIsImFsbG93VXJscyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImRlbnlVcmxzIiwiaWdub3JlRXJyb3JzIiwiaWdub3JlVHJhbnNhY3Rpb25zIiwiaWdub3JlSW50ZXJuYWwiLCJfaXNTZW50cnlFcnJvciIsIl9fU0VOVFJZX0RFQlVHX18iLCJ1dGlscyIsImxvZ2dlciIsIndhcm4iLCJnZXRFdmVudERlc2NyaXB0aW9uIiwiX2lzSWdub3JlZEVycm9yIiwiX2lzSWdub3JlZFRyYW5zYWN0aW9uIiwiX2lzRGVuaWVkVXJsIiwiX2dldEV2ZW50RmlsdGVyVXJsIiwiX2lzQWxsb3dlZFVybCIsInR5cGUiLCJfZ2V0UG9zc2libGVFdmVudE1lc3NhZ2VzIiwic29tZSIsIm1lc3NhZ2UiLCJzdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4iLCJ0cmFuc2FjdGlvbiIsInVybCIsImV4Y2VwdGlvbiIsInZhbHVlcyIsIl9yZWYiLCJfcmVmJHR5cGUiLCJfcmVmJHZhbHVlIiwib08iLCJlcnJvciIsImUiLCJfZ2V0TGFzdFZhbGlkVXJsIiwiZnJhbWVzIiwiaSIsImZyYW1lIiwiZmlsZW5hbWUiLCJzdGFja3RyYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/integrations/inboundfilters.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/integrations/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/integrations/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var functiontostring = __webpack_require__(/*! ./functiontostring.js */ "./node_modules/@sentry/core/cjs/integrations/functiontostring.js");
var inboundfilters = __webpack_require__(/*! ./inboundfilters.js */ "./node_modules/@sentry/core/cjs/integrations/inboundfilters.js");
exports.FunctionToString = functiontostring.FunctionToString;
exports.InboundFilters = inboundfilters.InboundFilters;

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/scope.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/scope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar session = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/cjs/session.js\");\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nvar DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  function Scope() {\n    _classCallCheck(this, Scope);\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  _createClass(Scope, [{\n    key: \"addScopeListener\",\n    value:\n    /**\n     * Add internal on change listener. Used for sub SDKs that need to store the scope.\n     * @hidden\n     */\n    function addScopeListener(callback) {\n      this._scopeListeners.push(callback);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addEventProcessor\",\n    value: function addEventProcessor(callback) {\n      this._eventProcessors.push(callback);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this._user = user || {};\n      if (this._session) {\n        session.updateSession(this._session, {\n          user: user\n        });\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return this._user;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getRequestSession\",\n    value: function getRequestSession() {\n      return this._requestSession;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setRequestSession\",\n    value: function setRequestSession(requestSession) {\n      this._requestSession = requestSession;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), tags);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), {}, _defineProperty({}, key, value));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), extras);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), {}, _defineProperty({}, key, extra));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setFingerprint\",\n    value: function setFingerprint(fingerprint) {\n      this._fingerprint = fingerprint;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level) {\n      this._level = level;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTransactionName\",\n    value: function setTransactionName(name) {\n      this._transactionName = name;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._contexts[key];\n      } else {\n        this._contexts[key] = context;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSpan\",\n    value: function setSpan(span) {\n      this._span = span;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSpan\",\n    value: function getSpan() {\n      return this._span;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction() {\n      // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n      // have a pointer to the currently-active transaction.\n      var span = this.getSpan();\n      return span && span.transaction;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSession\",\n    value: function setSession(session) {\n      if (!session) {\n        delete this._session;\n      } else {\n        this._session = session;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return this._session;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"update\",\n    value: function update(captureContext) {\n      if (!captureContext) {\n        return this;\n      }\n      if (typeof captureContext === 'function') {\n        var updatedScope = captureContext(this);\n        return updatedScope instanceof Scope ? updatedScope : this;\n      }\n      if (captureContext instanceof Scope) {\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext._tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext._extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext._contexts);\n        if (captureContext._user && Object.keys(captureContext._user).length) {\n          this._user = captureContext._user;\n        }\n        if (captureContext._level) {\n          this._level = captureContext._level;\n        }\n        if (captureContext._fingerprint) {\n          this._fingerprint = captureContext._fingerprint;\n        }\n        if (captureContext._requestSession) {\n          this._requestSession = captureContext._requestSession;\n        }\n      } else if (utils.isPlainObject(captureContext)) {\n        // eslint-disable-next-line no-param-reassign\n        captureContext = captureContext;\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext.tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext.extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext.contexts);\n        if (captureContext.user) {\n          this._user = captureContext.user;\n        }\n        if (captureContext.level) {\n          this._level = captureContext.level;\n        }\n        if (captureContext.fingerprint) {\n          this._fingerprint = captureContext.fingerprint;\n        }\n        if (captureContext.requestSession) {\n          this._requestSession = captureContext.requestSession;\n        }\n      }\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._breadcrumbs = [];\n      this._tags = {};\n      this._extra = {};\n      this._user = {};\n      this._contexts = {};\n      this._level = undefined;\n      this._transactionName = undefined;\n      this._fingerprint = undefined;\n      this._requestSession = undefined;\n      this._span = undefined;\n      this._session = undefined;\n      this._notifyScopeListeners();\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n      var maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n      // No data has been changed, so don't notify scope listeners\n      if (maxCrumbs <= 0) {\n        return this;\n      }\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: utils.dateTimestampInSeconds()\n      }, breadcrumb);\n      this._breadcrumbs = [].concat(_toConsumableArray(this._breadcrumbs), [mergedBreadcrumb]).slice(-maxCrumbs);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getLastBreadcrumb\",\n    value: function getLastBreadcrumb() {\n      return this._breadcrumbs[this._breadcrumbs.length - 1];\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearBreadcrumbs\",\n    value: function clearBreadcrumbs() {\n      this._breadcrumbs = [];\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addAttachment\",\n    value: function addAttachment(attachment) {\n      this._attachments.push(attachment);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this._attachments;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearAttachments\",\n    value: function clearAttachments() {\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * Applies data from the scope to the event and runs all event processors on it.\n     *\n     * @param event Event\n     * @param hint Object containing additional information about the original exception, for use by the event processors.\n     * @hidden\n     */\n  }, {\n    key: \"applyToEvent\",\n    value: function applyToEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._extra && Object.keys(this._extra).length) {\n        event.extra = _objectSpread(_objectSpread({}, this._extra), event.extra);\n      }\n      if (this._tags && Object.keys(this._tags).length) {\n        event.tags = _objectSpread(_objectSpread({}, this._tags), event.tags);\n      }\n      if (this._user && Object.keys(this._user).length) {\n        event.user = _objectSpread(_objectSpread({}, this._user), event.user);\n      }\n      if (this._contexts && Object.keys(this._contexts).length) {\n        event.contexts = _objectSpread(_objectSpread({}, this._contexts), event.contexts);\n      }\n      if (this._level) {\n        event.level = this._level;\n      }\n      if (this._transactionName) {\n        event.transaction = this._transactionName;\n      }\n\n      // We want to set the trace context for normal events only if there isn't already\n      // a trace context on the event. There is a product feature in place where we link\n      // errors with transaction and it relies on that.\n      if (this._span) {\n        event.contexts = _objectSpread({\n          trace: this._span.getTraceContext()\n        }, event.contexts);\n        var transaction = this._span.transaction;\n        if (transaction) {\n          event.sdkProcessingMetadata = _objectSpread({\n            dynamicSamplingContext: transaction.getDynamicSamplingContext()\n          }, event.sdkProcessingMetadata);\n          var transactionName = transaction.name;\n          if (transactionName) {\n            event.tags = _objectSpread({\n              transaction: transactionName\n            }, event.tags);\n          }\n        }\n      }\n      this._applyFingerprint(event);\n      event.breadcrumbs = [].concat(_toConsumableArray(event.breadcrumbs || []), _toConsumableArray(this._breadcrumbs));\n      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n      event.sdkProcessingMetadata = _objectSpread(_objectSpread({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);\n      return this._notifyEventProcessors([].concat(_toConsumableArray(getGlobalEventProcessors()), _toConsumableArray(this._eventProcessors)), event, hint);\n    }\n\n    /**\n     * Add data which will be accessible during event processing but won't get sent to Sentry\n     */\n  }, {\n    key: \"setSDKProcessingMetadata\",\n    value: function setSDKProcessingMetadata(newData) {\n      this._sdkProcessingMetadata = _objectSpread(_objectSpread({}, this._sdkProcessingMetadata), newData);\n      return this;\n    }\n\n    /**\n     * This will be called after {@link applyToEvent} is finished.\n     */\n  }, {\n    key: \"_notifyEventProcessors\",\n    value: function _notifyEventProcessors(processors, event, hint) {\n      var _this = this;\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new utils.SyncPromise(function (resolve, reject) {\n        var processor = processors[index];\n        if (event === null || typeof processor !== 'function') {\n          resolve(event);\n        } else {\n          var result = processor(_objectSpread({}, event), hint);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && utils.logger.log(\"Event processor \\\"\".concat(processor.id, \"\\\" dropped event\"));\n          if (utils.isThenable(result)) {\n            void result.then(function (final) {\n              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n            }).then(null, reject);\n          } else {\n            void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n          }\n        }\n      });\n    }\n\n    /**\n     * This will be called on every set call.\n     */\n  }, {\n    key: \"_notifyScopeListeners\",\n    value: function _notifyScopeListeners() {\n      var _this2 = this;\n      // We need this check for this._notifyingListeners to be able to work on scope during updates\n      // If this check is not here we'll produce endless recursion when something is done with the scope\n      // during the callback.\n      if (!this._notifyingListeners) {\n        this._notifyingListeners = true;\n        this._scopeListeners.forEach(function (callback) {\n          callback(_this2);\n        });\n        this._notifyingListeners = false;\n      }\n    }\n\n    /**\n     * Applies fingerprint from the scope to the event if there's one,\n     * uses message if there's one instead or get rid of empty fingerprint\n     */\n  }, {\n    key: \"_applyFingerprint\",\n    value: function _applyFingerprint(event) {\n      // Make sure it's an array first and we actually have something in place\n      event.fingerprint = event.fingerprint ? utils.arrayify(event.fingerprint) : [];\n\n      // If we have something on the scope, then merge it with event\n      if (this._fingerprint) {\n        event.fingerprint = event.fingerprint.concat(this._fingerprint);\n      }\n\n      // If we have no data at all, remove empty array default\n      if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n      }\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(scope) {\n      var newScope = new Scope();\n      if (scope) {\n        newScope._breadcrumbs = _toConsumableArray(scope._breadcrumbs);\n        newScope._tags = _objectSpread({}, scope._tags);\n        newScope._extra = _objectSpread({}, scope._extra);\n        newScope._contexts = _objectSpread({}, scope._contexts);\n        newScope._user = scope._user;\n        newScope._level = scope._level;\n        newScope._span = scope._span;\n        newScope._session = scope._session;\n        newScope._transactionName = scope._transactionName;\n        newScope._fingerprint = scope._fingerprint;\n        newScope._eventProcessors = _toConsumableArray(scope._eventProcessors);\n        newScope._requestSession = scope._requestSession;\n        newScope._attachments = _toConsumableArray(scope._attachments);\n        newScope._sdkProcessingMetadata = _objectSpread({}, scope._sdkProcessingMetadata);\n      }\n      return newScope;\n    }\n  }]);\n  return Scope;\n}();\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  return utils.getGlobalSingleton('globalEventProcessors', function () {\n    return [];\n  });\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\nexports.Scope = Scope;\nexports.addGlobalEventProcessor = addGlobalEventProcessor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9zY29wZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1DQTtBQUNBO0FBQ0E7QUFDQSxJQUFBQSx1QkFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUhBLElBSUFDLEtBQUE7RUFBQTs7RUFDQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTs7RUFHQTtBQUNBO0FBQ0E7QUFDQTs7RUFHQTs7RUFHQTtFQUNBOztFQUdBOztFQUdBOztFQUdBOztFQUdBOztFQUdBOztFQUVBLFNBQUFBLE1BQUE7SUFBQUMsZUFBQSxPQUFBRCxLQUFBO0lBQ0EsS0FBQUUsbUJBQUE7SUFDQSxLQUFBQyxlQUFBO0lBQ0EsS0FBQUMsZ0JBQUE7SUFDQSxLQUFBQyxZQUFBO0lBQ0EsS0FBQUMsWUFBQTtJQUNBLEtBQUFDLEtBQUE7SUFDQSxLQUFBQyxLQUFBO0lBQ0EsS0FBQUMsTUFBQTtJQUNBLEtBQUFDLFNBQUE7SUFDQSxLQUFBQyxzQkFBQTtFQUNBOztFQUVBO0FBQ0E7QUFDQTtBQUNBO0VBSEFDLFlBQUEsQ0FBQVosS0FBQTtJQUFBYSxHQUFBO0lBQUFDLEtBQUE7SUF5QkE7QUFDQTtBQUNBO0FBQ0E7SUFDQSxTQUFBQyxpQkFBQUMsUUFBQTtNQUNBLEtBQUFiLGVBQUEsQ0FBQWMsSUFBQSxDQUFBRCxRQUFBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQUgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQUksa0JBQUFGLFFBQUE7TUFDQSxLQUFBWixnQkFBQSxDQUFBYSxJQUFBLENBQUFELFFBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFLLFFBQUFDLElBQUE7TUFDQSxLQUFBYixLQUFBLEdBQUFhLElBQUE7TUFDQSxTQUFBQyxRQUFBO1FBQ0FDLE9BQUEsQ0FBQUMsYUFBQSxNQUFBRixRQUFBO1VBQUFELElBQUEsRUFBQUE7UUFBQTtNQUNBO01BQ0EsS0FBQUkscUJBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFYLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFXLFFBQUE7TUFDQSxZQUFBbEIsS0FBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFZLGtCQUFBO01BQ0EsWUFBQUMsZUFBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFkLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFjLGtCQUFBQyxjQUFBO01BQ0EsS0FBQUYsZUFBQSxHQUFBRSxjQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBaEIsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQWdCLFFBQUFDLElBQUE7TUFDQSxLQUFBdkIsS0FBQSxHQUFBd0IsYUFBQSxDQUFBQSxhQUFBLEtBQ0EsS0FBQXhCLEtBQUEsR0FDQXVCLElBQUEsQ0FDQTtNQUNBLEtBQUFQLHFCQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBWCxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBbUIsT0FBQXBCLEdBQUEsRUFBQUMsS0FBQTtNQUNBLEtBQUFOLEtBQUEsR0FBQXdCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBeEIsS0FBQSxPQUFBMEIsZUFBQSxLQUFBckIsR0FBQSxFQUFBQyxLQUFBO01BQ0EsS0FBQVUscUJBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFYLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFxQixVQUFBQyxNQUFBO01BQ0EsS0FBQTNCLE1BQUEsR0FBQXVCLGFBQUEsQ0FBQUEsYUFBQSxLQUNBLEtBQUF2QixNQUFBLEdBQ0EyQixNQUFBLENBQ0E7TUFDQSxLQUFBWixxQkFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQXVCLFNBQUF4QixHQUFBLEVBQUF5QixLQUFBO01BQ0EsS0FBQTdCLE1BQUEsR0FBQXVCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBdkIsTUFBQSxPQUFBeUIsZUFBQSxLQUFBckIsR0FBQSxFQUFBeUIsS0FBQTtNQUNBLEtBQUFkLHFCQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBWCxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBeUIsZUFBQUMsV0FBQTtNQUNBLEtBQUFDLFlBQUEsR0FBQUQsV0FBQTtNQUNBLEtBQUFoQixxQkFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQTRCO0lBQ0E7SUFDQUMsS0FBQSxFQUNBO01BQ0EsS0FBQUMsTUFBQSxHQUFBRCxLQUFBO01BQ0EsS0FBQW5CLHFCQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBWCxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBK0IsbUJBQUFDLElBQUE7TUFDQSxLQUFBQyxnQkFBQSxHQUFBRCxJQUFBO01BQ0EsS0FBQXRCLHFCQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBWCxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBa0MsV0FBQW5DLEdBQUEsRUFBQW9DLE9BQUE7TUFDQSxJQUFBQSxPQUFBO1FBQ0E7UUFDQSxZQUFBdkMsU0FBQSxDQUFBRyxHQUFBO01BQ0E7UUFDQSxLQUFBSCxTQUFBLENBQUFHLEdBQUEsSUFBQW9DLE9BQUE7TUFDQTtNQUVBLEtBQUF6QixxQkFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQW9DLFFBQUFDLElBQUE7TUFDQSxLQUFBQyxLQUFBLEdBQUFELElBQUE7TUFDQSxLQUFBM0IscUJBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFYLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUF1QyxRQUFBO01BQ0EsWUFBQUQsS0FBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUF2QyxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBd0MsZUFBQTtNQUNBO01BQ0E7TUFDQSxJQUFBSCxJQUFBLFFBQUFFLE9BQUE7TUFDQSxPQUFBRixJQUFBLElBQUFBLElBQUEsQ0FBQUksV0FBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUExQyxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBMEMsV0FBQWxDLE9BQUE7TUFDQSxLQUFBQSxPQUFBO1FBQ0EsWUFBQUQsUUFBQTtNQUNBO1FBQ0EsS0FBQUEsUUFBQSxHQUFBQyxPQUFBO01BQ0E7TUFDQSxLQUFBRSxxQkFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQTJDLFdBQUE7TUFDQSxZQUFBcEMsUUFBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFSLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUE0QyxPQUFBQyxjQUFBO01BQ0EsS0FBQUEsY0FBQTtRQUNBO01BQ0E7TUFFQSxXQUFBQSxjQUFBO1FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxjQUFBO1FBQ0EsT0FBQUMsWUFBQSxZQUFBNUQsS0FBQSxHQUFBNEQsWUFBQTtNQUNBO01BRUEsSUFBQUQsY0FBQSxZQUFBM0QsS0FBQTtRQUNBLEtBQUFRLEtBQUEsR0FBQXdCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBeEIsS0FBQSxHQUFBbUQsY0FBQSxDQUFBbkQsS0FBQTtRQUNBLEtBQUFDLE1BQUEsR0FBQXVCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBdkIsTUFBQSxHQUFBa0QsY0FBQSxDQUFBbEQsTUFBQTtRQUNBLEtBQUFDLFNBQUEsR0FBQXNCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBdEIsU0FBQSxHQUFBaUQsY0FBQSxDQUFBakQsU0FBQTtRQUNBLElBQUFpRCxjQUFBLENBQUFwRCxLQUFBLElBQUFzRCxNQUFBLENBQUFDLElBQUEsQ0FBQUgsY0FBQSxDQUFBcEQsS0FBQSxFQUFBd0QsTUFBQTtVQUNBLEtBQUF4RCxLQUFBLEdBQUFvRCxjQUFBLENBQUFwRCxLQUFBO1FBQ0E7UUFDQSxJQUFBb0QsY0FBQSxDQUFBZixNQUFBO1VBQ0EsS0FBQUEsTUFBQSxHQUFBZSxjQUFBLENBQUFmLE1BQUE7UUFDQTtRQUNBLElBQUFlLGNBQUEsQ0FBQWxCLFlBQUE7VUFDQSxLQUFBQSxZQUFBLEdBQUFrQixjQUFBLENBQUFsQixZQUFBO1FBQ0E7UUFDQSxJQUFBa0IsY0FBQSxDQUFBaEMsZUFBQTtVQUNBLEtBQUFBLGVBQUEsR0FBQWdDLGNBQUEsQ0FBQWhDLGVBQUE7UUFDQTtNQUNBLFdBQUFxQyxLQUFBLENBQUFDLGFBQUEsQ0FBQU4sY0FBQTtRQUNBO1FBQ0FBLGNBQUEsR0FBQUEsY0FBQTtRQUNBLEtBQUFuRCxLQUFBLEdBQUF3QixhQUFBLENBQUFBLGFBQUEsVUFBQXhCLEtBQUEsR0FBQW1ELGNBQUEsQ0FBQTVCLElBQUE7UUFDQSxLQUFBdEIsTUFBQSxHQUFBdUIsYUFBQSxDQUFBQSxhQUFBLFVBQUF2QixNQUFBLEdBQUFrRCxjQUFBLENBQUFyQixLQUFBO1FBQ0EsS0FBQTVCLFNBQUEsR0FBQXNCLGFBQUEsQ0FBQUEsYUFBQSxVQUFBdEIsU0FBQSxHQUFBaUQsY0FBQSxDQUFBTyxRQUFBO1FBQ0EsSUFBQVAsY0FBQSxDQUFBdkMsSUFBQTtVQUNBLEtBQUFiLEtBQUEsR0FBQW9ELGNBQUEsQ0FBQXZDLElBQUE7UUFDQTtRQUNBLElBQUF1QyxjQUFBLENBQUFoQixLQUFBO1VBQ0EsS0FBQUMsTUFBQSxHQUFBZSxjQUFBLENBQUFoQixLQUFBO1FBQ0E7UUFDQSxJQUFBZ0IsY0FBQSxDQUFBbkIsV0FBQTtVQUNBLEtBQUFDLFlBQUEsR0FBQWtCLGNBQUEsQ0FBQW5CLFdBQUE7UUFDQTtRQUNBLElBQUFtQixjQUFBLENBQUE5QixjQUFBO1VBQ0EsS0FBQUYsZUFBQSxHQUFBZ0MsY0FBQSxDQUFBOUIsY0FBQTtRQUNBO01BQ0E7TUFFQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFoQixHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBcUQsTUFBQTtNQUNBLEtBQUE5RCxZQUFBO01BQ0EsS0FBQUcsS0FBQTtNQUNBLEtBQUFDLE1BQUE7TUFDQSxLQUFBRixLQUFBO01BQ0EsS0FBQUcsU0FBQTtNQUNBLEtBQUFrQyxNQUFBLEdBQUF3QixTQUFBO01BQ0EsS0FBQXJCLGdCQUFBLEdBQUFxQixTQUFBO01BQ0EsS0FBQTNCLFlBQUEsR0FBQTJCLFNBQUE7TUFDQSxLQUFBekMsZUFBQSxHQUFBeUMsU0FBQTtNQUNBLEtBQUFoQixLQUFBLEdBQUFnQixTQUFBO01BQ0EsS0FBQS9DLFFBQUEsR0FBQStDLFNBQUE7TUFDQSxLQUFBNUMscUJBQUE7TUFDQSxLQUFBbEIsWUFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQU8sR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQXVELGNBQUFDLFVBQUEsRUFBQUMsY0FBQTtNQUNBLElBQUFDLFNBQUEsVUFBQUQsY0FBQSxnQkFBQUEsY0FBQSxHQUFBeEUsdUJBQUE7O01BRUE7TUFDQSxJQUFBeUUsU0FBQTtRQUNBO01BQ0E7TUFFQSxJQUFBQyxnQkFBQSxHQUFBekMsYUFBQTtRQUNBMEMsU0FBQSxFQUFBVixLQUFBLENBQUFXLHNCQUFBO01BQUEsR0FDQUwsVUFBQSxDQUNBO01BQ0EsS0FBQWpFLFlBQUEsTUFBQXVFLE1BQUEsQ0FBQUMsa0JBQUEsTUFBQXhFLFlBQUEsSUFBQW9FLGdCQUFBLEdBQUFLLEtBQUEsRUFBQU4sU0FBQTtNQUNBLEtBQUFoRCxxQkFBQTtNQUVBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQWlFLGtCQUFBO01BQ0EsWUFBQTFFLFlBQUEsTUFBQUEsWUFBQSxDQUFBMEQsTUFBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFsRCxHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBa0UsaUJBQUE7TUFDQSxLQUFBM0UsWUFBQTtNQUNBLEtBQUFtQixxQkFBQTtNQUNBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVgsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQW1FLGNBQUFDLFVBQUE7TUFDQSxLQUFBNUUsWUFBQSxDQUFBVyxJQUFBLENBQUFpRSxVQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBckUsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQXFFLGVBQUE7TUFDQSxZQUFBN0UsWUFBQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFPLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFzRSxpQkFBQTtNQUNBLEtBQUE5RSxZQUFBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQU5BO0lBQUFPLEdBQUE7SUFBQUMsS0FBQSxFQU9BLFNBQUF1RSxhQUFBQyxLQUFBO01BQUEsSUFBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUF6QixNQUFBLFFBQUF5QixTQUFBLFFBQUFwQixTQUFBLEdBQUFvQixTQUFBO01BQ0EsU0FBQS9FLE1BQUEsSUFBQW9ELE1BQUEsQ0FBQUMsSUFBQSxNQUFBckQsTUFBQSxFQUFBc0QsTUFBQTtRQUNBdUIsS0FBQSxDQUFBaEQsS0FBQSxHQUFBTixhQUFBLENBQUFBLGFBQUEsVUFBQXZCLE1BQUEsR0FBQTZFLEtBQUEsQ0FBQWhELEtBQUE7TUFDQTtNQUNBLFNBQUE5QixLQUFBLElBQUFxRCxNQUFBLENBQUFDLElBQUEsTUFBQXRELEtBQUEsRUFBQXVELE1BQUE7UUFDQXVCLEtBQUEsQ0FBQXZELElBQUEsR0FBQUMsYUFBQSxDQUFBQSxhQUFBLFVBQUF4QixLQUFBLEdBQUE4RSxLQUFBLENBQUF2RCxJQUFBO01BQ0E7TUFDQSxTQUFBeEIsS0FBQSxJQUFBc0QsTUFBQSxDQUFBQyxJQUFBLE1BQUF2RCxLQUFBLEVBQUF3RCxNQUFBO1FBQ0F1QixLQUFBLENBQUFsRSxJQUFBLEdBQUFZLGFBQUEsQ0FBQUEsYUFBQSxVQUFBekIsS0FBQSxHQUFBK0UsS0FBQSxDQUFBbEUsSUFBQTtNQUNBO01BQ0EsU0FBQVYsU0FBQSxJQUFBbUQsTUFBQSxDQUFBQyxJQUFBLE1BQUFwRCxTQUFBLEVBQUFxRCxNQUFBO1FBQ0F1QixLQUFBLENBQUFwQixRQUFBLEdBQUFsQyxhQUFBLENBQUFBLGFBQUEsVUFBQXRCLFNBQUEsR0FBQTRFLEtBQUEsQ0FBQXBCLFFBQUE7TUFDQTtNQUNBLFNBQUF0QixNQUFBO1FBQ0EwQyxLQUFBLENBQUEzQyxLQUFBLFFBQUFDLE1BQUE7TUFDQTtNQUNBLFNBQUFHLGdCQUFBO1FBQ0F1QyxLQUFBLENBQUEvQixXQUFBLFFBQUFSLGdCQUFBO01BQ0E7O01BRUE7TUFDQTtNQUNBO01BQ0EsU0FBQUssS0FBQTtRQUNBa0MsS0FBQSxDQUFBcEIsUUFBQSxHQUFBbEMsYUFBQTtVQUFBeUQsS0FBQSxPQUFBckMsS0FBQSxDQUFBc0MsZUFBQTtRQUFBLEdBQUFKLEtBQUEsQ0FBQXBCLFFBQUE7UUFDQSxJQUFBWCxXQUFBLFFBQUFILEtBQUEsQ0FBQUcsV0FBQTtRQUNBLElBQUFBLFdBQUE7VUFDQStCLEtBQUEsQ0FBQUsscUJBQUEsR0FBQTNELGFBQUE7WUFDQTRELHNCQUFBLEVBQUFyQyxXQUFBLENBQUFzQyx5QkFBQTtVQUFBLEdBQ0FQLEtBQUEsQ0FBQUsscUJBQUEsQ0FDQTtVQUNBLElBQUFHLGVBQUEsR0FBQXZDLFdBQUEsQ0FBQVQsSUFBQTtVQUNBLElBQUFnRCxlQUFBO1lBQ0FSLEtBQUEsQ0FBQXZELElBQUEsR0FBQUMsYUFBQTtjQUFBdUIsV0FBQSxFQUFBdUM7WUFBQSxHQUFBUixLQUFBLENBQUF2RCxJQUFBO1VBQ0E7UUFDQTtNQUNBO01BRUEsS0FBQWdFLGlCQUFBLENBQUFULEtBQUE7TUFFQUEsS0FBQSxDQUFBVSxXQUFBLE1BQUFwQixNQUFBLENBQUFDLGtCQUFBLENBQUFTLEtBQUEsQ0FBQVUsV0FBQSxTQUFBbkIsa0JBQUEsTUFBQXhFLFlBQUE7TUFDQWlGLEtBQUEsQ0FBQVUsV0FBQSxHQUFBVixLQUFBLENBQUFVLFdBQUEsQ0FBQWpDLE1BQUEsT0FBQXVCLEtBQUEsQ0FBQVUsV0FBQSxHQUFBNUIsU0FBQTtNQUVBa0IsS0FBQSxDQUFBSyxxQkFBQSxHQUFBM0QsYUFBQSxDQUFBQSxhQUFBLEtBQUFzRCxLQUFBLENBQUFLLHFCQUFBLFFBQUFoRixzQkFBQTtNQUVBLFlBQUFzRixzQkFBQSxJQUFBckIsTUFBQSxDQUFBQyxrQkFBQSxDQUFBcUIsd0JBQUEsS0FBQXJCLGtCQUFBLE1BQUF6RSxnQkFBQSxJQUFBa0YsS0FBQSxFQUFBQyxJQUFBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQTFFLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFxRix5QkFBQUMsT0FBQTtNQUNBLEtBQUF6RixzQkFBQSxHQUFBcUIsYUFBQSxDQUFBQSxhQUFBLFVBQUFyQixzQkFBQSxHQUFBeUYsT0FBQTtNQUVBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQXZGLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFtRix1QkFDQUksVUFBQSxFQUNBZixLQUFBLEVBQ0FDLElBQUEsRUFFQTtNQUFBLElBQUFlLEtBQUE7TUFBQSxJQURBQyxLQUFBLEdBQUFmLFNBQUEsQ0FBQXpCLE1BQUEsUUFBQXlCLFNBQUEsUUFBQXBCLFNBQUEsR0FBQW9CLFNBQUE7TUFFQSxXQUFBeEIsS0FBQSxDQUFBd0MsV0FBQSxXQUFBQyxPQUFBLEVBQUFDLE1BQUE7UUFDQSxJQUFBQyxTQUFBLEdBQUFOLFVBQUEsQ0FBQUUsS0FBQTtRQUNBLElBQUFqQixLQUFBLG9CQUFBcUIsU0FBQTtVQUNBRixPQUFBLENBQUFuQixLQUFBO1FBQ0E7VUFDQSxJQUFBc0IsTUFBQSxHQUFBRCxTQUFBLENBQUEzRSxhQUFBLEtBQUFzRCxLQUFBLEdBQUFDLElBQUE7VUFFQSxRQUFBc0IsZ0JBQUEsb0JBQUFBLGdCQUFBLEtBQ0FGLFNBQUEsQ0FBQUcsRUFBQSxJQUNBRixNQUFBLGFBQ0E1QyxLQUFBLENBQUErQyxNQUFBLENBQUFDLEdBQUEsc0JBQUFwQyxNQUFBLENBQUErQixTQUFBLENBQUFHLEVBQUE7VUFFQSxJQUFBOUMsS0FBQSxDQUFBaUQsVUFBQSxDQUFBTCxNQUFBO1lBQ0EsS0FBQUEsTUFBQSxDQUNBTSxJQUFBLFdBQUFDLEtBQUE7Y0FBQSxPQUFBYixLQUFBLENBQUFMLHNCQUFBLENBQUFJLFVBQUEsRUFBQWMsS0FBQSxFQUFBNUIsSUFBQSxFQUFBZ0IsS0FBQSxNQUFBVyxJQUFBLENBQUFULE9BQUE7WUFBQSxHQUNBUyxJQUFBLE9BQUFSLE1BQUE7VUFDQTtZQUNBLEtBQUFKLEtBQUEsQ0FBQUwsc0JBQUEsQ0FBQUksVUFBQSxFQUFBTyxNQUFBLEVBQUFyQixJQUFBLEVBQUFnQixLQUFBLE1BQ0FXLElBQUEsQ0FBQVQsT0FBQSxFQUNBUyxJQUFBLE9BQUFSLE1BQUE7VUFDQTtRQUNBO01BQ0E7SUFDQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBN0YsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQVUsc0JBQUE7TUFBQSxJQUFBNEYsTUFBQTtNQUNBO01BQ0E7TUFDQTtNQUNBLFVBQUFsSCxtQkFBQTtRQUNBLEtBQUFBLG1CQUFBO1FBQ0EsS0FBQUMsZUFBQSxDQUFBa0gsT0FBQSxXQUFBckcsUUFBQTtVQUNBQSxRQUFBLENBQUFvRyxNQUFBO1FBQ0E7UUFDQSxLQUFBbEgsbUJBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtBQUNBO0VBSEE7SUFBQVcsR0FBQTtJQUFBQyxLQUFBLEVBSUEsU0FBQWlGLGtCQUFBVCxLQUFBO01BQ0E7TUFDQUEsS0FBQSxDQUFBOUMsV0FBQSxHQUFBOEMsS0FBQSxDQUFBOUMsV0FBQSxHQUFBd0IsS0FBQSxDQUFBc0QsUUFBQSxDQUFBaEMsS0FBQSxDQUFBOUMsV0FBQTs7TUFFQTtNQUNBLFNBQUFDLFlBQUE7UUFDQTZDLEtBQUEsQ0FBQTlDLFdBQUEsR0FBQThDLEtBQUEsQ0FBQTlDLFdBQUEsQ0FBQW9DLE1BQUEsTUFBQW5DLFlBQUE7TUFDQTs7TUFFQTtNQUNBLElBQUE2QyxLQUFBLENBQUE5QyxXQUFBLEtBQUE4QyxLQUFBLENBQUE5QyxXQUFBLENBQUF1QixNQUFBO1FBQ0EsT0FBQXVCLEtBQUEsQ0FBQTlDLFdBQUE7TUFDQTtJQUNBO0VBQUE7SUFBQTNCLEdBQUE7SUFBQUMsS0FBQSxFQW5kQSxTQUFBeUcsTUFBQUMsS0FBQTtNQUNBLElBQUFDLFFBQUEsT0FBQXpILEtBQUE7TUFDQSxJQUFBd0gsS0FBQTtRQUNBQyxRQUFBLENBQUFwSCxZQUFBLEdBQUF3RSxrQkFBQSxDQUFBMkMsS0FBQSxDQUFBbkgsWUFBQTtRQUNBb0gsUUFBQSxDQUFBakgsS0FBQSxHQUFBd0IsYUFBQSxLQUFBd0YsS0FBQSxDQUFBaEgsS0FBQTtRQUNBaUgsUUFBQSxDQUFBaEgsTUFBQSxHQUFBdUIsYUFBQSxLQUFBd0YsS0FBQSxDQUFBL0csTUFBQTtRQUNBZ0gsUUFBQSxDQUFBL0csU0FBQSxHQUFBc0IsYUFBQSxLQUFBd0YsS0FBQSxDQUFBOUcsU0FBQTtRQUNBK0csUUFBQSxDQUFBbEgsS0FBQSxHQUFBaUgsS0FBQSxDQUFBakgsS0FBQTtRQUNBa0gsUUFBQSxDQUFBN0UsTUFBQSxHQUFBNEUsS0FBQSxDQUFBNUUsTUFBQTtRQUNBNkUsUUFBQSxDQUFBckUsS0FBQSxHQUFBb0UsS0FBQSxDQUFBcEUsS0FBQTtRQUNBcUUsUUFBQSxDQUFBcEcsUUFBQSxHQUFBbUcsS0FBQSxDQUFBbkcsUUFBQTtRQUNBb0csUUFBQSxDQUFBMUUsZ0JBQUEsR0FBQXlFLEtBQUEsQ0FBQXpFLGdCQUFBO1FBQ0EwRSxRQUFBLENBQUFoRixZQUFBLEdBQUErRSxLQUFBLENBQUEvRSxZQUFBO1FBQ0FnRixRQUFBLENBQUFySCxnQkFBQSxHQUFBeUUsa0JBQUEsQ0FBQTJDLEtBQUEsQ0FBQXBILGdCQUFBO1FBQ0FxSCxRQUFBLENBQUE5RixlQUFBLEdBQUE2RixLQUFBLENBQUE3RixlQUFBO1FBQ0E4RixRQUFBLENBQUFuSCxZQUFBLEdBQUF1RSxrQkFBQSxDQUFBMkMsS0FBQSxDQUFBbEgsWUFBQTtRQUNBbUgsUUFBQSxDQUFBOUcsc0JBQUEsR0FBQXFCLGFBQUEsS0FBQXdGLEtBQUEsQ0FBQTdHLHNCQUFBO01BQ0E7TUFDQSxPQUFBOEcsUUFBQTtJQUNBO0VBQUE7RUFBQSxPQUFBekgsS0FBQTtBQUFBO0FBbWNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFrRyx5QkFBQTtFQUNBLE9BQUFsQyxLQUFBLENBQUEwRCxrQkFBQTtJQUFBO0VBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLHdCQUFBM0csUUFBQTtFQUNBa0Ysd0JBQUEsR0FBQWpGLElBQUEsQ0FBQUQsUUFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vc3JjL3Njb3BlLnRzPzk2YWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbWF4LWxpbmVzICovXG5pbXBvcnQgdHlwZSB7XG4gIEF0dGFjaG1lbnQsXG4gIEJyZWFkY3J1bWIsXG4gIENhcHR1cmVDb250ZXh0LFxuICBDb250ZXh0LFxuICBDb250ZXh0cyxcbiAgRXZlbnQsXG4gIEV2ZW50SGludCxcbiAgRXZlbnRQcm9jZXNzb3IsXG4gIEV4dHJhLFxuICBFeHRyYXMsXG4gIFByaW1pdGl2ZSxcbiAgUmVxdWVzdFNlc3Npb24sXG4gIFNjb3BlIGFzIFNjb3BlSW50ZXJmYWNlLFxuICBTY29wZUNvbnRleHQsXG4gIFNlc3Npb24sXG4gIFNldmVyaXR5LFxuICBTZXZlcml0eUxldmVsLFxuICBTcGFuLFxuICBUcmFuc2FjdGlvbixcbiAgVXNlcixcbn0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQge1xuICBhcnJheWlmeSxcbiAgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyxcbiAgZ2V0R2xvYmFsU2luZ2xldG9uLFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1RoZW5hYmxlLFxuICBsb2dnZXIsXG4gIFN5bmNQcm9taXNlLFxufSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgdXBkYXRlU2Vzc2lvbiB9IGZyb20gJy4vc2Vzc2lvbic7XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZSBmb3IgbWF4aW11bSBudW1iZXIgb2YgYnJlYWRjcnVtYnMgYWRkZWQgdG8gYW4gZXZlbnQuXG4gKi9cbmNvbnN0IERFRkFVTFRfTUFYX0JSRUFEQ1JVTUJTID0gMTAwO1xuXG4vKipcbiAqIEhvbGRzIGFkZGl0aW9uYWwgZXZlbnQgaW5mb3JtYXRpb24uIHtAbGluayBTY29wZS5hcHBseVRvRXZlbnR9IHdpbGwgYmVcbiAqIGNhbGxlZCBieSB0aGUgY2xpZW50IGJlZm9yZSBhbiBldmVudCB3aWxsIGJlIHNlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY29wZSBpbXBsZW1lbnRzIFNjb3BlSW50ZXJmYWNlIHtcbiAgLyoqIEZsYWcgaWYgbm90aWZ5aW5nIGlzIGhhcHBlbmluZy4gKi9cbiAgcHJvdGVjdGVkIF9ub3RpZnlpbmdMaXN0ZW5lcnM6IGJvb2xlYW47XG5cbiAgLyoqIENhbGxiYWNrIGZvciBjbGllbnQgdG8gcmVjZWl2ZSBzY29wZSBjaGFuZ2VzLiAqL1xuICBwcm90ZWN0ZWQgX3Njb3BlTGlzdGVuZXJzOiBBcnJheTwoc2NvcGU6IFNjb3BlKSA9PiB2b2lkPjtcblxuICAvKiogQ2FsbGJhY2sgbGlzdCB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBhcHBseVRvRXZlbnR9LiAqL1xuICBwcm90ZWN0ZWQgX2V2ZW50UHJvY2Vzc29yczogRXZlbnRQcm9jZXNzb3JbXTtcblxuICAvKiogQXJyYXkgb2YgYnJlYWRjcnVtYnMuICovXG4gIHByb3RlY3RlZCBfYnJlYWRjcnVtYnM6IEJyZWFkY3J1bWJbXTtcblxuICAvKiogVXNlciAqL1xuICBwcm90ZWN0ZWQgX3VzZXI6IFVzZXI7XG5cbiAgLyoqIFRhZ3MgKi9cbiAgcHJvdGVjdGVkIF90YWdzOiB7IFtrZXk6IHN0cmluZ106IFByaW1pdGl2ZSB9O1xuXG4gIC8qKiBFeHRyYSAqL1xuICBwcm90ZWN0ZWQgX2V4dHJhOiBFeHRyYXM7XG5cbiAgLyoqIENvbnRleHRzICovXG4gIHByb3RlY3RlZCBfY29udGV4dHM6IENvbnRleHRzO1xuXG4gIC8qKiBBdHRhY2htZW50cyAqL1xuICBwcm90ZWN0ZWQgX2F0dGFjaG1lbnRzOiBBdHRhY2htZW50W107XG5cbiAgLyoqXG4gICAqIEEgcGxhY2UgdG8gc3Rhc2ggZGF0YSB3aGljaCBpcyBuZWVkZWQgYXQgc29tZSBwb2ludCBpbiB0aGUgU0RLJ3MgZXZlbnQgcHJvY2Vzc2luZyBwaXBlbGluZSBidXQgd2hpY2ggc2hvdWxkbid0IGdldFxuICAgKiBzZW50IHRvIFNlbnRyeVxuICAgKi9cbiAgcHJvdGVjdGVkIF9zZGtQcm9jZXNzaW5nTWV0YWRhdGE6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9O1xuXG4gIC8qKiBGaW5nZXJwcmludCAqL1xuICBwcm90ZWN0ZWQgX2ZpbmdlcnByaW50Pzogc3RyaW5nW107XG5cbiAgLyoqIFNldmVyaXR5ICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBwcm90ZWN0ZWQgX2xldmVsPzogU2V2ZXJpdHkgfCBTZXZlcml0eUxldmVsO1xuXG4gIC8qKiBUcmFuc2FjdGlvbiBOYW1lICovXG4gIHByb3RlY3RlZCBfdHJhbnNhY3Rpb25OYW1lPzogc3RyaW5nO1xuXG4gIC8qKiBTcGFuICovXG4gIHByb3RlY3RlZCBfc3Bhbj86IFNwYW47XG5cbiAgLyoqIFNlc3Npb24gKi9cbiAgcHJvdGVjdGVkIF9zZXNzaW9uPzogU2Vzc2lvbjtcblxuICAvKiogUmVxdWVzdCBNb2RlIFNlc3Npb24gU3RhdHVzICovXG4gIHByb3RlY3RlZCBfcmVxdWVzdFNlc3Npb24/OiBSZXF1ZXN0U2Vzc2lvbjtcblxuICAvLyBOT1RFOiBBbnkgZmllbGQgd2hpY2ggZ2V0cyBhZGRlZCBoZXJlIHNob3VsZCBnZXQgYWRkZWQgbm90IG9ubHkgdG8gdGhlIGNvbnN0cnVjdG9yIGJ1dCBhbHNvIHRvIHRoZSBgY2xvbmVgIG1ldGhvZC5cblxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fbm90aWZ5aW5nTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgdGhpcy5fc2NvcGVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9ldmVudFByb2Nlc3NvcnMgPSBbXTtcbiAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgIHRoaXMuX2F0dGFjaG1lbnRzID0gW107XG4gICAgdGhpcy5fdXNlciA9IHt9O1xuICAgIHRoaXMuX3RhZ3MgPSB7fTtcbiAgICB0aGlzLl9leHRyYSA9IHt9O1xuICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgdGhpcy5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge307XG4gIH1cblxuICAvKipcbiAgICogSW5oZXJpdCB2YWx1ZXMgZnJvbSB0aGUgcGFyZW50IHNjb3BlLlxuICAgKiBAcGFyYW0gc2NvcGUgdG8gY2xvbmUuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNsb25lKHNjb3BlPzogU2NvcGUpOiBTY29wZSB7XG4gICAgY29uc3QgbmV3U2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIG5ld1Njb3BlLl9icmVhZGNydW1icyA9IFsuLi5zY29wZS5fYnJlYWRjcnVtYnNdO1xuICAgICAgbmV3U2NvcGUuX3RhZ3MgPSB7IC4uLnNjb3BlLl90YWdzIH07XG4gICAgICBuZXdTY29wZS5fZXh0cmEgPSB7IC4uLnNjb3BlLl9leHRyYSB9O1xuICAgICAgbmV3U2NvcGUuX2NvbnRleHRzID0geyAuLi5zY29wZS5fY29udGV4dHMgfTtcbiAgICAgIG5ld1Njb3BlLl91c2VyID0gc2NvcGUuX3VzZXI7XG4gICAgICBuZXdTY29wZS5fbGV2ZWwgPSBzY29wZS5fbGV2ZWw7XG4gICAgICBuZXdTY29wZS5fc3BhbiA9IHNjb3BlLl9zcGFuO1xuICAgICAgbmV3U2NvcGUuX3Nlc3Npb24gPSBzY29wZS5fc2Vzc2lvbjtcbiAgICAgIG5ld1Njb3BlLl90cmFuc2FjdGlvbk5hbWUgPSBzY29wZS5fdHJhbnNhY3Rpb25OYW1lO1xuICAgICAgbmV3U2NvcGUuX2ZpbmdlcnByaW50ID0gc2NvcGUuX2ZpbmdlcnByaW50O1xuICAgICAgbmV3U2NvcGUuX2V2ZW50UHJvY2Vzc29ycyA9IFsuLi5zY29wZS5fZXZlbnRQcm9jZXNzb3JzXTtcbiAgICAgIG5ld1Njb3BlLl9yZXF1ZXN0U2Vzc2lvbiA9IHNjb3BlLl9yZXF1ZXN0U2Vzc2lvbjtcbiAgICAgIG5ld1Njb3BlLl9hdHRhY2htZW50cyA9IFsuLi5zY29wZS5fYXR0YWNobWVudHNdO1xuICAgICAgbmV3U2NvcGUuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IHsgLi4uc2NvcGUuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSB9O1xuICAgIH1cbiAgICByZXR1cm4gbmV3U2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGludGVybmFsIG9uIGNoYW5nZSBsaXN0ZW5lci4gVXNlZCBmb3Igc3ViIFNES3MgdGhhdCBuZWVkIHRvIHN0b3JlIHRoZSBzY29wZS5cbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHVibGljIGFkZFNjb3BlTGlzdGVuZXIoY2FsbGJhY2s6IChzY29wZTogU2NvcGUpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9zY29wZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGFkZEV2ZW50UHJvY2Vzc29yKGNhbGxiYWNrOiBFdmVudFByb2Nlc3Nvcik6IHRoaXMge1xuICAgIHRoaXMuX2V2ZW50UHJvY2Vzc29ycy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldFVzZXIodXNlcjogVXNlciB8IG51bGwpOiB0aGlzIHtcbiAgICB0aGlzLl91c2VyID0gdXNlciB8fCB7fTtcbiAgICBpZiAodGhpcy5fc2Vzc2lvbikge1xuICAgICAgdXBkYXRlU2Vzc2lvbih0aGlzLl9zZXNzaW9uLCB7IHVzZXIgfSk7XG4gICAgfVxuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyKCk6IFVzZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl91c2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVxdWVzdFNlc3Npb24oKTogUmVxdWVzdFNlc3Npb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0U2Vzc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldFJlcXVlc3RTZXNzaW9uKHJlcXVlc3RTZXNzaW9uPzogUmVxdWVzdFNlc3Npb24pOiB0aGlzIHtcbiAgICB0aGlzLl9yZXF1ZXN0U2Vzc2lvbiA9IHJlcXVlc3RTZXNzaW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0VGFncyh0YWdzOiB7IFtrZXk6IHN0cmluZ106IFByaW1pdGl2ZSB9KTogdGhpcyB7XG4gICAgdGhpcy5fdGFncyA9IHtcbiAgICAgIC4uLnRoaXMuX3RhZ3MsXG4gICAgICAuLi50YWdzLFxuICAgIH07XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldFRhZyhrZXk6IHN0cmluZywgdmFsdWU6IFByaW1pdGl2ZSk6IHRoaXMge1xuICAgIHRoaXMuX3RhZ3MgPSB7IC4uLnRoaXMuX3RhZ3MsIFtrZXldOiB2YWx1ZSB9O1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXRFeHRyYXMoZXh0cmFzOiBFeHRyYXMpOiB0aGlzIHtcbiAgICB0aGlzLl9leHRyYSA9IHtcbiAgICAgIC4uLnRoaXMuX2V4dHJhLFxuICAgICAgLi4uZXh0cmFzLFxuICAgIH07XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldEV4dHJhKGtleTogc3RyaW5nLCBleHRyYTogRXh0cmEpOiB0aGlzIHtcbiAgICB0aGlzLl9leHRyYSA9IHsgLi4udGhpcy5fZXh0cmEsIFtrZXldOiBleHRyYSB9O1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXRGaW5nZXJwcmludChmaW5nZXJwcmludDogc3RyaW5nW10pOiB0aGlzIHtcbiAgICB0aGlzLl9maW5nZXJwcmludCA9IGZpbmdlcnByaW50O1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXRMZXZlbChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBsZXZlbDogU2V2ZXJpdHkgfCBTZXZlcml0eUxldmVsLFxuICApOiB0aGlzIHtcbiAgICB0aGlzLl9sZXZlbCA9IGxldmVsO1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXRUcmFuc2FjdGlvbk5hbWUobmFtZT86IHN0cmluZyk6IHRoaXMge1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uTmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldENvbnRleHQoa2V5OiBzdHJpbmcsIGNvbnRleHQ6IENvbnRleHQgfCBudWxsKTogdGhpcyB7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgIGRlbGV0ZSB0aGlzLl9jb250ZXh0c1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb250ZXh0c1trZXldID0gY29udGV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0U3BhbihzcGFuPzogU3Bhbik6IHRoaXMge1xuICAgIHRoaXMuX3NwYW4gPSBzcGFuO1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBnZXRTcGFuKCk6IFNwYW4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9zcGFuO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNhY3Rpb24oKTogVHJhbnNhY3Rpb24gfCB1bmRlZmluZWQge1xuICAgIC8vIE9mdGVuLCB0aGlzIHNwYW4gKGlmIGl0IGV4aXN0cyBhdCBhbGwpIHdpbGwgYmUgYSB0cmFuc2FjdGlvbiwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQgdG8gYmUuIFJlZ2FyZGxlc3MsIGl0IHdpbGxcbiAgICAvLyBoYXZlIGEgcG9pbnRlciB0byB0aGUgY3VycmVudGx5LWFjdGl2ZSB0cmFuc2FjdGlvbi5cbiAgICBjb25zdCBzcGFuID0gdGhpcy5nZXRTcGFuKCk7XG4gICAgcmV0dXJuIHNwYW4gJiYgc3Bhbi50cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldFNlc3Npb24oc2Vzc2lvbj86IFNlc3Npb24pOiB0aGlzIHtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zZXNzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICB9XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGdldFNlc3Npb24oKTogU2Vzc2lvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoY2FwdHVyZUNvbnRleHQ/OiBDYXB0dXJlQ29udGV4dCk6IHRoaXMge1xuICAgIGlmICghY2FwdHVyZUNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRTY29wZSA9IChjYXB0dXJlQ29udGV4dCBhcyA8VD4oc2NvcGU6IFQpID0+IFQpKHRoaXMpO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRTY29wZSBpbnN0YW5jZW9mIFNjb3BlID8gdXBkYXRlZFNjb3BlIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAoY2FwdHVyZUNvbnRleHQgaW5zdGFuY2VvZiBTY29wZSkge1xuICAgICAgdGhpcy5fdGFncyA9IHsgLi4udGhpcy5fdGFncywgLi4uY2FwdHVyZUNvbnRleHQuX3RhZ3MgfTtcbiAgICAgIHRoaXMuX2V4dHJhID0geyAuLi50aGlzLl9leHRyYSwgLi4uY2FwdHVyZUNvbnRleHQuX2V4dHJhIH07XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IHsgLi4udGhpcy5fY29udGV4dHMsIC4uLmNhcHR1cmVDb250ZXh0Ll9jb250ZXh0cyB9O1xuICAgICAgaWYgKGNhcHR1cmVDb250ZXh0Ll91c2VyICYmIE9iamVjdC5rZXlzKGNhcHR1cmVDb250ZXh0Ll91c2VyKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fdXNlciA9IGNhcHR1cmVDb250ZXh0Ll91c2VyO1xuICAgICAgfVxuICAgICAgaWYgKGNhcHR1cmVDb250ZXh0Ll9sZXZlbCkge1xuICAgICAgICB0aGlzLl9sZXZlbCA9IGNhcHR1cmVDb250ZXh0Ll9sZXZlbDtcbiAgICAgIH1cbiAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5fZmluZ2VycHJpbnQpIHtcbiAgICAgICAgdGhpcy5fZmluZ2VycHJpbnQgPSBjYXB0dXJlQ29udGV4dC5fZmluZ2VycHJpbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY2FwdHVyZUNvbnRleHQuX3JlcXVlc3RTZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RTZXNzaW9uID0gY2FwdHVyZUNvbnRleHQuX3JlcXVlc3RTZXNzaW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChjYXB0dXJlQ29udGV4dCkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgY2FwdHVyZUNvbnRleHQgPSBjYXB0dXJlQ29udGV4dCBhcyBTY29wZUNvbnRleHQ7XG4gICAgICB0aGlzLl90YWdzID0geyAuLi50aGlzLl90YWdzLCAuLi5jYXB0dXJlQ29udGV4dC50YWdzIH07XG4gICAgICB0aGlzLl9leHRyYSA9IHsgLi4udGhpcy5fZXh0cmEsIC4uLmNhcHR1cmVDb250ZXh0LmV4dHJhIH07XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IHsgLi4udGhpcy5fY29udGV4dHMsIC4uLmNhcHR1cmVDb250ZXh0LmNvbnRleHRzIH07XG4gICAgICBpZiAoY2FwdHVyZUNvbnRleHQudXNlcikge1xuICAgICAgICB0aGlzLl91c2VyID0gY2FwdHVyZUNvbnRleHQudXNlcjtcbiAgICAgIH1cbiAgICAgIGlmIChjYXB0dXJlQ29udGV4dC5sZXZlbCkge1xuICAgICAgICB0aGlzLl9sZXZlbCA9IGNhcHR1cmVDb250ZXh0LmxldmVsO1xuICAgICAgfVxuICAgICAgaWYgKGNhcHR1cmVDb250ZXh0LmZpbmdlcnByaW50KSB7XG4gICAgICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gY2FwdHVyZUNvbnRleHQuZmluZ2VycHJpbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY2FwdHVyZUNvbnRleHQucmVxdWVzdFNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdFNlc3Npb24gPSBjYXB0dXJlQ29udGV4dC5yZXF1ZXN0U2Vzc2lvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIGNsZWFyKCk6IHRoaXMge1xuICAgIHRoaXMuX2JyZWFkY3J1bWJzID0gW107XG4gICAgdGhpcy5fdGFncyA9IHt9O1xuICAgIHRoaXMuX2V4dHJhID0ge307XG4gICAgdGhpcy5fdXNlciA9IHt9O1xuICAgIHRoaXMuX2NvbnRleHRzID0ge307XG4gICAgdGhpcy5fbGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdHJhbnNhY3Rpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZpbmdlcnByaW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JlcXVlc3RTZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NwYW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2Vzc2lvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpO1xuICAgIHRoaXMuX2F0dGFjaG1lbnRzID0gW107XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWI6IEJyZWFkY3J1bWIsIG1heEJyZWFkY3J1bWJzPzogbnVtYmVyKTogdGhpcyB7XG4gICAgY29uc3QgbWF4Q3J1bWJzID0gdHlwZW9mIG1heEJyZWFkY3J1bWJzID09PSAnbnVtYmVyJyA/IG1heEJyZWFkY3J1bWJzIDogREVGQVVMVF9NQVhfQlJFQURDUlVNQlM7XG5cbiAgICAvLyBObyBkYXRhIGhhcyBiZWVuIGNoYW5nZWQsIHNvIGRvbid0IG5vdGlmeSBzY29wZSBsaXN0ZW5lcnNcbiAgICBpZiAobWF4Q3J1bWJzIDw9IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvbnN0IG1lcmdlZEJyZWFkY3J1bWIgPSB7XG4gICAgICB0aW1lc3RhbXA6IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSxcbiAgICAgIC4uLmJyZWFkY3J1bWIsXG4gICAgfTtcbiAgICB0aGlzLl9icmVhZGNydW1icyA9IFsuLi50aGlzLl9icmVhZGNydW1icywgbWVyZ2VkQnJlYWRjcnVtYl0uc2xpY2UoLW1heENydW1icyk7XG4gICAgdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZ2V0TGFzdEJyZWFkY3J1bWIoKTogQnJlYWRjcnVtYiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWFkY3J1bWJzW3RoaXMuX2JyZWFkY3J1bWJzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgY2xlYXJCcmVhZGNydW1icygpOiB0aGlzIHtcbiAgICB0aGlzLl9icmVhZGNydW1icyA9IFtdO1xuICAgIHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBhZGRBdHRhY2htZW50KGF0dGFjaG1lbnQ6IEF0dGFjaG1lbnQpOiB0aGlzIHtcbiAgICB0aGlzLl9hdHRhY2htZW50cy5wdXNoKGF0dGFjaG1lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgZ2V0QXR0YWNobWVudHMoKTogQXR0YWNobWVudFtdIHtcbiAgICByZXR1cm4gdGhpcy5fYXR0YWNobWVudHM7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBjbGVhckF0dGFjaG1lbnRzKCk6IHRoaXMge1xuICAgIHRoaXMuX2F0dGFjaG1lbnRzID0gW107XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBkYXRhIGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBhbmQgcnVucyBhbGwgZXZlbnQgcHJvY2Vzc29ycyBvbiBpdC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IEV2ZW50XG4gICAqIEBwYXJhbSBoaW50IE9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbiwgZm9yIHVzZSBieSB0aGUgZXZlbnQgcHJvY2Vzc29ycy5cbiAgICogQGhpZGRlblxuICAgKi9cbiAgcHVibGljIGFwcGx5VG9FdmVudChldmVudDogRXZlbnQsIGhpbnQ6IEV2ZW50SGludCA9IHt9KTogUHJvbWlzZUxpa2U8RXZlbnQgfCBudWxsPiB7XG4gICAgaWYgKHRoaXMuX2V4dHJhICYmIE9iamVjdC5rZXlzKHRoaXMuX2V4dHJhKS5sZW5ndGgpIHtcbiAgICAgIGV2ZW50LmV4dHJhID0geyAuLi50aGlzLl9leHRyYSwgLi4uZXZlbnQuZXh0cmEgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3RhZ3MgJiYgT2JqZWN0LmtleXModGhpcy5fdGFncykubGVuZ3RoKSB7XG4gICAgICBldmVudC50YWdzID0geyAuLi50aGlzLl90YWdzLCAuLi5ldmVudC50YWdzIH07XG4gICAgfVxuICAgIGlmICh0aGlzLl91c2VyICYmIE9iamVjdC5rZXlzKHRoaXMuX3VzZXIpLmxlbmd0aCkge1xuICAgICAgZXZlbnQudXNlciA9IHsgLi4udGhpcy5fdXNlciwgLi4uZXZlbnQudXNlciB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5fY29udGV4dHMgJiYgT2JqZWN0LmtleXModGhpcy5fY29udGV4dHMpLmxlbmd0aCkge1xuICAgICAgZXZlbnQuY29udGV4dHMgPSB7IC4uLnRoaXMuX2NvbnRleHRzLCAuLi5ldmVudC5jb250ZXh0cyB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGV2ZWwpIHtcbiAgICAgIGV2ZW50LmxldmVsID0gdGhpcy5fbGV2ZWw7XG4gICAgfVxuICAgIGlmICh0aGlzLl90cmFuc2FjdGlvbk5hbWUpIHtcbiAgICAgIGV2ZW50LnRyYW5zYWN0aW9uID0gdGhpcy5fdHJhbnNhY3Rpb25OYW1lO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gc2V0IHRoZSB0cmFjZSBjb250ZXh0IGZvciBub3JtYWwgZXZlbnRzIG9ubHkgaWYgdGhlcmUgaXNuJ3QgYWxyZWFkeVxuICAgIC8vIGEgdHJhY2UgY29udGV4dCBvbiB0aGUgZXZlbnQuIFRoZXJlIGlzIGEgcHJvZHVjdCBmZWF0dXJlIGluIHBsYWNlIHdoZXJlIHdlIGxpbmtcbiAgICAvLyBlcnJvcnMgd2l0aCB0cmFuc2FjdGlvbiBhbmQgaXQgcmVsaWVzIG9uIHRoYXQuXG4gICAgaWYgKHRoaXMuX3NwYW4pIHtcbiAgICAgIGV2ZW50LmNvbnRleHRzID0geyB0cmFjZTogdGhpcy5fc3Bhbi5nZXRUcmFjZUNvbnRleHQoKSwgLi4uZXZlbnQuY29udGV4dHMgfTtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5fc3Bhbi50cmFuc2FjdGlvbjtcbiAgICAgIGlmICh0cmFuc2FjdGlvbikge1xuICAgICAgICBldmVudC5zZGtQcm9jZXNzaW5nTWV0YWRhdGEgPSB7XG4gICAgICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dDogdHJhbnNhY3Rpb24uZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCgpLFxuICAgICAgICAgIC4uLmV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25OYW1lID0gdHJhbnNhY3Rpb24ubmFtZTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uTmFtZSkge1xuICAgICAgICAgIGV2ZW50LnRhZ3MgPSB7IHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbk5hbWUsIC4uLmV2ZW50LnRhZ3MgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2FwcGx5RmluZ2VycHJpbnQoZXZlbnQpO1xuXG4gICAgZXZlbnQuYnJlYWRjcnVtYnMgPSBbLi4uKGV2ZW50LmJyZWFkY3J1bWJzIHx8IFtdKSwgLi4udGhpcy5fYnJlYWRjcnVtYnNdO1xuICAgIGV2ZW50LmJyZWFkY3J1bWJzID0gZXZlbnQuYnJlYWRjcnVtYnMubGVuZ3RoID4gMCA/IGV2ZW50LmJyZWFkY3J1bWJzIDogdW5kZWZpbmVkO1xuXG4gICAgZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0geyAuLi5ldmVudC5zZGtQcm9jZXNzaW5nTWV0YWRhdGEsIC4uLnRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSB9O1xuXG4gICAgcmV0dXJuIHRoaXMuX25vdGlmeUV2ZW50UHJvY2Vzc29ycyhbLi4uZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCksIC4uLnRoaXMuX2V2ZW50UHJvY2Vzc29yc10sIGV2ZW50LCBoaW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZGF0YSB3aGljaCB3aWxsIGJlIGFjY2Vzc2libGUgZHVyaW5nIGV2ZW50IHByb2Nlc3NpbmcgYnV0IHdvbid0IGdldCBzZW50IHRvIFNlbnRyeVxuICAgKi9cbiAgcHVibGljIHNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YShuZXdEYXRhOiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSk6IHRoaXMge1xuICAgIHRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IHsgLi4udGhpcy5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhLCAuLi5uZXdEYXRhIH07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBhcHBseVRvRXZlbnR9IGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9ub3RpZnlFdmVudFByb2Nlc3NvcnMoXG4gICAgcHJvY2Vzc29yczogRXZlbnRQcm9jZXNzb3JbXSxcbiAgICBldmVudDogRXZlbnQgfCBudWxsLFxuICAgIGhpbnQ6IEV2ZW50SGludCxcbiAgICBpbmRleDogbnVtYmVyID0gMCxcbiAgKTogUHJvbWlzZUxpa2U8RXZlbnQgfCBudWxsPiB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZTxFdmVudCB8IG51bGw+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgICAgaWYgKGV2ZW50ID09PSBudWxsIHx8IHR5cGVvZiBwcm9jZXNzb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9jZXNzb3IoeyAuLi5ldmVudCB9LCBoaW50KSBhcyBFdmVudCB8IG51bGw7XG5cbiAgICAgICAgX19ERUJVR19CVUlMRF9fICYmXG4gICAgICAgICAgcHJvY2Vzc29yLmlkICYmXG4gICAgICAgICAgcmVzdWx0ID09PSBudWxsICYmXG4gICAgICAgICAgbG9nZ2VyLmxvZyhgRXZlbnQgcHJvY2Vzc29yIFwiJHtwcm9jZXNzb3IuaWR9XCIgZHJvcHBlZCBldmVudGApO1xuXG4gICAgICAgIGlmIChpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICB2b2lkIHJlc3VsdFxuICAgICAgICAgICAgLnRoZW4oZmluYWwgPT4gdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKHByb2Nlc3NvcnMsIGZpbmFsLCBoaW50LCBpbmRleCArIDEpLnRoZW4ocmVzb2x2ZSkpXG4gICAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZvaWQgdGhpcy5fbm90aWZ5RXZlbnRQcm9jZXNzb3JzKHByb2Nlc3NvcnMsIHJlc3VsdCwgaGludCwgaW5kZXggKyAxKVxuICAgICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5IHNldCBjYWxsLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9ub3RpZnlTY29wZUxpc3RlbmVycygpOiB2b2lkIHtcbiAgICAvLyBXZSBuZWVkIHRoaXMgY2hlY2sgZm9yIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyB0byBiZSBhYmxlIHRvIHdvcmsgb24gc2NvcGUgZHVyaW5nIHVwZGF0ZXNcbiAgICAvLyBJZiB0aGlzIGNoZWNrIGlzIG5vdCBoZXJlIHdlJ2xsIHByb2R1Y2UgZW5kbGVzcyByZWN1cnNpb24gd2hlbiBzb21ldGhpbmcgaXMgZG9uZSB3aXRoIHRoZSBzY29wZVxuICAgIC8vIGR1cmluZyB0aGUgY2FsbGJhY2suXG4gICAgaWYgKCF0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IHRydWU7XG4gICAgICB0aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKGNhbGxiYWNrID0+IHtcbiAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGZpbmdlcnByaW50IGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBpZiB0aGVyZSdzIG9uZSxcbiAgICogdXNlcyBtZXNzYWdlIGlmIHRoZXJlJ3Mgb25lIGluc3RlYWQgb3IgZ2V0IHJpZCBvZiBlbXB0eSBmaW5nZXJwcmludFxuICAgKi9cbiAgcHJpdmF0ZSBfYXBwbHlGaW5nZXJwcmludChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAvLyBNYWtlIHN1cmUgaXQncyBhbiBhcnJheSBmaXJzdCBhbmQgd2UgYWN0dWFsbHkgaGF2ZSBzb21ldGhpbmcgaW4gcGxhY2VcbiAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50ID8gYXJyYXlpZnkoZXZlbnQuZmluZ2VycHJpbnQpIDogW107XG5cbiAgICAvLyBJZiB3ZSBoYXZlIHNvbWV0aGluZyBvbiB0aGUgc2NvcGUsIHRoZW4gbWVyZ2UgaXQgd2l0aCBldmVudFxuICAgIGlmICh0aGlzLl9maW5nZXJwcmludCkge1xuICAgICAgZXZlbnQuZmluZ2VycHJpbnQgPSBldmVudC5maW5nZXJwcmludC5jb25jYXQodGhpcy5fZmluZ2VycHJpbnQpO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgbm8gZGF0YSBhdCBhbGwsIHJlbW92ZSBlbXB0eSBhcnJheSBkZWZhdWx0XG4gICAgaWYgKGV2ZW50LmZpbmdlcnByaW50ICYmICFldmVudC5maW5nZXJwcmludC5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSBldmVudC5maW5nZXJwcmludDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnbG9iYWwgZXZlbnQgcHJvY2Vzc29ycy5cbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzKCk6IEV2ZW50UHJvY2Vzc29yW10ge1xuICByZXR1cm4gZ2V0R2xvYmFsU2luZ2xldG9uPEV2ZW50UHJvY2Vzc29yW10+KCdnbG9iYWxFdmVudFByb2Nlc3NvcnMnLCAoKSA9PiBbXSk7XG59XG5cbi8qKlxuICogQWRkIGEgRXZlbnRQcm9jZXNzb3IgdG8gYmUga2VwdCBnbG9iYWxseS5cbiAqIEBwYXJhbSBjYWxsYmFjayBFdmVudFByb2Nlc3NvciB0byBhZGRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGNhbGxiYWNrOiBFdmVudFByb2Nlc3Nvcik6IHZvaWQge1xuICBnZXRHbG9iYWxFdmVudFByb2Nlc3NvcnMoKS5wdXNoKGNhbGxiYWNrKTtcbn1cbiJdLCJuYW1lcyI6WyJERUZBVUxUX01BWF9CUkVBRENSVU1CUyIsIlNjb3BlIiwiX2NsYXNzQ2FsbENoZWNrIiwiX25vdGlmeWluZ0xpc3RlbmVycyIsIl9zY29wZUxpc3RlbmVycyIsIl9ldmVudFByb2Nlc3NvcnMiLCJfYnJlYWRjcnVtYnMiLCJfYXR0YWNobWVudHMiLCJfdXNlciIsIl90YWdzIiwiX2V4dHJhIiwiX2NvbnRleHRzIiwiX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiYWRkU2NvcGVMaXN0ZW5lciIsImNhbGxiYWNrIiwicHVzaCIsImFkZEV2ZW50UHJvY2Vzc29yIiwic2V0VXNlciIsInVzZXIiLCJfc2Vzc2lvbiIsInNlc3Npb24iLCJ1cGRhdGVTZXNzaW9uIiwiX25vdGlmeVNjb3BlTGlzdGVuZXJzIiwiZ2V0VXNlciIsImdldFJlcXVlc3RTZXNzaW9uIiwiX3JlcXVlc3RTZXNzaW9uIiwic2V0UmVxdWVzdFNlc3Npb24iLCJyZXF1ZXN0U2Vzc2lvbiIsInNldFRhZ3MiLCJ0YWdzIiwiX29iamVjdFNwcmVhZCIsInNldFRhZyIsIl9kZWZpbmVQcm9wZXJ0eSIsInNldEV4dHJhcyIsImV4dHJhcyIsInNldEV4dHJhIiwiZXh0cmEiLCJzZXRGaW5nZXJwcmludCIsImZpbmdlcnByaW50IiwiX2ZpbmdlcnByaW50Iiwic2V0TGV2ZWwiLCJsZXZlbCIsIl9sZXZlbCIsInNldFRyYW5zYWN0aW9uTmFtZSIsIm5hbWUiLCJfdHJhbnNhY3Rpb25OYW1lIiwic2V0Q29udGV4dCIsImNvbnRleHQiLCJzZXRTcGFuIiwic3BhbiIsIl9zcGFuIiwiZ2V0U3BhbiIsImdldFRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJzZXRTZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsInVwZGF0ZSIsImNhcHR1cmVDb250ZXh0IiwidXBkYXRlZFNjb3BlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInV0aWxzIiwiaXNQbGFpbk9iamVjdCIsImNvbnRleHRzIiwiY2xlYXIiLCJ1bmRlZmluZWQiLCJhZGRCcmVhZGNydW1iIiwiYnJlYWRjcnVtYiIsIm1heEJyZWFkY3J1bWJzIiwibWF4Q3J1bWJzIiwibWVyZ2VkQnJlYWRjcnVtYiIsInRpbWVzdGFtcCIsImRhdGVUaW1lc3RhbXBJblNlY29uZHMiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzbGljZSIsImdldExhc3RCcmVhZGNydW1iIiwiY2xlYXJCcmVhZGNydW1icyIsImFkZEF0dGFjaG1lbnQiLCJhdHRhY2htZW50IiwiZ2V0QXR0YWNobWVudHMiLCJjbGVhckF0dGFjaG1lbnRzIiwiYXBwbHlUb0V2ZW50IiwiZXZlbnQiLCJoaW50IiwiYXJndW1lbnRzIiwidHJhY2UiLCJnZXRUcmFjZUNvbnRleHQiLCJzZGtQcm9jZXNzaW5nTWV0YWRhdGEiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dCIsInRyYW5zYWN0aW9uTmFtZSIsIl9hcHBseUZpbmdlcnByaW50IiwiYnJlYWRjcnVtYnMiLCJfbm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwiZ2V0R2xvYmFsRXZlbnRQcm9jZXNzb3JzIiwic2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhIiwibmV3RGF0YSIsInByb2Nlc3NvcnMiLCJfdGhpcyIsImluZGV4IiwiU3luY1Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvY2Vzc29yIiwicmVzdWx0IiwiX19TRU5UUllfREVCVUdfXyIsImlkIiwibG9nZ2VyIiwibG9nIiwiaXNUaGVuYWJsZSIsInRoZW4iLCJmaW5hbCIsIl90aGlzMiIsImZvckVhY2giLCJhcnJheWlmeSIsImNsb25lIiwic2NvcGUiLCJuZXdTY29wZSIsImdldEdsb2JhbFNpbmdsZXRvbiIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/scope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/sdk.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/core/cjs/sdk.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ./hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      utils.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  var hub$1 = hub.getCurrentHub();\n  var scope = hub$1.getScope();\n  scope.update(options.initialScope);\n  var client = new clientClass(options);\n  hub$1.bindClient(client);\n}\nexports.initAndBind = initAndBind;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy9zZGsuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxZQUNBQyxXQUFBLEVBQ0FDLE9BQUEsRUFDQTtFQUNBLElBQUFBLE9BQUEsQ0FBQUMsS0FBQTtJQUNBLFdBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQTtNQUNBQyxLQUFBLENBQUFDLE1BQUEsQ0FBQUMsTUFBQTtJQUNBO01BQ0E7TUFDQTtNQUNBQyxPQUFBLENBQUFDLElBQUE7SUFDQTtFQUNBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBQyxHQUFBLENBQUFDLGFBQUE7RUFDQSxJQUFBQyxLQUFBLEdBQUFILEtBQUEsQ0FBQUksUUFBQTtFQUNBRCxLQUFBLENBQUFFLE1BQUEsQ0FBQWIsT0FBQSxDQUFBYyxZQUFBO0VBRUEsSUFBQUMsTUFBQSxPQUFBaEIsV0FBQSxDQUFBQyxPQUFBO0VBQ0FRLEtBQUEsQ0FBQVEsVUFBQSxDQUFBRCxNQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvc2RrLnRzPzQwNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDbGllbnQsIENsaWVudE9wdGlvbnMgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuXG5pbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnLi9odWInO1xuXG4vKiogQSBjbGFzcyBvYmplY3QgdGhhdCBjYW4gaW5zdGFudGlhdGUgQ2xpZW50IG9iamVjdHMuICovXG5leHBvcnQgdHlwZSBDbGllbnRDbGFzczxGIGV4dGVuZHMgQ2xpZW50LCBPIGV4dGVuZHMgQ2xpZW50T3B0aW9ucz4gPSBuZXcgKG9wdGlvbnM6IE8pID0+IEY7XG5cbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbmV3IFNESyBjbGllbnQgaW5zdGFuY2UuIFRoZSBjbGllbnQgaXNcbiAqIGluc3RhbGxlZCBhbmQgdGhlbiBib3VuZCB0byB0aGUgY3VycmVudCBzY29wZS5cbiAqXG4gKiBAcGFyYW0gY2xpZW50Q2xhc3MgVGhlIGNsaWVudCBjbGFzcyB0byBpbnN0YW50aWF0ZS5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEFuZEJpbmQ8RiBleHRlbmRzIENsaWVudCwgTyBleHRlbmRzIENsaWVudE9wdGlvbnM+KFxuICBjbGllbnRDbGFzczogQ2xpZW50Q2xhc3M8RiwgTz4sXG4gIG9wdGlvbnM6IE8sXG4pOiB2b2lkIHtcbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBpZiAoX19ERUJVR19CVUlMRF9fKSB7XG4gICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBgY29uc29sZS53YXJuYCByYXRoZXIgdGhhbiBgbG9nZ2VyLndhcm5gIHNpbmNlIGJ5IG5vbi1kZWJ1ZyBidW5kbGVzIGhhdmUgYWxsIGBsb2dnZXIueGAgc3RhdGVtZW50cyBzdHJpcHBlZFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBodWIgPSBnZXRDdXJyZW50SHViKCk7XG4gIGNvbnN0IHNjb3BlID0gaHViLmdldFNjb3BlKCk7XG4gIHNjb3BlLnVwZGF0ZShvcHRpb25zLmluaXRpYWxTY29wZSk7XG5cbiAgY29uc3QgY2xpZW50ID0gbmV3IGNsaWVudENsYXNzKG9wdGlvbnMpO1xuICBodWIuYmluZENsaWVudChjbGllbnQpO1xufVxuIl0sIm5hbWVzIjpbImluaXRBbmRCaW5kIiwiY2xpZW50Q2xhc3MiLCJvcHRpb25zIiwiZGVidWciLCJfX1NFTlRSWV9ERUJVR19fIiwidXRpbHMiLCJsb2dnZXIiLCJlbmFibGUiLCJjb25zb2xlIiwid2FybiIsImh1YiQxIiwiaHViIiwiZ2V0Q3VycmVudEh1YiIsInNjb3BlIiwiZ2V0U2NvcGUiLCJ1cGRhdGUiLCJpbml0aWFsU2NvcGUiLCJjbGllbnQiLCJiaW5kQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/sdk.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/session.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/session.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  var startingTime = utils.timestampInSeconds();\n  var session = {\n    sid: utils.uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: function toJSON() {\n      return sessionToJSON(session);\n    }\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || utils.timestampInSeconds();\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : utils.uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = \"\".concat(context.did);\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    var duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  var context = {};\n  if (status) {\n    context = {\n      status: status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return utils.dropUndefinedKeys({\n    sid: \"\".concat(session.sid),\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? \"\".concat(session.did) : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexports.closeSession = closeSession;\nexports.makeSession = makeSession;\nexports.updateSession = updateSession;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/session.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/sessionflusher.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/sessionflusher.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ./hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\n\n/**\n * @inheritdoc\n */\nvar SessionFlusher = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SessionFlusher(client, attrs) {\n    var _this = this;\n    _classCallCheck(this, SessionFlusher);\n    SessionFlusher.prototype.__init.call(this);\n    SessionFlusher.prototype.__init2.call(this);\n    SessionFlusher.prototype.__init3.call(this);\n    this._client = client;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(function () {\n      return _this.flush();\n    }, this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  _createClass(SessionFlusher, [{\n    key: \"__init\",\n    value: function __init() {\n      this.flushTimeout = 60;\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._pendingAggregates = {};\n    }\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._isEnabled = true;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var sessionAggregates = this.getSessionAggregates();\n      if (sessionAggregates.aggregates.length === 0) {\n        return;\n      }\n      this._pendingAggregates = {};\n      this._client.sendSession(sessionAggregates);\n    }\n\n    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  }, {\n    key: \"getSessionAggregates\",\n    value: function getSessionAggregates() {\n      var _this2 = this;\n      var aggregates = Object.keys(this._pendingAggregates).map(function (key) {\n        return _this2._pendingAggregates[parseInt(key)];\n      });\n      var sessionAggregates = {\n        attrs: this._sessionAttrs,\n        aggregates: aggregates\n      };\n      return utils.dropUndefinedKeys(sessionAggregates);\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"close\",\n    value: function close() {\n      clearInterval(this._intervalId);\n      this._isEnabled = false;\n      this.flush();\n    }\n\n    /**\n     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n     * `_incrementSessionStatusCount` along with the start date\n     */\n  }, {\n    key: \"incrementSessionStatusCount\",\n    value: function incrementSessionStatusCount() {\n      if (!this._isEnabled) {\n        return;\n      }\n      var scope = hub.getCurrentHub().getScope();\n      var requestSession = scope.getRequestSession();\n      if (requestSession && requestSession.status) {\n        this._incrementSessionStatusCount(requestSession.status, new Date());\n        // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n        // case captureRequestSession is called more than once to prevent double count\n        scope.setRequestSession(undefined);\n        /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n      }\n    }\n\n    /**\n     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n     * the session received\n     */\n  }, {\n    key: \"_incrementSessionStatusCount\",\n    value: function _incrementSessionStatusCount(status, date) {\n      // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n      var sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n      this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n      // corresponds to aggregated sessions in one specific minute bucket\n      // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n      var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n      if (!aggregationCounts.started) {\n        aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n      }\n      switch (status) {\n        case 'errored':\n          aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n          return aggregationCounts.errored;\n        case 'ok':\n          aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n          return aggregationCounts.exited;\n        default:\n          aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n          return aggregationCounts.crashed;\n      }\n    }\n  }]);\n  return SessionFlusher;\n}();\nexports.SessionFlusher = SessionFlusher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/sessionflusher.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar utils$1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/core/cjs/tracing/utils.js\");\nvar errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nfunction registerErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n  errorsInstrumented = true;\n  utils.addInstrumentationHandler('error', errorCallback);\n  utils.addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback() {\n  var activeTransaction = utils$1.getActiveTransaction();\n  if (activeTransaction) {\n    var status = 'internal_error';\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Transaction: \".concat(status, \" -> Global error occured\"));\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\nexports.registerErrorInstrumentation = registerErrorInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy90cmFjaW5nL2Vycm9ycy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUtBLElBQUFBLGtCQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLDZCQUFBO0VBQ0EsSUFBQUQsa0JBQUE7SUFDQTtFQUNBO0VBRUFBLGtCQUFBO0VBQ0FFLEtBQUEsQ0FBQUMseUJBQUEsVUFBQUMsYUFBQTtFQUNBRixLQUFBLENBQUFDLHlCQUFBLHVCQUFBQyxhQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsY0FBQTtFQUNBLElBQUFDLGlCQUFBLEdBQUFDLE9BQUEsQ0FBQUMsb0JBQUE7RUFDQSxJQUFBRixpQkFBQTtJQUNBLElBQUFHLE1BQUE7SUFDQSxRQUFBQyxnQkFBQSxvQkFBQUEsZ0JBQUEsS0FBQVAsS0FBQSxDQUFBUSxNQUFBLENBQUFDLEdBQUEsMkJBQUFDLE1BQUEsQ0FBQUosTUFBQTtJQUNBSCxpQkFBQSxDQUFBUSxTQUFBLENBQUFMLE1BQUE7RUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQUosYUFBQSxDQUFBVSxHQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL3RyYWNpbmcvZXJyb3JzLnRzPzA3ODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB0eXBlIHsgU3BhblN0YXR1c1R5cGUgfSBmcm9tICcuL3NwYW4nO1xuaW1wb3J0IHsgZ2V0QWN0aXZlVHJhbnNhY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcblxubGV0IGVycm9yc0luc3RydW1lbnRlZCA9IGZhbHNlO1xuXG4vKipcbiAqIENvbmZpZ3VyZXMgZ2xvYmFsIGVycm9yIGxpc3RlbmVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFcnJvckluc3RydW1lbnRhdGlvbigpOiB2b2lkIHtcbiAgaWYgKGVycm9yc0luc3RydW1lbnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVycm9yc0luc3RydW1lbnRlZCA9IHRydWU7XG4gIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoJ2Vycm9yJywgZXJyb3JDYWxsYmFjayk7XG4gIGFkZEluc3RydW1lbnRhdGlvbkhhbmRsZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGVycm9yQ2FsbGJhY2spO1xufVxuXG4vKipcbiAqIElmIGFuIGVycm9yIG9yIHVuaGFuZGxlZCBwcm9taXNlIG9jY3Vycywgd2UgbWFyayB0aGUgYWN0aXZlIHRyYW5zYWN0aW9uIGFzIGZhaWxlZFxuICovXG5mdW5jdGlvbiBlcnJvckNhbGxiYWNrKCk6IHZvaWQge1xuICBjb25zdCBhY3RpdmVUcmFuc2FjdGlvbiA9IGdldEFjdGl2ZVRyYW5zYWN0aW9uKCk7XG4gIGlmIChhY3RpdmVUcmFuc2FjdGlvbikge1xuICAgIGNvbnN0IHN0YXR1czogU3BhblN0YXR1c1R5cGUgPSAnaW50ZXJuYWxfZXJyb3InO1xuICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIubG9nKGBbVHJhY2luZ10gVHJhbnNhY3Rpb246ICR7c3RhdHVzfSAtPiBHbG9iYWwgZXJyb3Igb2NjdXJlZGApO1xuICAgIGFjdGl2ZVRyYW5zYWN0aW9uLnNldFN0YXR1cyhzdGF0dXMpO1xuICB9XG59XG5cbi8vIFRoZSBmdW5jdGlvbiBuYW1lIHdpbGwgYmUgbG9zdCB3aGVuIGJ1bmRsaW5nIGJ1dCB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gaWRlbnRpZnkgdGhpcyBsaXN0ZW5lciBsYXRlciB0byBtYWludGFpbiB0aGVcbi8vIG5vZGUuanMgZGVmYXVsdCBleGl0IGJlaGF2aW91clxuZXJyb3JDYWxsYmFjay50YWcgPSAnc2VudHJ5X3RyYWNpbmdFcnJvckNhbGxiYWNrJztcbiJdLCJuYW1lcyI6WyJlcnJvcnNJbnN0cnVtZW50ZWQiLCJyZWdpc3RlckVycm9ySW5zdHJ1bWVudGF0aW9uIiwidXRpbHMiLCJhZGRJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiZXJyb3JDYWxsYmFjayIsImFjdGl2ZVRyYW5zYWN0aW9uIiwidXRpbHMkMSIsImdldEFjdGl2ZVRyYW5zYWN0aW9uIiwic3RhdHVzIiwiX19TRU5UUllfREVCVUdfXyIsImxvZ2dlciIsImxvZyIsImNvbmNhdCIsInNldFN0YXR1cyIsInRhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/errors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/hubextensions.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/hubextensions.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ../hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\nvar hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"./node_modules/@sentry/core/cjs/utils/hasTracingEnabled.js\");\nvar errors = __webpack_require__(/*! ./errors.js */ \"./node_modules/@sentry/core/cjs/tracing/errors.js\");\nvar idletransaction = __webpack_require__(/*! ./idletransaction.js */ \"./node_modules/@sentry/core/cjs/tracing/idletransaction.js\");\nvar transaction = __webpack_require__(/*! ./transaction.js */ \"./node_modules/@sentry/core/cjs/tracing/transaction.js\");\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  var scope = this.getScope();\n  var span = scope.getSpan();\n  return span ? {\n    'sentry-trace': span.toTraceparent()\n  } : {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled.hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled)\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  var sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setMetadata({\n      sampleRate: sampleRate\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Discarding transaction because \".concat(typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \".concat(Number(sampleRate), \")\"));\n    return transaction;\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] starting \".concat(transaction.op, \" transaction - \").concat(transaction.name));\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (utils.isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \".concat(JSON.stringify(rate), \" of type \").concat(JSON.stringify(_typeof(rate)), \".\"));\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \".concat(rate, \".\"));\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var client = this.getClient();\n  var options = client && client.getOptions() || {};\n  var configInstrumenter = options.instrumenter || 'sentry';\n  var transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n  if (configInstrumenter !== transactionInstrumenter) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(\"A transaction was started with instrumenter=`\".concat(transactionInstrumenter, \"`, but the SDK is configured with the `\").concat(configInstrumenter, \"` instrumenter.\\nThe transaction will not be sampled. Please use the \").concat(configInstrumenter, \" instrumentation to start transactions.\"));\n    transactionContext.sampled = false;\n  }\n  var transaction$1 = new transaction.Transaction(transactionContext, this);\n  transaction$1 = sample(transaction$1, options, _objectSpread({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction$1.sampled) {\n    transaction$1.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction$1);\n  }\n  return transaction$1;\n}\n\n/**\n * Create new idle transaction.\n */\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext, heartbeatInterval) {\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new idletransaction.IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, _objectSpread({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nfunction addTracingExtensions() {\n  var carrier = hub.getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n  errors.registerErrorInstrumentation();\n}\nexports.addTracingExtensions = addTracingExtensions;\nexports.startIdleTransaction = startIdleTransaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/hubextensions.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/idletransaction.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/idletransaction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.get.js */ \"./node_modules/core-js/modules/es.reflect.get.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar span = __webpack_require__(/*! ./span.js */ \"./node_modules/@sentry/core/cjs/tracing/span.js\");\nvar transaction = __webpack_require__(/*! ./transaction.js */ \"./node_modules/@sentry/core/cjs/tracing/transaction.js\");\nvar TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  heartbeatInterval: 5000\n};\nvar FINISH_REASON_TAG = 'finishReason';\nvar IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden', 'finalTimeout', 'externalFinish', 'cancelled'];\n\n/**\n * @inheritDoc\n */\nvar IdleTransactionSpanRecorder = /*#__PURE__*/function (_span$SpanRecorder) {\n  \"use strict\";\n\n  _inherits(IdleTransactionSpanRecorder, _span$SpanRecorder);\n  var _super = _createSuper(IdleTransactionSpanRecorder);\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    var _this;\n    _classCallCheck(this, IdleTransactionSpanRecorder);\n    _this = _super.call(this, maxlen);\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(IdleTransactionSpanRecorder, [{\n    key: \"add\",\n    value: function add(span) {\n      var _this2 = this;\n      // We should make sure we do not push and pop activities for\n      // the transaction that this span recorder belongs to.\n      if (span.spanId !== this.transactionSpanId) {\n        // We patch span.finish() to pop an activity after setting an endTimestamp.\n        span.finish = function (endTimestamp) {\n          span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : utils.timestampInSeconds();\n          _this2._popActivity(span.spanId);\n        };\n\n        // We should only push new activities if the span does not have an end timestamp.\n        if (span.endTimestamp === undefined) {\n          this._pushActivity(span.spanId);\n        }\n      }\n      _get(_getPrototypeOf(IdleTransactionSpanRecorder.prototype), \"add\", this).call(this, span);\n    }\n  }]);\n  return IdleTransactionSpanRecorder;\n}(span.SpanRecorder);\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nvar IdleTransaction = /*#__PURE__*/function (_transaction$Transact) {\n  \"use strict\";\n\n  _inherits(IdleTransaction, _transaction$Transact);\n  var _super2 = _createSuper(IdleTransaction);\n  function IdleTransaction(transactionContext, _idleHub) {\n    var _this3;\n    var _idleTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TRACING_DEFAULTS.idleTimeout;\n    var _finalTimeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TRACING_DEFAULTS.finalTimeout;\n    var _heartbeatInterval = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TRACING_DEFAULTS.heartbeatInterval;\n    var _onScope = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    _classCallCheck(this, IdleTransaction);\n    _this3 = _super2.call(this, transactionContext, _idleHub);\n    _this3._idleHub = _idleHub;\n    _this3._idleTimeout = _idleTimeout;\n    _this3._finalTimeout = _finalTimeout;\n    _this3._heartbeatInterval = _heartbeatInterval;\n    _this3._onScope = _onScope;\n    IdleTransaction.prototype.__init.call(_assertThisInitialized(_this3));\n    IdleTransaction.prototype.__init2.call(_assertThisInitialized(_this3));\n    IdleTransaction.prototype.__init3.call(_assertThisInitialized(_this3));\n    IdleTransaction.prototype.__init4.call(_assertThisInitialized(_this3));\n    IdleTransaction.prototype.__init5.call(_assertThisInitialized(_this3));\n    IdleTransaction.prototype.__init6.call(_assertThisInitialized(_this3));\n    if (_onScope) {\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"Setting idle transaction on scope. Span ID: \".concat(_this3.spanId));\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_assertThisInitialized(_this3));\n      });\n    }\n    _this3._restartIdleTimeout();\n    setTimeout(function () {\n      if (!_this3._finished) {\n        _this3.setStatus('deadline_exceeded');\n        _this3._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];\n        _this3.finish();\n      }\n    }, _this3._finalTimeout);\n    return _this3;\n  }\n\n  /** {@inheritDoc} */\n  _createClass(IdleTransaction, [{\n    key: \"__init\",\n    value:\n    // Activities store a list of active spans\n    function __init() {\n      this.activities = {};\n    }\n\n    // Track state of activities in previous heartbeat\n\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._heartbeatCounter = 0;\n    }\n\n    // We should not use heartbeat if we finished a transaction\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._finished = false;\n    }\n\n    // Idle timeout was canceled and we should finish the transaction with the last span end.\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this._idleTimeoutCanceledPermanently = false;\n    }\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this._beforeFinishCallbacks = [];\n    }\n\n    /**\n     * Timer that tracks Transaction idleTimeout\n     */\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[4];\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var _this4 = this;\n      var endTimestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : utils.timestampInSeconds();\n      this._finished = true;\n      this.activities = {};\n      if (this.op === 'ui.action.click') {\n        this.setTag(FINISH_REASON_TAG, this._finishReason);\n      }\n      if (this.spanRecorder) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n        var _iterator = _createForOfIteratorHelper(this._beforeFinishCallbacks),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var callback = _step.value;\n            callback(this, endTimestamp);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n          // If we are dealing with the transaction itself, we just return it\n          if (span.spanId === _this4.spanId) {\n            return true;\n          }\n\n          // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n          if (!span.endTimestamp) {\n            span.endTimestamp = endTimestamp;\n            span.setStatus('cancelled');\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n          }\n          var keepSpan = span.startTimestamp < endTimestamp;\n          if (!keepSpan) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n          }\n          return keepSpan;\n        });\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] flushing IdleTransaction');\n      } else {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] No active IdleTransaction');\n      }\n\n      // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n      if (this._onScope) {\n        var scope = this._idleHub.getScope();\n        if (scope.getTransaction() === this) {\n          scope.setSpan(undefined);\n        }\n      }\n      return _get(_getPrototypeOf(IdleTransaction.prototype), \"finish\", this).call(this, endTimestamp);\n    }\n\n    /**\n     * Register a callback function that gets excecuted before the transaction finishes.\n     * Useful for cleanup or if you want to add any additional spans based on current context.\n     *\n     * This is exposed because users have no other way of running something before an idle transaction\n     * finishes.\n     */\n  }, {\n    key: \"registerBeforeFinishCallback\",\n    value: function registerBeforeFinishCallback(callback) {\n      this._beforeFinishCallbacks.push(callback);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"initSpanRecorder\",\n    value: function initSpanRecorder(maxlen) {\n      var _this5 = this;\n      if (!this.spanRecorder) {\n        var pushActivity = function pushActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n          _this5._pushActivity(id);\n        };\n        var popActivity = function popActivity(id) {\n          if (_this5._finished) {\n            return;\n          }\n          _this5._popActivity(id);\n        };\n        this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n        // Start heartbeat so that transactions do not run forever.\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Starting heartbeat');\n        this._pingHeartbeat();\n      }\n      this.spanRecorder.add(this);\n    }\n\n    /**\n     * Cancels the existing idle timeout, if there is one.\n     * @param restartOnChildSpanChange Default is `true`.\n     *                                 If set to false the transaction will end\n     *                                 with the last child span.\n     */\n  }, {\n    key: \"cancelIdleTimeout\",\n    value: function cancelIdleTimeout(endTimestamp) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          restartOnChildSpanChange: true\n        },\n        restartOnChildSpanChange = _ref.restartOnChildSpanChange;\n      this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;\n      if (this._idleTimeoutID) {\n        clearTimeout(this._idleTimeoutID);\n        this._idleTimeoutID = undefined;\n        if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {\n          this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n          this.finish(endTimestamp);\n        }\n      }\n    }\n\n    /**\n     * Temporary method used to externally set the transaction's `finishReason`\n     *\n     * ** WARNING**\n     * This is for the purpose of experimentation only and will be removed in the near future, do not use!\n     *\n     * @internal\n     *\n     */\n  }, {\n    key: \"setFinishReason\",\n    value: function setFinishReason(reason) {\n      this._finishReason = reason;\n    }\n\n    /**\n     * Restarts idle timeout, if there is no running idle timeout it will start one.\n     */\n  }, {\n    key: \"_restartIdleTimeout\",\n    value: function _restartIdleTimeout(endTimestamp) {\n      var _this6 = this;\n      this.cancelIdleTimeout();\n      this._idleTimeoutID = setTimeout(function () {\n        if (!_this6._finished && Object.keys(_this6.activities).length === 0) {\n          _this6._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];\n          _this6.finish(endTimestamp);\n        }\n      }, this._idleTimeout);\n    }\n\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n  }, {\n    key: \"_pushActivity\",\n    value: function _pushActivity(spanId) {\n      this.cancelIdleTimeout(undefined, {\n        restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently\n      });\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] pushActivity: \".concat(spanId));\n      this.activities[spanId] = true;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n  }, {\n    key: \"_popActivity\",\n    value: function _popActivity(spanId) {\n      if (this.activities[spanId]) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] popActivity \".concat(spanId));\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this.activities[spanId];\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n      }\n      if (Object.keys(this.activities).length === 0) {\n        var endTimestamp = utils.timestampInSeconds();\n        if (this._idleTimeoutCanceledPermanently) {\n          this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n          this.finish(endTimestamp);\n        } else {\n          // We need to add the timeout here to have the real endtimestamp of the transaction\n          // Remember timestampInSeconds is in seconds, timeout is in ms\n          this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);\n        }\n      }\n    }\n\n    /**\n     * Checks when entries of this.activities are not changing for 3 beats.\n     * If this occurs we finish the transaction.\n     */\n  }, {\n    key: \"_beat\",\n    value: function _beat() {\n      // We should not be running heartbeat if the idle transaction is finished.\n      if (this._finished) {\n        return;\n      }\n      var heartbeatString = Object.keys(this.activities).join('');\n      if (heartbeatString === this._prevHeartbeatString) {\n        this._heartbeatCounter++;\n      } else {\n        this._heartbeatCounter = 1;\n      }\n      this._prevHeartbeatString = heartbeatString;\n      if (this._heartbeatCounter >= 3) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];\n        this.finish();\n      } else {\n        this._pingHeartbeat();\n      }\n    }\n\n    /**\n     * Pings the heartbeat\n     */\n  }, {\n    key: \"_pingHeartbeat\",\n    value: function _pingHeartbeat() {\n      var _this7 = this;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"pinging Heartbeat -> current counter: \".concat(this._heartbeatCounter));\n      setTimeout(function () {\n        _this7._beat();\n      }, this._heartbeatInterval);\n    }\n  }]);\n  return IdleTransaction;\n}(transaction.Transaction);\nexports.IdleTransaction = IdleTransaction;\nexports.IdleTransactionSpanRecorder = IdleTransactionSpanRecorder;\nexports.TRACING_DEFAULTS = TRACING_DEFAULTS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/idletransaction.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/span.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/span.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nvar SpanRecorder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SpanRecorder() {\n    var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    _classCallCheck(this, SpanRecorder);\n    SpanRecorder.prototype.__init.call(this);\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  _createClass(SpanRecorder, [{\n    key: \"__init\",\n    value: function __init() {\n      this.spans = [];\n    }\n  }, {\n    key: \"add\",\n    value: function add(span) {\n      if (this.spans.length > this._maxlen) {\n        span.spanRecorder = undefined;\n      } else {\n        this.spans.push(span);\n      }\n    }\n  }]);\n  return SpanRecorder;\n}();\n/**\n * Span contains all data about a span\n */\nvar Span = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    _classCallCheck(this, Span);\n    Span.prototype.__init2.call(this);\n    Span.prototype.__init3.call(this);\n    Span.prototype.__init4.call(this);\n    Span.prototype.__init5.call(this);\n    Span.prototype.__init6.call(this);\n    Span.prototype.__init7.call(this);\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n    if (spanContext.instrumenter) {\n      this.instrumenter = spanContext.instrumenter;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Span, [{\n    key: \"__init2\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init2() {\n      this.traceId = utils.uuid4();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.spanId = utils.uuid4().substring(16);\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Internal keeper of the status\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this.startTimestamp = utils.timestampInSeconds();\n    }\n\n    /**\n     * Timestamp in seconds when the span ended.\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this.tags = {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this.data = {};\n    }\n\n    /**\n     * List of spans that were finalized\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * The instrumenter that created this span.\n     */\n  }, {\n    key: \"__init7\",\n    value: function __init7() {\n      this.instrumenter = 'sentry';\n    }\n  }, {\n    key: \"startChild\",\n    value: function startChild(spanContext) {\n      var childSpan = new Span(_objectSpread(_objectSpread({}, spanContext), {}, {\n        parentSpanId: this.spanId,\n        sampled: this.sampled,\n        traceId: this.traceId\n      }));\n      childSpan.spanRecorder = this.spanRecorder;\n      if (childSpan.spanRecorder) {\n        childSpan.spanRecorder.add(childSpan);\n      }\n      childSpan.transaction = this.transaction;\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {\n        var opStr = spanContext && spanContext.op || '< unknown op >';\n        var nameStr = childSpan.transaction.name || '< unknown name >';\n        var idStr = childSpan.transaction.spanId;\n        var logMessage = \"[Tracing] Starting '\".concat(opStr, \"' span on transaction '\").concat(nameStr, \"' (\").concat(idStr, \").\");\n        childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = {\n          logMessage: logMessage\n        };\n        utils.logger.log(logMessage);\n      }\n      return childSpan;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this.tags = _objectSpread(_objectSpread({}, this.tags), {}, _defineProperty({}, key, value));\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  }, {\n    key: \"setData\",\n    value: function setData(key, value) {\n      this.data = _objectSpread(_objectSpread({}, this.data), {}, _defineProperty({}, key, value));\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(value) {\n      this.status = value;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setHttpStatus\",\n    value: function setHttpStatus(httpStatus) {\n      this.setTag('http.status_code', String(httpStatus));\n      var spanStatus = spanStatusfromHttpCode(httpStatus);\n      if (spanStatus !== 'unknown_error') {\n        this.setStatus(spanStatus);\n      }\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"isSuccess\",\n    value: function isSuccess() {\n      return this.status === 'ok';\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"finish\",\n    value: function finish(endTimestamp) {\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n      // Don't call this for transactions\n      this.transaction && this.transaction.spanId !== this.spanId) {\n        var logMessage = this.transaction.metadata.spanMetadata[this.spanId].logMessage;\n        if (logMessage) {\n          utils.logger.log(logMessage.replace('Starting', 'Finishing'));\n        }\n      }\n      this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : utils.timestampInSeconds();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toTraceparent\",\n    value: function toTraceparent() {\n      var sampledString = '';\n      if (this.sampled !== undefined) {\n        sampledString = this.sampled ? '-1' : '-0';\n      }\n      return \"\".concat(this.traceId, \"-\").concat(this.spanId).concat(sampledString);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toContext\",\n    value: function toContext() {\n      return utils.dropUndefinedKeys({\n        data: this.data,\n        description: this.description,\n        endTimestamp: this.endTimestamp,\n        op: this.op,\n        parentSpanId: this.parentSpanId,\n        sampled: this.sampled,\n        spanId: this.spanId,\n        startTimestamp: this.startTimestamp,\n        status: this.status,\n        tags: this.tags,\n        traceId: this.traceId\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"updateWithContext\",\n    value: function updateWithContext(spanContext) {\n      this.data = spanContext.data || {};\n      this.description = spanContext.description;\n      this.endTimestamp = spanContext.endTimestamp;\n      this.op = spanContext.op;\n      this.parentSpanId = spanContext.parentSpanId;\n      this.sampled = spanContext.sampled;\n      this.spanId = spanContext.spanId || this.spanId;\n      this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n      this.status = spanContext.status;\n      this.tags = spanContext.tags || {};\n      this.traceId = spanContext.traceId || this.traceId;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTraceContext\",\n    value: function getTraceContext() {\n      return utils.dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        trace_id: this.traceId\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return utils.dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        start_timestamp: this.startTimestamp,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        timestamp: this.endTimestamp,\n        trace_id: this.traceId\n      });\n    }\n  }]);\n  return Span;\n}();\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n  return 'unknown_error';\n}\nexports.Span = Span;\nexports.SpanRecorder = SpanRecorder;\nexports.spanStatusfromHttpCode = spanStatusfromHttpCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/span.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/spanstatus.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/spanstatus.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\n// eslint-disable-next-line import/export\nexports.SpanStatus = void 0;\n(function (SpanStatus) {\n  /** The operation completed successfully. */\n  var Ok = 'ok';\n  SpanStatus[\"Ok\"] = Ok;\n  /** Deadline expired before operation could complete. */\n  var DeadlineExceeded = 'deadline_exceeded';\n  SpanStatus[\"DeadlineExceeded\"] = DeadlineExceeded;\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  var Unauthenticated = 'unauthenticated';\n  SpanStatus[\"Unauthenticated\"] = Unauthenticated;\n  /** 403 Forbidden */\n  var PermissionDenied = 'permission_denied';\n  SpanStatus[\"PermissionDenied\"] = PermissionDenied;\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  var NotFound = 'not_found';\n  SpanStatus[\"NotFound\"] = NotFound;\n  /** 429 Too Many Requests */\n  var ResourceExhausted = 'resource_exhausted';\n  SpanStatus[\"ResourceExhausted\"] = ResourceExhausted;\n  /** Client specified an invalid argument. 4xx. */\n  var InvalidArgument = 'invalid_argument';\n  SpanStatus[\"InvalidArgument\"] = InvalidArgument;\n  /** 501 Not Implemented */\n  var Unimplemented = 'unimplemented';\n  SpanStatus[\"Unimplemented\"] = Unimplemented;\n  /** 503 Service Unavailable */\n  var Unavailable = 'unavailable';\n  SpanStatus[\"Unavailable\"] = Unavailable;\n  /** Other/generic 5xx. */\n  var InternalError = 'internal_error';\n  SpanStatus[\"InternalError\"] = InternalError;\n  /** Unknown. Any non-standard HTTP status code. */\n  var UnknownError = 'unknown_error';\n  SpanStatus[\"UnknownError\"] = UnknownError;\n  /** The operation was cancelled (typically by the user). */\n  var Cancelled = 'cancelled';\n  SpanStatus[\"Cancelled\"] = Cancelled;\n  /** Already exists (409) */\n  var AlreadyExists = 'already_exists';\n  SpanStatus[\"AlreadyExists\"] = AlreadyExists;\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  var FailedPrecondition = 'failed_precondition';\n  SpanStatus[\"FailedPrecondition\"] = FailedPrecondition;\n  /** The operation was aborted, typically due to a concurrency issue. */\n  var Aborted = 'aborted';\n  SpanStatus[\"Aborted\"] = Aborted;\n  /** Operation was attempted past the valid range. */\n  var OutOfRange = 'out_of_range';\n  SpanStatus[\"OutOfRange\"] = OutOfRange;\n  /** Unrecoverable data loss or corruption */\n  var DataLoss = 'data_loss';\n  SpanStatus[\"DataLoss\"] = DataLoss;\n})(exports.SpanStatus || (exports.SpanStatus = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy90cmFjaW5nL3NwYW5zdGF0dXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsa0JBQUE7QUFBQSxXQUFBQyxVQUFBO0VBQ0E7RUFDQSxJQUFBQyxFQUFBO0VBQUFELFVBQUEsU0FBQUMsRUFBQTtFQUNBO0VBQ0EsSUFBQUMsZ0JBQUE7RUFBQUYsVUFBQSx1QkFBQUUsZ0JBQUE7RUFDQTtFQUNBLElBQUFDLGVBQUE7RUFBQUgsVUFBQSxzQkFBQUcsZUFBQTtFQUNBO0VBQ0EsSUFBQUMsZ0JBQUE7RUFBQUosVUFBQSx1QkFBQUksZ0JBQUE7RUFDQTtFQUNBLElBQUFDLFFBQUE7RUFBQUwsVUFBQSxlQUFBSyxRQUFBO0VBQ0E7RUFDQSxJQUFBQyxpQkFBQTtFQUFBTixVQUFBLHdCQUFBTSxpQkFBQTtFQUNBO0VBQ0EsSUFBQUMsZUFBQTtFQUFBUCxVQUFBLHNCQUFBTyxlQUFBO0VBQ0E7RUFDQSxJQUFBQyxhQUFBO0VBQUFSLFVBQUEsb0JBQUFRLGFBQUE7RUFDQTtFQUNBLElBQUFDLFdBQUE7RUFBQVQsVUFBQSxrQkFBQVMsV0FBQTtFQUNBO0VBQ0EsSUFBQUMsYUFBQTtFQUFBVixVQUFBLG9CQUFBVSxhQUFBO0VBQ0E7RUFDQSxJQUFBQyxZQUFBO0VBQUFYLFVBQUEsbUJBQUFXLFlBQUE7RUFDQTtFQUNBLElBQUFDLFNBQUE7RUFBQVosVUFBQSxnQkFBQVksU0FBQTtFQUNBO0VBQ0EsSUFBQUMsYUFBQTtFQUFBYixVQUFBLG9CQUFBYSxhQUFBO0VBQ0E7RUFDQSxJQUFBQyxrQkFBQTtFQUFBZCxVQUFBLHlCQUFBYyxrQkFBQTtFQUNBO0VBQ0EsSUFBQUMsT0FBQTtFQUFBZixVQUFBLGNBQUFlLE9BQUE7RUFDQTtFQUNBLElBQUFDLFVBQUE7RUFBQWhCLFVBQUEsaUJBQUFnQixVQUFBO0VBQ0E7RUFDQSxJQUFBQyxRQUFBO0VBQUFqQixVQUFBLGVBQUFpQixRQUFBO0FBQ0EsR0FBQWxCLE9BQUEsQ0FBQUMsVUFBQSxLQUFBRCxrQkFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy90cmFjaW5nL3NwYW5zdGF0dXMudHM/OGU1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVGhlIHN0YXR1cyBvZiBhbiBTcGFuLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBzdHJpbmcgbGl0ZXJhbHMgLSBpZiB5b3UgcmVxdWlyZSB0eXBlIGNhc3RpbmcsIGNhc3QgdG8gU3BhblN0YXR1c1R5cGUgdHlwZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4cG9ydFxuZXhwb3J0IGVudW0gU3BhblN0YXR1cyB7XG4gIC8qKiBUaGUgb3BlcmF0aW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuICovXG4gIE9rID0gJ29rJyxcbiAgLyoqIERlYWRsaW5lIGV4cGlyZWQgYmVmb3JlIG9wZXJhdGlvbiBjb3VsZCBjb21wbGV0ZS4gKi9cbiAgRGVhZGxpbmVFeGNlZWRlZCA9ICdkZWFkbGluZV9leGNlZWRlZCcsXG4gIC8qKiA0MDEgVW5hdXRob3JpemVkIChhY3R1YWxseSBkb2VzIG1lYW4gdW5hdXRoZW50aWNhdGVkIGFjY29yZGluZyB0byBSRkMgNzIzNSkgKi9cbiAgVW5hdXRoZW50aWNhdGVkID0gJ3VuYXV0aGVudGljYXRlZCcsXG4gIC8qKiA0MDMgRm9yYmlkZGVuICovXG4gIFBlcm1pc3Npb25EZW5pZWQgPSAncGVybWlzc2lvbl9kZW5pZWQnLFxuICAvKiogNDA0IE5vdCBGb3VuZC4gU29tZSByZXF1ZXN0ZWQgZW50aXR5IChmaWxlIG9yIGRpcmVjdG9yeSkgd2FzIG5vdCBmb3VuZC4gKi9cbiAgTm90Rm91bmQgPSAnbm90X2ZvdW5kJyxcbiAgLyoqIDQyOSBUb28gTWFueSBSZXF1ZXN0cyAqL1xuICBSZXNvdXJjZUV4aGF1c3RlZCA9ICdyZXNvdXJjZV9leGhhdXN0ZWQnLFxuICAvKiogQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIGFyZ3VtZW50LiA0eHguICovXG4gIEludmFsaWRBcmd1bWVudCA9ICdpbnZhbGlkX2FyZ3VtZW50JyxcbiAgLyoqIDUwMSBOb3QgSW1wbGVtZW50ZWQgKi9cbiAgVW5pbXBsZW1lbnRlZCA9ICd1bmltcGxlbWVudGVkJyxcbiAgLyoqIDUwMyBTZXJ2aWNlIFVuYXZhaWxhYmxlICovXG4gIFVuYXZhaWxhYmxlID0gJ3VuYXZhaWxhYmxlJyxcbiAgLyoqIE90aGVyL2dlbmVyaWMgNXh4LiAqL1xuICBJbnRlcm5hbEVycm9yID0gJ2ludGVybmFsX2Vycm9yJyxcbiAgLyoqIFVua25vd24uIEFueSBub24tc3RhbmRhcmQgSFRUUCBzdGF0dXMgY29kZS4gKi9cbiAgVW5rbm93bkVycm9yID0gJ3Vua25vd25fZXJyb3InLFxuICAvKiogVGhlIG9wZXJhdGlvbiB3YXMgY2FuY2VsbGVkICh0eXBpY2FsbHkgYnkgdGhlIHVzZXIpLiAqL1xuICBDYW5jZWxsZWQgPSAnY2FuY2VsbGVkJyxcbiAgLyoqIEFscmVhZHkgZXhpc3RzICg0MDkpICovXG4gIEFscmVhZHlFeGlzdHMgPSAnYWxyZWFkeV9leGlzdHMnLFxuICAvKiogT3BlcmF0aW9uIHdhcyByZWplY3RlZCBiZWNhdXNlIHRoZSBzeXN0ZW0gaXMgbm90IGluIGEgc3RhdGUgcmVxdWlyZWQgZm9yIHRoZSBvcGVyYXRpb24ncyAqL1xuICBGYWlsZWRQcmVjb25kaXRpb24gPSAnZmFpbGVkX3ByZWNvbmRpdGlvbicsXG4gIC8qKiBUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLCB0eXBpY2FsbHkgZHVlIHRvIGEgY29uY3VycmVuY3kgaXNzdWUuICovXG4gIEFib3J0ZWQgPSAnYWJvcnRlZCcsXG4gIC8qKiBPcGVyYXRpb24gd2FzIGF0dGVtcHRlZCBwYXN0IHRoZSB2YWxpZCByYW5nZS4gKi9cbiAgT3V0T2ZSYW5nZSA9ICdvdXRfb2ZfcmFuZ2UnLFxuICAvKiogVW5yZWNvdmVyYWJsZSBkYXRhIGxvc3Mgb3IgY29ycnVwdGlvbiAqL1xuICBEYXRhTG9zcyA9ICdkYXRhX2xvc3MnLFxufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJTcGFuU3RhdHVzIiwiT2siLCJEZWFkbGluZUV4Y2VlZGVkIiwiVW5hdXRoZW50aWNhdGVkIiwiUGVybWlzc2lvbkRlbmllZCIsIk5vdEZvdW5kIiwiUmVzb3VyY2VFeGhhdXN0ZWQiLCJJbnZhbGlkQXJndW1lbnQiLCJVbmltcGxlbWVudGVkIiwiVW5hdmFpbGFibGUiLCJJbnRlcm5hbEVycm9yIiwiVW5rbm93bkVycm9yIiwiQ2FuY2VsbGVkIiwiQWxyZWFkeUV4aXN0cyIsIkZhaWxlZFByZWNvbmRpdGlvbiIsIkFib3J0ZWQiLCJPdXRPZlJhbmdlIiwiRGF0YUxvc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/spanstatus.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/trace.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/trace.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar hub = __webpack_require__(/*! ../hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`, this function\n * will not generate spans, and the `span` returned from the callback may be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n */\nfunction trace(context, callback) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n  var ctx = _objectSpread({}, context);\n  // If a name is set and a description is not, set the description to the name.\n  if (ctx.name !== undefined && ctx.description === undefined) {\n    ctx.description = ctx.name;\n  }\n  var hub$1 = hub.getCurrentHub();\n  var scope = hub$1.getScope();\n  var parentSpan = scope.getSpan();\n  var activeSpan = parentSpan ? parentSpan.startChild(ctx) : hub$1.startTransaction(ctx);\n  scope.setSpan(activeSpan);\n  function finishAndSetSpan() {\n    activeSpan && activeSpan.finish();\n    hub$1.getScope().setSpan(parentSpan);\n  }\n  var maybePromiseResult;\n  try {\n    maybePromiseResult = callback(activeSpan);\n  } catch (e) {\n    activeSpan && activeSpan.setStatus('internal_error');\n    onError(e);\n    finishAndSetSpan();\n    throw e;\n  }\n  if (utils.isThenable(maybePromiseResult)) {\n    Promise.resolve(maybePromiseResult).then(function () {\n      finishAndSetSpan();\n    }, function (e) {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(e);\n      finishAndSetSpan();\n    });\n  } else {\n    finishAndSetSpan();\n  }\n  return maybePromiseResult;\n}\nexports.trace = trace;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy90cmFjaW5nL3RyYWNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLE1BQ0FDLE9BQUEsRUFDQUMsUUFBQSxFQUdBO0VBQUEsSUFEQUMsT0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUE7RUFFQSxJQUFBRyxHQUFBLEdBQUFDLGFBQUEsS0FBQVAsT0FBQTtFQUNBO0VBQ0EsSUFBQU0sR0FBQSxDQUFBRSxJQUFBLEtBQUFILFNBQUEsSUFBQUMsR0FBQSxDQUFBRyxXQUFBLEtBQUFKLFNBQUE7SUFDQUMsR0FBQSxDQUFBRyxXQUFBLEdBQUFILEdBQUEsQ0FBQUUsSUFBQTtFQUNBO0VBRUEsSUFBQUUsS0FBQSxHQUFBQyxHQUFBLENBQUFDLGFBQUE7RUFDQSxJQUFBQyxLQUFBLEdBQUFILEtBQUEsQ0FBQUksUUFBQTtFQUVBLElBQUFDLFVBQUEsR0FBQUYsS0FBQSxDQUFBRyxPQUFBO0VBQ0EsSUFBQUMsVUFBQSxHQUFBRixVQUFBLEdBQUFBLFVBQUEsQ0FBQUcsVUFBQSxDQUFBWixHQUFBLElBQUFJLEtBQUEsQ0FBQVMsZ0JBQUEsQ0FBQWIsR0FBQTtFQUNBTyxLQUFBLENBQUFPLE9BQUEsQ0FBQUgsVUFBQTtFQUVBLFNBQUFJLGlCQUFBO0lBQ0FKLFVBQUEsSUFBQUEsVUFBQSxDQUFBSyxNQUFBO0lBQ0FaLEtBQUEsQ0FBQUksUUFBQSxHQUFBTSxPQUFBLENBQUFMLFVBQUE7RUFDQTtFQUVBLElBQUFRLGtCQUFBO0VBQ0E7SUFDQUEsa0JBQUEsR0FBQXRCLFFBQUEsQ0FBQWdCLFVBQUE7RUFDQSxTQUFBTyxDQUFBO0lBQ0FQLFVBQUEsSUFBQUEsVUFBQSxDQUFBUSxTQUFBO0lBQ0F2QixPQUFBLENBQUFzQixDQUFBO0lBQ0FILGdCQUFBO0lBQ0EsTUFBQUcsQ0FBQTtFQUNBO0VBRUEsSUFBQUUsS0FBQSxDQUFBQyxVQUFBLENBQUFKLGtCQUFBO0lBQ0FLLE9BQUEsQ0FBQUMsT0FBQSxDQUFBTixrQkFBQSxFQUFBTyxJQUFBLENBQ0E7TUFDQVQsZ0JBQUE7SUFDQSxHQUNBLFVBQUFHLENBQUE7TUFDQVAsVUFBQSxJQUFBQSxVQUFBLENBQUFRLFNBQUE7TUFDQXZCLE9BQUEsQ0FBQXNCLENBQUE7TUFDQUgsZ0JBQUE7SUFDQSxDQUNBO0VBQ0E7SUFDQUEsZ0JBQUE7RUFDQTtFQUVBLE9BQUFFLGtCQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvdHJhY2luZy90cmFjZS50cz8yNGVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVHJhbnNhY3Rpb25Db250ZXh0IH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBpc1RoZW5hYmxlIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICcuLi9odWInO1xuaW1wb3J0IHR5cGUgeyBTcGFuIH0gZnJvbSAnLi9zcGFuJztcblxuLyoqXG4gKiBXcmFwcyBhIGZ1bmN0aW9uIHdpdGggYSB0cmFuc2FjdGlvbi9zcGFuIGFuZCBmaW5pc2hlcyB0aGUgc3BhbiBhZnRlciB0aGUgZnVuY3Rpb24gaXMgZG9uZS5cbiAqXG4gKiBOb3RlIHRoYXQgaWYgeW91IGhhdmUgbm90IGVuYWJsZWQgdHJhY2luZyBleHRlbnNpb25zIHZpYSBgYWRkVHJhY2luZ0V4dGVuc2lvbnNgLCB0aGlzIGZ1bmN0aW9uXG4gKiB3aWxsIG5vdCBnZW5lcmF0ZSBzcGFucywgYW5kIHRoZSBgc3BhbmAgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2sgbWF5IGJlIHVuZGVmaW5lZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseSBhbmQgbWF5IGJyZWFrIGF0IGFueSB0aW1lLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFjZTxUPihcbiAgY29udGV4dDogVHJhbnNhY3Rpb25Db250ZXh0LFxuICBjYWxsYmFjazogKHNwYW4/OiBTcGFuKSA9PiBULFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIG9uRXJyb3I6IChlcnJvcjogdW5rbm93bikgPT4gdm9pZCA9ICgpID0+IHt9LFxuKTogVCB7XG4gIGNvbnN0IGN0eCA9IHsgLi4uY29udGV4dCB9O1xuICAvLyBJZiBhIG5hbWUgaXMgc2V0IGFuZCBhIGRlc2NyaXB0aW9uIGlzIG5vdCwgc2V0IHRoZSBkZXNjcmlwdGlvbiB0byB0aGUgbmFtZS5cbiAgaWYgKGN0eC5uYW1lICE9PSB1bmRlZmluZWQgJiYgY3R4LmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBjdHguZGVzY3JpcHRpb24gPSBjdHgubmFtZTtcbiAgfVxuXG4gIGNvbnN0IGh1YiA9IGdldEN1cnJlbnRIdWIoKTtcbiAgY29uc3Qgc2NvcGUgPSBodWIuZ2V0U2NvcGUoKTtcblxuICBjb25zdCBwYXJlbnRTcGFuID0gc2NvcGUuZ2V0U3BhbigpO1xuICBjb25zdCBhY3RpdmVTcGFuID0gcGFyZW50U3BhbiA/IHBhcmVudFNwYW4uc3RhcnRDaGlsZChjdHgpIDogaHViLnN0YXJ0VHJhbnNhY3Rpb24oY3R4KTtcbiAgc2NvcGUuc2V0U3BhbihhY3RpdmVTcGFuKTtcblxuICBmdW5jdGlvbiBmaW5pc2hBbmRTZXRTcGFuKCk6IHZvaWQge1xuICAgIGFjdGl2ZVNwYW4gJiYgYWN0aXZlU3Bhbi5maW5pc2goKTtcbiAgICBodWIuZ2V0U2NvcGUoKS5zZXRTcGFuKHBhcmVudFNwYW4pO1xuICB9XG5cbiAgbGV0IG1heWJlUHJvbWlzZVJlc3VsdDogVDtcbiAgdHJ5IHtcbiAgICBtYXliZVByb21pc2VSZXN1bHQgPSBjYWxsYmFjayhhY3RpdmVTcGFuKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGFjdGl2ZVNwYW4gJiYgYWN0aXZlU3Bhbi5zZXRTdGF0dXMoJ2ludGVybmFsX2Vycm9yJyk7XG4gICAgb25FcnJvcihlKTtcbiAgICBmaW5pc2hBbmRTZXRTcGFuKCk7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGlmIChpc1RoZW5hYmxlKG1heWJlUHJvbWlzZVJlc3VsdCkpIHtcbiAgICBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlUmVzdWx0KS50aGVuKFxuICAgICAgKCkgPT4ge1xuICAgICAgICBmaW5pc2hBbmRTZXRTcGFuKCk7XG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNwYW4gJiYgYWN0aXZlU3Bhbi5zZXRTdGF0dXMoJ2ludGVybmFsX2Vycm9yJyk7XG4gICAgICAgIG9uRXJyb3IoZSk7XG4gICAgICAgIGZpbmlzaEFuZFNldFNwYW4oKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBmaW5pc2hBbmRTZXRTcGFuKCk7XG4gIH1cblxuICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbInRyYWNlIiwiY29udGV4dCIsImNhbGxiYWNrIiwib25FcnJvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImN0eCIsIl9vYmplY3RTcHJlYWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJodWIkMSIsImh1YiIsImdldEN1cnJlbnRIdWIiLCJzY29wZSIsImdldFNjb3BlIiwicGFyZW50U3BhbiIsImdldFNwYW4iLCJhY3RpdmVTcGFuIiwic3RhcnRDaGlsZCIsInN0YXJ0VHJhbnNhY3Rpb24iLCJzZXRTcGFuIiwiZmluaXNoQW5kU2V0U3BhbiIsImZpbmlzaCIsIm1heWJlUHJvbWlzZVJlc3VsdCIsImUiLCJzZXRTdGF0dXMiLCJ1dGlscyIsImlzVGhlbmFibGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/trace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/transaction.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/transaction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.string.trim-end.js */ \"./node_modules/core-js/modules/es.string.trim-end.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.get.js */ \"./node_modules/core-js/modules/es.reflect.get.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar constants = __webpack_require__(/*! ../constants.js */ \"./node_modules/@sentry/core/cjs/constants.js\");\nvar hub = __webpack_require__(/*! ../hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\nvar span = __webpack_require__(/*! ./span.js */ \"./node_modules/@sentry/core/cjs/tracing/span.js\");\n\n/** JSDoc */\nvar Transaction = /*#__PURE__*/function (_span$Span) {\n  \"use strict\";\n\n  _inherits(Transaction, _span$Span);\n  var _super = _createSuper(Transaction);\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Transaction(transactionContext, hub$1) {\n    var _this;\n    _classCallCheck(this, Transaction);\n    _this = _super.call(this, transactionContext);\n    Transaction.prototype.__init.call(_assertThisInitialized(_this));\n    Transaction.prototype.__init2.call(_assertThisInitialized(_this));\n    Transaction.prototype.__init3.call(_assertThisInitialized(_this));\n    _this._hub = hub$1 || hub.getCurrentHub();\n    _this._name = transactionContext.name || '';\n    _this.metadata = _objectSpread(_objectSpread({\n      source: 'custom'\n    }, transactionContext.metadata), {}, {\n      spanMetadata: {}\n    });\n    _this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    _this.transaction = _assertThisInitialized(_this);\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    var incomingDynamicSamplingContext = _this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      _this._frozenDynamicSamplingContext = _objectSpread({}, incomingDynamicSamplingContext);\n    }\n    return _this;\n  }\n\n  /** Getter for `name` property */\n  _createClass(Transaction, [{\n    key: \"__init\",\n    value:\n    /**\n     * The reference to the current hub.\n     */\n\n    function __init() {\n      this._measurements = {};\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._contexts = {};\n    }\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._frozenDynamicSamplingContext = undefined;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n\n    /** Setter for `name` property, which also sets `source` as custom */,\n    set: function set(newName) {\n      this.setName(newName);\n    }\n\n    /**\n     * JSDoc\n     */\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n      this._name = name;\n      this.metadata.source = source;\n    }\n\n    /**\n     * Attaches SpanRecorder to the span itself\n     * @param maxlen maximum number of spans that can be recorded\n     */\n  }, {\n    key: \"initSpanRecorder\",\n    value: function initSpanRecorder() {\n      var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      if (!this.spanRecorder) {\n        this.spanRecorder = new span.SpanRecorder(maxlen);\n      }\n      this.spanRecorder.add(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._contexts[key];\n      } else {\n        this._contexts[key] = context;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setMeasurement\",\n    value: function setMeasurement(name, value) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      this._measurements[name] = {\n        value: value,\n        unit: unit\n      };\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(newMetadata) {\n      this.metadata = _objectSpread(_objectSpread({}, this.metadata), newMetadata);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"finish\",\n    value: function finish(endTimestamp) {\n      var _this2 = this;\n      // This transaction is already finished, so we should not flush it again.\n      if (this.endTimestamp !== undefined) {\n        return undefined;\n      }\n      if (!this.name) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n        this.name = '<unlabeled transaction>';\n      }\n\n      // just sets the end timestamp\n      _get(_getPrototypeOf(Transaction.prototype), \"finish\", this).call(this, endTimestamp);\n      var client = this._hub.getClient();\n      if (client && client.emit) {\n        client.emit('finishTransaction', this);\n      }\n      if (this.sampled !== true) {\n        // At this point if `sampled !== true` we want to discard the transaction.\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'transaction');\n        }\n        return undefined;\n      }\n      var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n        return s !== _this2 && s.endTimestamp;\n      }) : [];\n      if (this._trimEnd && finishedSpans.length > 0) {\n        this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n          if (prev.endTimestamp && current.endTimestamp) {\n            return prev.endTimestamp > current.endTimestamp ? prev : current;\n          }\n          return prev;\n        }).endTimestamp;\n      }\n      var metadata = this.metadata;\n      var transaction = _objectSpread({\n        contexts: _objectSpread(_objectSpread({}, this._contexts), {}, {\n          // We don't want to override trace context\n          trace: this.getTraceContext()\n        }),\n        spans: finishedSpans,\n        start_timestamp: this.startTimestamp,\n        tags: this.tags,\n        timestamp: this.endTimestamp,\n        transaction: this.name,\n        type: 'transaction',\n        sdkProcessingMetadata: _objectSpread(_objectSpread({}, metadata), {}, {\n          dynamicSamplingContext: this.getDynamicSamplingContext()\n        })\n      }, metadata.source && {\n        transaction_info: {\n          source: metadata.source\n        }\n      });\n      var hasMeasurements = Object.keys(this._measurements).length > 0;\n      if (hasMeasurements) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n        transaction.measurements = this._measurements;\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Tracing] Finishing \".concat(this.op, \" transaction: \").concat(this.name, \".\"));\n      return this._hub.captureEvent(transaction);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toContext\",\n    value: function toContext() {\n      var spanContext = _get(_getPrototypeOf(Transaction.prototype), \"toContext\", this).call(this);\n      return utils.dropUndefinedKeys(_objectSpread(_objectSpread({}, spanContext), {}, {\n        name: this.name,\n        trimEnd: this._trimEnd\n      }));\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"updateWithContext\",\n    value: function updateWithContext(transactionContext) {\n      _get(_getPrototypeOf(Transaction.prototype), \"updateWithContext\", this).call(this, transactionContext);\n      this.name = transactionContext.name || '';\n      this._trimEnd = transactionContext.trimEnd;\n      return this;\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @experimental\n     */\n  }, {\n    key: \"getDynamicSamplingContext\",\n    value: function getDynamicSamplingContext() {\n      if (this._frozenDynamicSamplingContext) {\n        return this._frozenDynamicSamplingContext;\n      }\n      var hub$1 = this._hub || hub.getCurrentHub();\n      var client = hub$1 && hub$1.getClient();\n      if (!client) return {};\n      var _ref = client.getOptions() || {},\n        environment = _ref.environment,\n        release = _ref.release;\n      var _ref2 = client.getDsn() || {},\n        public_key = _ref2.publicKey;\n      var maybeSampleRate = this.metadata.sampleRate;\n      var sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n      var _ref3 = hub$1.getScope().getUser() || {},\n        user_segment = _ref3.segment;\n      var source = this.metadata.source;\n\n      // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n      var transaction = source && source !== 'url' ? this.name : undefined;\n      var dsc = utils.dropUndefinedKeys({\n        environment: environment || constants.DEFAULT_ENVIRONMENT,\n        release: release,\n        transaction: transaction,\n        user_segment: user_segment,\n        public_key: public_key,\n        trace_id: this.traceId,\n        sample_rate: sample_rate\n      });\n\n      // Uncomment if we want to make DSC immutable\n      // this._frozenDynamicSamplingContext = dsc;\n\n      client.emit && client.emit('createDsc', dsc);\n      return dsc;\n    }\n\n    /**\n     * Override the current hub with a new one.\n     * Used if you want another hub to finish the transaction.\n     *\n     * @internal\n     */\n  }, {\n    key: \"setHub\",\n    value: function setHub(hub) {\n      this._hub = hub;\n    }\n  }]);\n  return Transaction;\n}(span.Span);\nexports.Transaction = Transaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/transaction.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/tracing/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/tracing/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar hub = __webpack_require__(/*! ../hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** Grabs active transaction off scope, if any */\nfunction getActiveTransaction(maybeHub) {\n  var hub$1 = maybeHub || hub.getCurrentHub();\n  var scope = hub$1.getScope();\n  return scope.getTransaction();\n}\nexports.TRACEPARENT_REGEXP = utils.TRACEPARENT_REGEXP;\nexports.extractTraceparentData = utils.extractTraceparentData;\nexports.stripUrlQueryAndFragment = utils.stripUrlQueryAndFragment;\nexports.getActiveTransaction = getActiveTransaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy90cmFjaW5nL3V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQW1CQTtBQUNBLFNBQUFBLHFCQUFBQyxRQUFBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBRCxRQUFBLElBQUFFLEdBQUEsQ0FBQUMsYUFBQTtFQUNBLElBQUFDLEtBQUEsR0FBQUgsS0FBQSxDQUFBSSxRQUFBO0VBQ0EsT0FBQUQsS0FBQSxDQUFBRSxjQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvdHJhY2luZy91dGlscy50cz9lZGZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgVHJhbnNhY3Rpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcblxuaW1wb3J0IHR5cGUgeyBIdWIgfSBmcm9tICcuLi9odWInO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJy4uL2h1Yic7XG5cbi8qKlxuICogVGhlIGBleHRyYWN0VHJhY2VwYXJlbnREYXRhYCBmdW5jdGlvbiBhbmQgYFRSQUNFUEFSRU5UX1JFR0VYUGAgY29uc3RhbnQgdXNlZFxuICogdG8gYmUgZGVjbGFyZWQgaW4gdGhpcyBmaWxlLiBJdCB3YXMgbGF0ZXIgbW92ZWQgaW50byBgQHNlbnRyeS91dGlsc2AgYXMgcGFydCBvZiBhXG4gKiBtb3ZlIHRvIHJlbW92ZSBgQHNlbnRyeS90cmFjaW5nYCBkZXBlbmRlbmNpZXMgZnJvbSBgQHNlbnRyeS9ub2RlYCAoYGV4dHJhY3RUcmFjZXBhcmVudERhdGFgXG4gKiBpcyB0aGUgb25seSB0cmFjaW5nIGZ1bmN0aW9uIHVzZWQgYnkgYEBzZW50cnkvbm9kZWApLlxuICpcbiAqIFRoZXNlIGV4cG9ydHMgYXJlIGtlcHQgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkncyBzYWtlLlxuICpcbiAqIFRPRE8odjcpOiBSZW9yZ2FuaXplIHRoZXNlIGV4cG9ydHNcbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvNDY0MiBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgeyBUUkFDRVBBUkVOVF9SRUdFWFAsIGV4dHJhY3RUcmFjZXBhcmVudERhdGEgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIEdyYWJzIGFjdGl2ZSB0cmFuc2FjdGlvbiBvZmYgc2NvcGUsIGlmIGFueSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zYWN0aW9uPFQgZXh0ZW5kcyBUcmFuc2FjdGlvbj4obWF5YmVIdWI/OiBIdWIpOiBUIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgaHViID0gbWF5YmVIdWIgfHwgZ2V0Q3VycmVudEh1YigpO1xuICBjb25zdCBzY29wZSA9IGh1Yi5nZXRTY29wZSgpO1xuICByZXR1cm4gc2NvcGUuZ2V0VHJhbnNhY3Rpb24oKSBhcyBUIHwgdW5kZWZpbmVkO1xufVxuXG4vLyBzbyBpdCBjYW4gYmUgdXNlZCBpbiBtYW51YWwgaW5zdHJ1bWVudGF0aW9uIHdpdGhvdXQgbmVjZXNzaXRhdGluZyBhIGhhcmQgZGVwZW5kZW5jeSBvbiBAc2VudHJ5L3V0aWxzXG5leHBvcnQgeyBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbiJdLCJuYW1lcyI6WyJnZXRBY3RpdmVUcmFuc2FjdGlvbiIsIm1heWJlSHViIiwiaHViJDEiLCJodWIiLCJnZXRDdXJyZW50SHViIiwic2NvcGUiLCJnZXRTY29wZSIsImdldFRyYW5zYWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/tracing/utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/transports/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/transports/base.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(options, makeRequest) {\n  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils.makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  var rateLimits = {};\n  var flush = function flush(timeout) {\n    return buffer.drain(timeout);\n  };\n  function send(envelope) {\n    var filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    utils.forEachEnvelopeItem(envelope, function (item, type) {\n      var envelopeItemDataCategory = utils.envelopeItemTypeToDataCategory(type);\n      if (utils.isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        var event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return utils.resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var filteredEnvelope = utils.createEnvelope(envelope[0], filteredEnvelopeItems);\n\n    // Creates client report for each item in an envelope\n    var recordEnvelopeLoss = function recordEnvelopeLoss(reason) {\n      utils.forEachEnvelopeItem(filteredEnvelope, function (item, type) {\n        var event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, utils.envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n    var requestTask = function requestTask() {\n      return makeRequest({\n        body: utils.serializeEnvelope(filteredEnvelope, options.textEncoder)\n      }).then(function (response) {\n        // We don't want to throw on NOK responses, but we want to at least log them\n        if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn(\"Sentry responded with status code \".concat(response.statusCode, \" to sent event.\"));\n        }\n        rateLimits = utils.updateRateLimits(rateLimits, response);\n        return response;\n      }, function (error) {\n        recordEnvelopeLoss('network_error');\n        throw error;\n      });\n    };\n    return buffer.add(requestTask).then(function (result) {\n      return result;\n    }, function (error) {\n      if (error instanceof utils.SentryError) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return utils.resolvedSyncPromise();\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n  return {\n    send: send,\n    flush: flush\n  };\n}\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n  return Array.isArray(item) ? item[1] : undefined;\n}\nexports.DEFAULT_TRANSPORT_BUFFER_SIZE = DEFAULT_TRANSPORT_BUFFER_SIZE;\nexports.createTransport = createTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/transports/base.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/transports/multiplexed.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/transports/multiplexed.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar api = __webpack_require__(/*! ../api.js */ \"./node_modules/@sentry/core/cjs/api.js\");\nfunction eventFromEnvelope(env, types) {\n  var event;\n  utils.forEachEnvelopeItem(env, function (item, type) {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? item[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n  return event;\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nfunction makeMultiplexedTransport(createTransport, matcher) {\n  return function (options) {\n    var fallbackTransport = createTransport(options);\n    var otherTransports = {};\n    function getTransport(dsn) {\n      if (!otherTransports[dsn]) {\n        var url = api.getEnvelopeEndpointWithUrlEncodedAuth(utils.dsnFromString(dsn));\n        otherTransports[dsn] = createTransport(_objectSpread(_objectSpread({}, options), {}, {\n          url: url\n        }));\n      }\n      return otherTransports[dsn];\n    }\n    function send(_x) {\n      return _send.apply(this, arguments);\n    }\n    function _send() {\n      _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(envelope) {\n        var getEvent, transports, results;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              getEvent = function _getEvent(types) {\n                var eventTypes = types && types.length ? types : ['event'];\n                return eventFromEnvelope(envelope, eventTypes);\n              };\n              transports = matcher({\n                envelope: envelope,\n                getEvent: getEvent\n              }).map(function (dsn) {\n                return getTransport(dsn);\n              }); // If we have no transports to send to, use the fallback transport\n              if (transports.length === 0) {\n                transports.push(fallbackTransport);\n              }\n              _context.next = 5;\n              return Promise.all(transports.map(function (transport) {\n                return transport.send(envelope);\n              }));\n            case 5:\n              results = _context.sent;\n              return _context.abrupt(\"return\", results[0]);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _send.apply(this, arguments);\n    }\n    function flush(_x2) {\n      return _flush.apply(this, arguments);\n    }\n    function _flush() {\n      _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(timeout) {\n        var allTransports, results;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              allTransports = [].concat(_toConsumableArray(Object.keys(otherTransports).map(function (dsn) {\n                return otherTransports[dsn];\n              })), [fallbackTransport]);\n              _context2.next = 3;\n              return Promise.all(allTransports.map(function (transport) {\n                return transport.flush(timeout);\n              }));\n            case 3:\n              results = _context2.sent;\n              return _context2.abrupt(\"return\", results.every(function (r) {\n                return r;\n              }));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return _flush.apply(this, arguments);\n    }\n    return {\n      send: send,\n      flush: flush\n    };\n  };\n}\nexports.makeMultiplexedTransport = makeMultiplexedTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/transports/multiplexed.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/transports/offline.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/transports/offline.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar MIN_DELAY = 100; // 100 ms\nvar START_DELAY = 5000; // 5 seconds\nvar MAX_DELAY = 3.6e6; // 1 hour\n\nfunction log(msg, error) {\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.info(\"[Offline]: \".concat(msg), error);\n}\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nfunction makeOfflineTransport(createTransport) {\n  return function (options) {\n    var transport = createTransport(options);\n    var store = options.createStore ? options.createStore(options) : undefined;\n    var retryDelay = START_DELAY;\n    var flushTimer;\n    function shouldQueue(env, error, retryDelay) {\n      // We don't queue Session Replay envelopes because they are:\n      // - Ordered and Replay relies on the response status to know when they're successfully sent.\n      // - Likely to fill the queue quickly and block other events from being sent.\n      // We also want to drop client reports because they can be generated when we retry sending events while offline.\n      if (utils.envelopeContainsItemType(env, ['replay_event', 'replay_recording', 'client_report'])) {\n        return false;\n      }\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n      return true;\n    }\n    function flushIn(delay) {\n      if (!store) {\n        return;\n      }\n      if (flushTimer) {\n        clearTimeout(flushTimer);\n      }\n      flushTimer = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var found;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              flushTimer = undefined;\n              _context.next = 3;\n              return store.pop();\n            case 3:\n              found = _context.sent;\n              if (found) {\n                log('Attempting to send previously queued event');\n                void send(found).catch(function (e) {\n                  log('Failed to retry sending', e);\n                });\n              }\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })), delay);\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n    function flushWithBackOff() {\n      if (flushTimer) {\n        return;\n      }\n      flushIn(retryDelay);\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n    function send(_x) {\n      return _send.apply(this, arguments);\n    }\n    function _send() {\n      _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(envelope) {\n        var result, delay;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return transport.send(envelope);\n            case 3:\n              result = _context2.sent;\n              delay = MIN_DELAY;\n              if (!result) {\n                _context2.next = 12;\n                break;\n              }\n              if (!(result.headers && result.headers['retry-after'])) {\n                _context2.next = 10;\n                break;\n              }\n              delay = utils.parseRetryAfterHeader(result.headers['retry-after']);\n              _context2.next = 12;\n              break;\n            case 10:\n              if (!((result.statusCode || 0) >= 400)) {\n                _context2.next = 12;\n                break;\n              }\n              return _context2.abrupt(\"return\", result);\n            case 12:\n              flushIn(delay);\n              retryDelay = START_DELAY;\n              return _context2.abrupt(\"return\", result);\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](0);\n              _context2.t1 = store;\n              if (!_context2.t1) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 23;\n              return shouldQueue(envelope, _context2.t0, retryDelay);\n            case 23:\n              _context2.t1 = _context2.sent;\n            case 24:\n              if (!_context2.t1) {\n                _context2.next = 32;\n                break;\n              }\n              _context2.next = 27;\n              return store.insert(envelope);\n            case 27:\n              flushWithBackOff();\n              log('Error sending. Event queued', _context2.t0);\n              return _context2.abrupt(\"return\", {});\n            case 32:\n              throw _context2.t0;\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 17]]);\n      }));\n      return _send.apply(this, arguments);\n    }\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n    return {\n      send: send,\n      flush: function flush(t) {\n        return transport.flush(t);\n      }\n    };\n  };\n}\nexports.MIN_DELAY = MIN_DELAY;\nexports.START_DELAY = START_DELAY;\nexports.makeOfflineTransport = makeOfflineTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/transports/offline.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/utils/hasTracingEnabled.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/utils/hasTracingEnabled.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar hub = __webpack_require__(/*! ../hub.js */ \"./node_modules/@sentry/core/cjs/hub.js\");\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nfunction hasTracingEnabled(maybeOptions) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n  var client = hub.getCurrentHub().getClient();\n  var options = maybeOptions || client && client.getOptions();\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\nexports.hasTracingEnabled = hasTracingEnabled;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy91dGlscy9oYXNUcmFjaW5nRW5hYmxlZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUlBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxrQkFDQUMsWUFBQSxFQUNBO0VBQ0EsV0FBQUMsa0JBQUEsbUJBQUFBLGtCQUFBO0lBQ0E7RUFDQTtFQUVBLElBQUFDLE1BQUEsR0FBQUMsR0FBQSxDQUFBQyxhQUFBLEdBQUFDLFNBQUE7RUFDQSxJQUFBQyxPQUFBLEdBQUFOLFlBQUEsSUFBQUUsTUFBQSxJQUFBQSxNQUFBLENBQUFLLFVBQUE7RUFDQSxTQUFBRCxPQUFBLEtBQUFBLE9BQUEsQ0FBQUUsYUFBQSwwQkFBQUYsT0FBQSx1QkFBQUEsT0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL3V0aWxzL2hhc1RyYWNpbmdFbmFibGVkLnRzP2I3ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICcuLi9odWInO1xuXG4vLyBUcmVlc2hha2FibGUgZ3VhcmQgdG8gcmVtb3ZlIGFsbCBjb2RlIHJlbGF0ZWQgdG8gdHJhY2luZ1xuZGVjbGFyZSBjb25zdCBfX1NFTlRSWV9UUkFDSU5HX186IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0cmFjaW5nIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICpcbiAqIFRyYWNpbmcgaXMgZW5hYmxlZCB3aGVuIGF0IGxlYXN0IG9uZSBvZiBgdHJhY2VzU2FtcGxlUmF0ZWAgYW5kIGB0cmFjZXNTYW1wbGVyYCBpcyBkZWZpbmVkIGluIHRoZSBTREsgY29uZmlnLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVHJhY2luZ0VuYWJsZWQoXG4gIG1heWJlT3B0aW9ucz86IFBpY2s8T3B0aW9ucywgJ3RyYWNlc1NhbXBsZVJhdGUnIHwgJ3RyYWNlc1NhbXBsZXInIHwgJ2VuYWJsZVRyYWNpbmcnPiB8IHVuZGVmaW5lZCxcbik6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIF9fU0VOVFJZX1RSQUNJTkdfXyA9PT0gJ2Jvb2xlYW4nICYmICFfX1NFTlRSWV9UUkFDSU5HX18pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBnZXRDdXJyZW50SHViKCkuZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IG9wdGlvbnMgPSBtYXliZU9wdGlvbnMgfHwgKGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpKTtcbiAgcmV0dXJuICEhb3B0aW9ucyAmJiAob3B0aW9ucy5lbmFibGVUcmFjaW5nIHx8ICd0cmFjZXNTYW1wbGVSYXRlJyBpbiBvcHRpb25zIHx8ICd0cmFjZXNTYW1wbGVyJyBpbiBvcHRpb25zKTtcbn1cbiJdLCJuYW1lcyI6WyJoYXNUcmFjaW5nRW5hYmxlZCIsIm1heWJlT3B0aW9ucyIsIl9fU0VOVFJZX1RSQUNJTkdfXyIsImNsaWVudCIsImh1YiIsImdldEN1cnJlbnRIdWIiLCJnZXRDbGllbnQiLCJvcHRpb25zIiwiZ2V0T3B0aW9ucyIsImVuYWJsZVRyYWNpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/utils/hasTracingEnabled.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/utils/prepareEvent.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/utils/prepareEvent.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.weak-map.js */ \"./node_modules/core-js/modules/es.weak-map.js\");\n__webpack_require__(/*! core-js/modules/es.map.js */ \"./node_modules/core-js/modules/es.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.set.js */ \"./node_modules/core-js/modules/es.set.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar constants = __webpack_require__(/*! ../constants.js */ \"./node_modules/@sentry/core/cjs/constants.js\");\nvar scope = __webpack_require__(/*! ../scope.js */ \"./node_modules/@sentry/core/cjs/scope.js\");\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nfunction prepareEvent(options, event, hint, scope$1) {\n  var _options$normalizeDep = options.normalizeDepth,\n    normalizeDepth = _options$normalizeDep === void 0 ? 3 : _options$normalizeDep,\n    _options$normalizeMax = options.normalizeMaxBreadth,\n    normalizeMaxBreadth = _options$normalizeMax === void 0 ? 1000 : _options$normalizeMax;\n  var prepared = _objectSpread(_objectSpread({}, event), {}, {\n    event_id: event.event_id || hint.event_id || utils.uuid4(),\n    timestamp: event.timestamp || utils.dateTimestampInSeconds()\n  });\n  var integrations = hint.integrations || options.integrations.map(function (i) {\n    return i.name;\n  });\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  // Only apply debug metadata to error events.\n  if (event.type === undefined) {\n    applyDebugMetadata(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  var finalScope = scope$1;\n  if (hint.captureContext) {\n    finalScope = scope.Scope.clone(finalScope).update(hint.captureContext);\n  }\n\n  // We prepare the result here with a resolved Event.\n  var result = utils.resolvedSyncPromise(prepared);\n\n  // This should be the last thing called, since we want that\n  // {@link Hub.addEventProcessor} gets the finished prepared event.\n  //\n  // We need to check for the existence of `finalScope.getAttachments`\n  // because `getAttachments` can be undefined if users are using an older version\n  // of `@sentry/core` that does not have the `getAttachments` method.\n  // See: https://github.com/getsentry/sentry-javascript/issues/5229\n  if (finalScope) {\n    // Collect attachments from the hint and scope\n    if (finalScope.getAttachments) {\n      var attachments = [].concat(_toConsumableArray(hint.attachments || []), _toConsumableArray(finalScope.getAttachments()));\n      if (attachments.length) {\n        hint.attachments = attachments;\n      }\n    }\n\n    // In case we have a hub we reassign it.\n    result = finalScope.applyToEvent(prepared, hint);\n  }\n  return result.then(function (evt) {\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event, options) {\n  var environment = options.environment,\n    release = options.release,\n    dist = options.dist,\n    _options$maxValueLeng = options.maxValueLength,\n    maxValueLength = _options$maxValueLeng === void 0 ? 250 : _options$maxValueLeng;\n  if (!('environment' in event)) {\n    event.environment = 'environment' in options ? environment : constants.DEFAULT_ENVIRONMENT;\n  }\n  if (event.release === undefined && release !== undefined) {\n    event.release = release;\n  }\n  if (event.dist === undefined && dist !== undefined) {\n    event.dist = dist;\n  }\n  if (event.message) {\n    event.message = utils.truncate(event.message, maxValueLength);\n  }\n  var exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = utils.truncate(exception.value, maxValueLength);\n  }\n  var request = event.request;\n  if (request && request.url) {\n    request.url = utils.truncate(request.url, maxValueLength);\n  }\n}\nvar debugIdStackParserCache = new WeakMap();\n\n/**\n * Applies debug metadata images to the event in order to apply source maps by looking up their debug ID.\n */\nfunction applyDebugMetadata(event, stackParser) {\n  var debugIdMap = utils.GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return;\n  }\n  var debugIdStackFramesCache;\n  var cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  var filenameDebugIdMap = Object.keys(debugIdMap).reduce(function (acc, debugIdStackTrace) {\n    var parsedStack;\n    var cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n    for (var i = parsedStack.length - 1; i >= 0; i--) {\n      var stackFrame = parsedStack[i];\n      if (stackFrame.filename) {\n        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  // Get a Set of filenames in the stack trace\n  var errorFileNames = new Set();\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(function (exception) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace.frames.forEach(function (frame) {\n        if (frame.filename) {\n          errorFileNames.add(frame.filename);\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  var images = event.debug_meta.images;\n  errorFileNames.forEach(function (filename) {\n    if (filenameDebugIdMap[filename]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: filename,\n        debug_id: filenameDebugIdMap[filename]\n      });\n    }\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event, integrationNames) {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [].concat(_toConsumableArray(event.sdk.integrations || []), _toConsumableArray(integrationNames));\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event, depth, maxBreadth) {\n  if (!event) {\n    return null;\n  }\n  var normalized = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, event), event.breadcrumbs && {\n    breadcrumbs: event.breadcrumbs.map(function (b) {\n      return _objectSpread(_objectSpread({}, b), b.data && {\n        data: utils.normalize(b.data, depth, maxBreadth)\n      });\n    })\n  }), event.user && {\n    user: utils.normalize(event.user, depth, maxBreadth)\n  }), event.contexts && {\n    contexts: utils.normalize(event.contexts, depth, maxBreadth)\n  }), event.extra && {\n    extra: utils.normalize(event.extra, depth, maxBreadth)\n  });\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = utils.normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(function (span) {\n      // We cannot use the spread operator here because `toJSON` on `span` is non-enumerable\n      if (span.data) {\n        span.data = utils.normalize(span.data, depth, maxBreadth);\n      }\n      return span;\n    });\n  }\n  return normalized;\n}\nexports.applyDebugMetadata = applyDebugMetadata;\nexports.prepareEvent = prepareEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/utils/prepareEvent.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/cjs/version.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/core/cjs/version.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar SDK_VERSION = '7.52.1';\nexports.SDK_VERSION = SDK_VERSION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2Nqcy92ZXJzaW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLFdBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvdmVyc2lvbi50cz8yODFlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBTREtfVkVSU0lPTiA9ICc3LjUyLjEnO1xuIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/cjs/version.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/captureconsole.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/captureconsole.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** Send Console API calls as Sentry Events */\nvar CaptureConsole = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @inheritDoc\n   */\n  function CaptureConsole() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, CaptureConsole);\n    CaptureConsole.prototype.__init.call(this);\n    CaptureConsole.prototype.__init2.call(this);\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(CaptureConsole, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = CaptureConsole.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._levels = utils.CONSOLE_LEVELS;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!('console' in utils.GLOBAL_OBJ)) {\n        return;\n      }\n      this._levels.forEach(function (level) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n        if (!(level in utils.GLOBAL_OBJ.console)) {\n          return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        utils.fill(utils.GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            var hub = getCurrentHub();\n            if (hub.getIntegration(CaptureConsole)) {\n              hub.withScope(function (scope) {\n                scope.setLevel(utils.severityLevelFromString(level));\n                scope.setExtra('arguments', args);\n                scope.addEventProcessor(function (event) {\n                  event.logger = 'console';\n                  return event;\n                });\n                var message = utils.safeJoin(args, ' ');\n                if (level === 'assert') {\n                  if (args[0] === false) {\n                    message = \"Assertion failed: \".concat(utils.safeJoin(args.slice(1), ' ') || 'console.assert');\n                    scope.setExtra('arguments', args.slice(1));\n                    hub.captureMessage(message);\n                  }\n                } else if (level === 'error' && args[0] instanceof Error) {\n                  hub.captureException(args[0]);\n                } else {\n                  hub.captureMessage(message);\n                }\n              });\n            }\n\n            // this fails for some browsers. :(\n            if (originalConsoleMethod) {\n              originalConsoleMethod.apply(utils.GLOBAL_OBJ.console, args);\n            }\n          };\n        });\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'CaptureConsole';\n    }\n  }]);\n  return CaptureConsole;\n}();\nCaptureConsole.__initStatic();\nexports.CaptureConsole = CaptureConsole;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvY2pzL2NhcHR1cmVjb25zb2xlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTtBQUFBLElBQ0FBLGNBQUE7RUFBQTs7RUFnQkE7QUFDQTtBQUNBO0VBQ0EsU0FBQUEsZUFBQTtJQUFBLElBQUFDLE9BQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBO0lBQUFHLGVBQUEsT0FBQUwsY0FBQTtJQUFBQSxjQUFBLENBQUFNLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0lBQUFSLGNBQUEsQ0FBQU0sU0FBQSxDQUFBRyxPQUFBLENBQUFELElBQUE7SUFDQSxJQUFBUCxPQUFBLENBQUFTLE1BQUE7TUFDQSxLQUFBQyxPQUFBLEdBQUFWLE9BQUEsQ0FBQVMsTUFBQTtJQUNBO0VBQ0E7O0VBRUE7QUFDQTtBQUNBO0VBRkFFLFlBQUEsQ0FBQVosY0FBQTtJQUFBYSxHQUFBO0lBQUFDLEtBQUE7SUFuQkE7QUFDQTtBQUNBO0lBQ0EsU0FBQVAsT0FBQTtNQUFBLEtBQUFRLElBQUEsR0FBQWYsY0FBQSxDQUFBZ0IsRUFBQTtJQUFBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFMLFFBQUE7TUFBQSxLQUFBRSxPQUFBLEdBQUFNLEtBQUEsQ0FBQUMsY0FBQTtJQUFBO0VBQUE7SUFBQUwsR0FBQTtJQUFBQyxLQUFBLEVBY0EsU0FBQUssVUFBQUMsQ0FBQSxFQUFBQyxhQUFBO01BQ0EsbUJBQUFKLEtBQUEsQ0FBQUssVUFBQTtRQUNBO01BQ0E7TUFFQSxLQUFBWCxPQUFBLENBQUFZLE9BQUEsV0FBQUMsS0FBQTtRQUNBO1FBQ0EsTUFBQUEsS0FBQSxJQUFBUCxLQUFBLENBQUFLLFVBQUEsQ0FBQUcsT0FBQTtVQUNBO1FBQ0E7O1FBRUE7UUFDQVIsS0FBQSxDQUFBUyxJQUFBLENBQUFULEtBQUEsQ0FBQUssVUFBQSxDQUFBRyxPQUFBLEVBQUFELEtBQUEsWUFBQUcscUJBQUE7VUFBQTtZQUFBLFNBQUFDLElBQUEsR0FBQTFCLFNBQUEsQ0FBQUMsTUFBQSxFQUFBMEIsSUFBQSxPQUFBQyxLQUFBLENBQUFGLElBQUEsR0FBQUcsSUFBQSxNQUFBQSxJQUFBLEdBQUFILElBQUEsRUFBQUcsSUFBQTtjQUFBRixJQUFBLENBQUFFLElBQUEsSUFBQTdCLFNBQUEsQ0FBQTZCLElBQUE7WUFBQTtZQUNBLElBQUFDLEdBQUEsR0FBQVgsYUFBQTtZQUVBLElBQUFXLEdBQUEsQ0FBQUMsY0FBQSxDQUFBakMsY0FBQTtjQUNBZ0MsR0FBQSxDQUFBRSxTQUFBLFdBQUFDLEtBQUE7Z0JBQ0FBLEtBQUEsQ0FBQUMsUUFBQSxDQUFBbkIsS0FBQSxDQUFBb0IsdUJBQUEsQ0FBQWIsS0FBQTtnQkFDQVcsS0FBQSxDQUFBRyxRQUFBLGNBQUFULElBQUE7Z0JBQ0FNLEtBQUEsQ0FBQUksaUJBQUEsV0FBQUMsS0FBQTtrQkFDQUEsS0FBQSxDQUFBQyxNQUFBO2tCQUNBLE9BQUFELEtBQUE7Z0JBQ0E7Z0JBRUEsSUFBQUUsT0FBQSxHQUFBekIsS0FBQSxDQUFBMEIsUUFBQSxDQUFBZCxJQUFBO2dCQUNBLElBQUFMLEtBQUE7a0JBQ0EsSUFBQUssSUFBQTtvQkFDQWEsT0FBQSx3QkFBQUUsTUFBQSxDQUFBM0IsS0FBQSxDQUFBMEIsUUFBQSxDQUFBZCxJQUFBLENBQUFnQixLQUFBO29CQUNBVixLQUFBLENBQUFHLFFBQUEsY0FBQVQsSUFBQSxDQUFBZ0IsS0FBQTtvQkFDQWIsR0FBQSxDQUFBYyxjQUFBLENBQUFKLE9BQUE7a0JBQ0E7Z0JBQ0EsV0FBQWxCLEtBQUEsZ0JBQUFLLElBQUEsZUFBQWtCLEtBQUE7a0JBQ0FmLEdBQUEsQ0FBQWdCLGdCQUFBLENBQUFuQixJQUFBO2dCQUNBO2tCQUNBRyxHQUFBLENBQUFjLGNBQUEsQ0FBQUosT0FBQTtnQkFDQTtjQUNBO1lBQ0E7O1lBRUE7WUFDQSxJQUFBZixxQkFBQTtjQUNBQSxxQkFBQSxDQUFBc0IsS0FBQSxDQUFBaEMsS0FBQSxDQUFBSyxVQUFBLENBQUFHLE9BQUEsRUFBQUksSUFBQTtZQUNBO1VBQ0E7UUFBQTtNQUNBO0lBQ0E7RUFBQTtJQUFBaEIsR0FBQTtJQUFBQyxLQUFBO0lBeEVBO0FBQ0E7QUFDQTtJQUNBLFNBQUFvQyxhQUFBO01BQUEsS0FBQWxDLEVBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQWhCLGNBQUE7QUFBQTtBQXNFQUEsY0FBQSxDQUFBa0QsWUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9jYXB0dXJlY29uc29sZS50cz9kMWZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IENPTlNPTEVfTEVWRUxTLCBmaWxsLCBHTE9CQUxfT0JKLCBzYWZlSm9pbiwgc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuLyoqIFNlbmQgQ29uc29sZSBBUEkgY2FsbHMgYXMgU2VudHJ5IEV2ZW50cyAqL1xuZXhwb3J0IGNsYXNzIENhcHR1cmVDb25zb2xlIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdDYXB0dXJlQ29uc29sZSc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gQ2FwdHVyZUNvbnNvbGUuaWQ7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9sZXZlbHM6IHJlYWRvbmx5IHN0cmluZ1tdID0gQ09OU09MRV9MRVZFTFM7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogeyBsZXZlbHM/OiBzdHJpbmdbXSB9ID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5sZXZlbHMpIHtcbiAgICAgIHRoaXMuX2xldmVscyA9IG9wdGlvbnMubGV2ZWxzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHNldHVwT25jZShfOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBpZiAoISgnY29uc29sZScgaW4gR0xPQkFMX09CSikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sZXZlbHMuZm9yRWFjaCgobGV2ZWw6IHN0cmluZykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgaWYgKCEobGV2ZWwgaW4gKEdMT0JBTF9PQkogYXMgYW55KS5jb25zb2xlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGZpbGwoKEdMT0JBTF9PQkogYXMgYW55KS5jb25zb2xlLCBsZXZlbCwgKG9yaWdpbmFsQ29uc29sZU1ldGhvZDogKCkgPT4gYW55KSA9PiAoLi4uYXJnczogYW55W10pOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuXG4gICAgICAgIGlmIChodWIuZ2V0SW50ZWdyYXRpb24oQ2FwdHVyZUNvbnNvbGUpKSB7XG4gICAgICAgICAgaHViLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICAgICAgICBzY29wZS5zZXRMZXZlbChzZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCkpO1xuICAgICAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ2FyZ3VtZW50cycsIGFyZ3MpO1xuICAgICAgICAgICAgc2NvcGUuYWRkRXZlbnRQcm9jZXNzb3IoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBldmVudC5sb2dnZXIgPSAnY29uc29sZSc7XG4gICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHNhZmVKb2luKGFyZ3MsICcgJyk7XG4gICAgICAgICAgICBpZiAobGV2ZWwgPT09ICdhc3NlcnQnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdzWzBdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQXNzZXJ0aW9uIGZhaWxlZDogJHtzYWZlSm9pbihhcmdzLnNsaWNlKDEpLCAnICcpIHx8ICdjb25zb2xlLmFzc2VydCd9YDtcbiAgICAgICAgICAgICAgICBzY29wZS5zZXRFeHRyYSgnYXJndW1lbnRzJywgYXJncy5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgaHViLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxldmVsID09PSAnZXJyb3InICYmIGFyZ3NbMF0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICBodWIuY2FwdHVyZUV4Y2VwdGlvbihhcmdzWzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGh1Yi5jYXB0dXJlTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgZmFpbHMgZm9yIHNvbWUgYnJvd3NlcnMuIDooXG4gICAgICAgIGlmIChvcmlnaW5hbENvbnNvbGVNZXRob2QpIHtcbiAgICAgICAgICBvcmlnaW5hbENvbnNvbGVNZXRob2QuYXBwbHkoR0xPQkFMX09CSi5jb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJDYXB0dXJlQ29uc29sZSIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJwcm90b3R5cGUiLCJfX2luaXQiLCJjYWxsIiwiX19pbml0MiIsImxldmVscyIsIl9sZXZlbHMiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsIm5hbWUiLCJpZCIsInV0aWxzIiwiQ09OU09MRV9MRVZFTFMiLCJzZXR1cE9uY2UiLCJfIiwiZ2V0Q3VycmVudEh1YiIsIkdMT0JBTF9PQkoiLCJmb3JFYWNoIiwibGV2ZWwiLCJjb25zb2xlIiwiZmlsbCIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZCIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiaHViIiwiZ2V0SW50ZWdyYXRpb24iLCJ3aXRoU2NvcGUiLCJzY29wZSIsInNldExldmVsIiwic2V2ZXJpdHlMZXZlbEZyb21TdHJpbmciLCJzZXRFeHRyYSIsImFkZEV2ZW50UHJvY2Vzc29yIiwiZXZlbnQiLCJsb2dnZXIiLCJtZXNzYWdlIiwic2FmZUpvaW4iLCJjb25jYXQiLCJzbGljZSIsImNhcHR1cmVNZXNzYWdlIiwiRXJyb3IiLCJjYXB0dXJlRXhjZXB0aW9uIiwiYXBwbHkiLCJfX2luaXRTdGF0aWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/captureconsole.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/debug.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/debug.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production\n */\nvar Debug = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Debug(options) {\n    _classCallCheck(this, Debug);\n    Debug.prototype.__init.call(this);\n    this._options = _objectSpread({\n      debugger: false,\n      stringify: false\n    }, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Debug, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Debug.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      addGlobalEventProcessor(function (event, hint) {\n        var self = getCurrentHub().getIntegration(Debug);\n        if (self) {\n          if (self._options.debugger) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n          }\n\n          /* eslint-disable no-console */\n          utils.consoleSandbox(function () {\n            if (self._options.stringify) {\n              console.log(JSON.stringify(event, null, 2));\n              if (Object.keys(hint).length) {\n                console.log(JSON.stringify(hint, null, 2));\n              }\n            } else {\n              console.log(event);\n              if (Object.keys(hint).length) {\n                console.log(hint);\n              }\n            }\n          });\n          /* eslint-enable no-console */\n        }\n\n        return event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Debug';\n    }\n  }]);\n  return Debug;\n}();\nDebug.__initStatic();\nexports.Debug = Debug;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvY2pzL2RlYnVnLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBSEEsSUFJQUEsS0FBQTtFQUFBOztFQWFBLFNBQUFBLE1BQUFDLE9BQUE7SUFBQUMsZUFBQSxPQUFBRixLQUFBO0lBQUFBLEtBQUEsQ0FBQUcsU0FBQSxDQUFBQyxNQUFBLENBQUFDLElBQUE7SUFDQSxLQUFBQyxRQUFBLEdBQUFDLGFBQUE7TUFDQUMsUUFBQTtNQUNBQyxTQUFBO0lBQUEsR0FDQVIsT0FBQSxDQUNBO0VBQ0E7O0VBRUE7QUFDQTtBQUNBO0VBRkFTLFlBQUEsQ0FBQVYsS0FBQTtJQUFBVyxHQUFBO0lBQUFDLEtBQUE7SUFmQTtBQUNBO0FBQ0E7SUFDQSxTQUFBUixPQUFBO01BQUEsS0FBQVMsSUFBQSxHQUFBYixLQUFBLENBQUFjLEVBQUE7SUFBQTtFQUFBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQWVBLFNBQUFHLFVBQUFDLHVCQUFBLEVBQUFDLGFBQUE7TUFDQUQsdUJBQUEsV0FBQUUsS0FBQSxFQUFBQyxJQUFBO1FBQ0EsSUFBQUMsSUFBQSxHQUFBSCxhQUFBLEdBQUFJLGNBQUEsQ0FBQXJCLEtBQUE7UUFDQSxJQUFBb0IsSUFBQTtVQUNBLElBQUFBLElBQUEsQ0FBQWQsUUFBQSxDQUFBRSxRQUFBO1lBQ0E7WUFDQTtVQUNBOztVQUVBO1VBQ0FjLEtBQUEsQ0FBQUMsY0FBQTtZQUNBLElBQUFILElBQUEsQ0FBQWQsUUFBQSxDQUFBRyxTQUFBO2NBQ0FlLE9BQUEsQ0FBQUMsR0FBQSxDQUFBQyxJQUFBLENBQUFqQixTQUFBLENBQUFTLEtBQUE7Y0FDQSxJQUFBUyxNQUFBLENBQUFDLElBQUEsQ0FBQVQsSUFBQSxFQUFBVSxNQUFBO2dCQUNBTCxPQUFBLENBQUFDLEdBQUEsQ0FBQUMsSUFBQSxDQUFBakIsU0FBQSxDQUFBVSxJQUFBO2NBQ0E7WUFDQTtjQUNBSyxPQUFBLENBQUFDLEdBQUEsQ0FBQVAsS0FBQTtjQUNBLElBQUFTLE1BQUEsQ0FBQUMsSUFBQSxDQUFBVCxJQUFBLEVBQUFVLE1BQUE7Z0JBQ0FMLE9BQUEsQ0FBQUMsR0FBQSxDQUFBTixJQUFBO2NBQ0E7WUFDQTtVQUNBO1VBQ0E7UUFDQTs7UUFDQSxPQUFBRCxLQUFBO01BQ0E7SUFDQTtFQUFBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQTtJQWxEQTtBQUNBO0FBQ0E7SUFDQSxTQUFBa0IsYUFBQTtNQUFBLEtBQUFoQixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFkLEtBQUE7QUFBQTtBQWdEQUEsS0FBQSxDQUFBOEIsWUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9kZWJ1Zy50cz81YTYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXZlbnQsIEV2ZW50SGludCwgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94IH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmludGVyZmFjZSBEZWJ1Z09wdGlvbnMge1xuICAvKiogQ29udHJvbHMgd2hldGhlciBjb25zb2xlIG91dHB1dCBjcmVhdGVkIGJ5IHRoaXMgaW50ZWdyYXRpb24gc2hvdWxkIGJlIHN0cmluZ2lmaWVkLiBEZWZhdWx0OiBgZmFsc2VgICovXG4gIHN0cmluZ2lmeT86IGJvb2xlYW47XG4gIC8qKiBDb250cm9scyB3aGV0aGVyIGEgZGVidWdnZXIgc2hvdWxkIGJlIGxhdW5jaGVkIGJlZm9yZSBhbiBldmVudCBpcyBzZW50LiBEZWZhdWx0OiBgZmFsc2VgICovXG4gIGRlYnVnZ2VyPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBJbnRlZ3JhdGlvbiB0byBkZWJ1ZyBzZW50IFNlbnRyeSBldmVudHMuXG4gKiBUaGlzIGludGVncmF0aW9uIHNob3VsZCBub3QgYmUgdXNlZCBpbiBwcm9kdWN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWJ1ZyBpbXBsZW1lbnRzIEludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlkOiBzdHJpbmcgPSAnRGVidWcnO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIG5hbWU6IHN0cmluZyA9IERlYnVnLmlkO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnM6IERlYnVnT3B0aW9ucztcblxuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9ucz86IERlYnVnT3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICBkZWJ1Z2dlcjogZmFsc2UsXG4gICAgICBzdHJpbmdpZnk6IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcigoZXZlbnQ6IEV2ZW50LCBoaW50OiBFdmVudEhpbnQpID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oRGVidWcpO1xuICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgaWYgKHNlbGYuX29wdGlvbnMuZGVidWdnZXIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAgIGlmIChzZWxmLl9vcHRpb25zLnN0cmluZ2lmeSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhoaW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoaGludCwgbnVsbCwgMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoaGludCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGhpbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiRGVidWciLCJvcHRpb25zIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9vcHRpb25zIiwiX29iamVjdFNwcmVhZCIsImRlYnVnZ2VyIiwic3RyaW5naWZ5IiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJuYW1lIiwiaWQiLCJzZXR1cE9uY2UiLCJhZGRHbG9iYWxFdmVudFByb2Nlc3NvciIsImdldEN1cnJlbnRIdWIiLCJldmVudCIsImhpbnQiLCJzZWxmIiwiZ2V0SW50ZWdyYXRpb24iLCJ1dGlscyIsImNvbnNvbGVTYW5kYm94IiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiX19pbml0U3RhdGljIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/debug.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/dedupe.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/dedupe.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** Deduplication filter */\nvar Dedupe = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Dedupe() {\n    _classCallCheck(this, Dedupe);\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(Dedupe, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Dedupe.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcessor = function eventProcessor(currentEvent) {\n        // We want to ignore any non-error type events, e.g. transactions or replays\n        // These should never be deduped, and also not be compared against as _previousEvent.\n        if (currentEvent.type) {\n          return currentEvent;\n        }\n        var self = getCurrentHub().getIntegration(Dedupe);\n        if (self) {\n          // Juuust in case something goes wrong\n          try {\n            if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Event dropped due to being a duplicate of previously captured event.');\n              return null;\n            }\n          } catch (_oO) {\n            return self._previousEvent = currentEvent;\n          }\n          return self._previousEvent = currentEvent;\n        }\n        return currentEvent;\n      };\n      eventProcessor.id = this.name;\n      addGlobalEventProcessor(eventProcessor);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Dedupe';\n    }\n  }]);\n  return Dedupe;\n}();\nDedupe.__initStatic();\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n  var currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n  var previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexports.Dedupe = Dedupe;\nexports._shouldDropEvent = _shouldDropEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/dedupe.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/extraerrordata.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/extraerrordata.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.url.to-json.js */ \"./node_modules/core-js/modules/web.url.to-json.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** JSDoc */\n\n/** Patch toString calls to return proper name for wrapped functions */\nvar ExtraErrorData = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** JSDoc */\n\n  /**\n   * @inheritDoc\n   */\n  function ExtraErrorData(options) {\n    _classCallCheck(this, ExtraErrorData);\n    ExtraErrorData.prototype.__init.call(this);\n    this._options = _objectSpread({\n      depth: 3\n    }, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(ExtraErrorData, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = ExtraErrorData.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      addGlobalEventProcessor(function (event, hint) {\n        var self = getCurrentHub().getIntegration(ExtraErrorData);\n        if (!self) {\n          return event;\n        }\n        return self.enhanceEventWithErrorData(event, hint);\n      });\n    }\n\n    /**\n     * Attaches extracted information from the Error object to extra field in the Event\n     */\n  }, {\n    key: \"enhanceEventWithErrorData\",\n    value: function enhanceEventWithErrorData(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!hint.originalException || !utils.isError(hint.originalException)) {\n        return event;\n      }\n      var exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n      var errorData = this._extractErrorData(hint.originalException);\n      if (errorData) {\n        var contexts = _objectSpread({}, event.contexts);\n        var normalizedErrorData = utils.normalize(errorData, this._options.depth);\n        if (utils.isPlainObject(normalizedErrorData)) {\n          // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n          // potentially truncate the data we just already normalized, with a certain depth setting.\n          utils.addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n          contexts[exceptionName] = normalizedErrorData;\n        }\n        return _objectSpread(_objectSpread({}, event), {}, {\n          contexts: contexts\n        });\n      }\n      return event;\n    }\n\n    /**\n     * Extract extra information from the Error object\n     */\n  }, {\n    key: \"_extractErrorData\",\n    value: function _extractErrorData(error) {\n      // We are trying to enhance already existing event, so no harm done if it won't succeed\n      try {\n        var nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n        var extraErrorInfo = {};\n\n        // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n        for (var _i = 0, _Object$keys = Object.keys(error); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          if (nativeKeys.indexOf(key) !== -1) {\n            continue;\n          }\n          var value = error[key];\n          extraErrorInfo[key] = utils.isError(value) ? value.toString() : value;\n        }\n\n        // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n        if (typeof error.toJSON === 'function') {\n          var serializedError = error.toJSON();\n          for (var _i2 = 0, _Object$keys2 = Object.keys(serializedError); _i2 < _Object$keys2.length; _i2++) {\n            var _key = _Object$keys2[_i2];\n            var _value = serializedError[_key];\n            extraErrorInfo[_key] = utils.isError(_value) ? _value.toString() : _value;\n          }\n        }\n        return extraErrorInfo;\n      } catch (oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('Unable to extract extra data from the Error object:', oO);\n      }\n      return null;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'ExtraErrorData';\n    }\n  }]);\n  return ExtraErrorData;\n}();\nExtraErrorData.__initStatic();\nexports.ExtraErrorData = ExtraErrorData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvY2pzL2V4dHJhZXJyb3JkYXRhLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBS0E7QUFBQSxJQUNBQSxjQUFBO0VBQUE7O0VBV0E7O0VBR0E7QUFDQTtBQUNBO0VBQ0EsU0FBQUEsZUFBQUMsT0FBQTtJQUFBQyxlQUFBLE9BQUFGLGNBQUE7SUFBQUEsY0FBQSxDQUFBRyxTQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQTtJQUNBLEtBQUFDLFFBQUEsR0FBQUMsYUFBQTtNQUNBQyxLQUFBO0lBQUEsR0FDQVAsT0FBQSxDQUNBO0VBQ0E7O0VBRUE7QUFDQTtBQUNBO0VBRkFRLFlBQUEsQ0FBQVQsY0FBQTtJQUFBVSxHQUFBO0lBQUFDLEtBQUE7SUFsQkE7QUFDQTtBQUNBO0lBQ0EsU0FBQVAsT0FBQTtNQUFBLEtBQUFRLElBQUEsR0FBQVosY0FBQSxDQUFBYSxFQUFBO0lBQUE7RUFBQTtJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUFrQkEsU0FBQUcsVUFBQUMsdUJBQUEsRUFBQUMsYUFBQTtNQUNBRCx1QkFBQSxXQUFBRSxLQUFBLEVBQUFDLElBQUE7UUFDQSxJQUFBQyxJQUFBLEdBQUFILGFBQUEsR0FBQUksY0FBQSxDQUFBcEIsY0FBQTtRQUNBLEtBQUFtQixJQUFBO1VBQ0EsT0FBQUYsS0FBQTtRQUNBO1FBQ0EsT0FBQUUsSUFBQSxDQUFBRSx5QkFBQSxDQUFBSixLQUFBLEVBQUFDLElBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFSLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFVLDBCQUFBSixLQUFBO01BQUEsSUFBQUMsSUFBQSxHQUFBSSxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUE7TUFDQSxLQUFBSixJQUFBLENBQUFPLGlCQUFBLEtBQUFDLEtBQUEsQ0FBQUMsT0FBQSxDQUFBVCxJQUFBLENBQUFPLGlCQUFBO1FBQ0EsT0FBQVIsS0FBQTtNQUNBO01BQ0EsSUFBQVcsYUFBQSxHQUFBVixJQUFBLENBQUFPLGlCQUFBLENBQUFiLElBQUEsSUFBQU0sSUFBQSxDQUFBTyxpQkFBQSxDQUFBSSxXQUFBLENBQUFqQixJQUFBO01BRUEsSUFBQWtCLFNBQUEsUUFBQUMsaUJBQUEsQ0FBQWIsSUFBQSxDQUFBTyxpQkFBQTtNQUVBLElBQUFLLFNBQUE7UUFDQSxJQUFBRSxRQUFBLEdBQUF6QixhQUFBLEtBQ0FVLEtBQUEsQ0FBQWUsUUFBQSxDQUNBO1FBRUEsSUFBQUMsbUJBQUEsR0FBQVAsS0FBQSxDQUFBUSxTQUFBLENBQUFKLFNBQUEsT0FBQXhCLFFBQUEsQ0FBQUUsS0FBQTtRQUVBLElBQUFrQixLQUFBLENBQUFTLGFBQUEsQ0FBQUYsbUJBQUE7VUFDQTtVQUNBO1VBQ0FQLEtBQUEsQ0FBQVUsd0JBQUEsQ0FBQUgsbUJBQUE7VUFDQUQsUUFBQSxDQUFBSixhQUFBLElBQUFLLG1CQUFBO1FBQ0E7UUFFQSxPQUFBMUIsYUFBQSxDQUFBQSxhQUFBLEtBQ0FVLEtBQUE7VUFDQWUsUUFBQSxFQUFBQTtRQUFBO01BRUE7TUFFQSxPQUFBZixLQUFBO0lBQ0E7O0lBRUE7QUFDQTtBQUNBO0VBRkE7SUFBQVAsR0FBQTtJQUFBQyxLQUFBLEVBR0EsU0FBQW9CLGtCQUFBTSxLQUFBO01BQ0E7TUFDQTtRQUNBLElBQUFDLFVBQUEsSUFDQSxRQUNBLFdBQ0EsU0FDQSxRQUNBLFVBQ0EsWUFDQSxjQUNBLGdCQUNBLFNBQ0E7UUFFQSxJQUFBQyxjQUFBOztRQUVBO1FBQ0EsU0FBQUMsRUFBQSxNQUFBQyxZQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBTixLQUFBLEdBQUFHLEVBQUEsR0FBQUMsWUFBQSxDQUFBbEIsTUFBQSxFQUFBaUIsRUFBQTtVQUFBLElBQUE5QixHQUFBLEdBQUErQixZQUFBLENBQUFELEVBQUE7VUFDQSxJQUFBRixVQUFBLENBQUFNLE9BQUEsQ0FBQWxDLEdBQUE7WUFDQTtVQUNBO1VBQ0EsSUFBQUMsS0FBQSxHQUFBMEIsS0FBQSxDQUFBM0IsR0FBQTtVQUNBNkIsY0FBQSxDQUFBN0IsR0FBQSxJQUFBZ0IsS0FBQSxDQUFBQyxPQUFBLENBQUFoQixLQUFBLElBQUFBLEtBQUEsQ0FBQWtDLFFBQUEsS0FBQWxDLEtBQUE7UUFDQTs7UUFFQTtRQUNBLFdBQUEwQixLQUFBLENBQUFTLE1BQUE7VUFDQSxJQUFBQyxlQUFBLEdBQUFWLEtBQUEsQ0FBQVMsTUFBQTtVQUVBLFNBQUFFLEdBQUEsTUFBQUMsYUFBQSxHQUFBUCxNQUFBLENBQUFDLElBQUEsQ0FBQUksZUFBQSxHQUFBQyxHQUFBLEdBQUFDLGFBQUEsQ0FBQTFCLE1BQUEsRUFBQXlCLEdBQUE7WUFBQSxJQUFBdEMsSUFBQSxHQUFBdUMsYUFBQSxDQUFBRCxHQUFBO1lBQ0EsSUFBQXJDLE1BQUEsR0FBQW9DLGVBQUEsQ0FBQXJDLElBQUE7WUFDQTZCLGNBQUEsQ0FBQTdCLElBQUEsSUFBQWdCLEtBQUEsQ0FBQUMsT0FBQSxDQUFBaEIsTUFBQSxJQUFBQSxNQUFBLENBQUFrQyxRQUFBLEtBQUFsQyxNQUFBO1VBQ0E7UUFDQTtRQUVBLE9BQUE0QixjQUFBO01BQ0EsU0FBQVcsRUFBQTtRQUNBLFFBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUFBekIsS0FBQSxDQUFBMEIsTUFBQSxDQUFBZixLQUFBLHdEQUFBYSxFQUFBO01BQ0E7TUFFQTtJQUNBO0VBQUE7SUFBQXhDLEdBQUE7SUFBQUMsS0FBQTtJQW5IQTtBQUNBO0FBQ0E7SUFDQSxTQUFBMEMsYUFBQTtNQUFBLEtBQUF4QyxFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFiLGNBQUE7QUFBQTtBQWlIQUEsY0FBQSxDQUFBcUQsWUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9leHRyYWVycm9yZGF0YS50cz9iYWVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29udGV4dHMsIEV2ZW50LCBFdmVudEhpbnQsIEV2ZW50UHJvY2Vzc29yLCBFeHRlbmRlZEVycm9yLCBIdWIsIEludGVncmF0aW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBhZGROb25FbnVtZXJhYmxlUHJvcGVydHksIGlzRXJyb3IsIGlzUGxhaW5PYmplY3QsIGxvZ2dlciwgbm9ybWFsaXplIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbi8qKiBKU0RvYyAqL1xuaW50ZXJmYWNlIEV4dHJhRXJyb3JEYXRhT3B0aW9ucyB7XG4gIGRlcHRoPzogbnVtYmVyO1xufVxuXG4vKiogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucyAqL1xuZXhwb3J0IGNsYXNzIEV4dHJhRXJyb3JEYXRhIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdFeHRyYUVycm9yRGF0YSc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gRXh0cmFFcnJvckRhdGEuaWQ7XG5cbiAgLyoqIEpTRG9jICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX29wdGlvbnM6IEV4dHJhRXJyb3JEYXRhT3B0aW9ucztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zPzogRXh0cmFFcnJvckRhdGFPcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgIGRlcHRoOiAzLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcigoZXZlbnQ6IEV2ZW50LCBoaW50OiBFdmVudEhpbnQpID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oRXh0cmFFcnJvckRhdGEpO1xuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmLmVuaGFuY2VFdmVudFdpdGhFcnJvckRhdGEoZXZlbnQsIGhpbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGV4dHJhY3RlZCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBFcnJvciBvYmplY3QgdG8gZXh0cmEgZmllbGQgaW4gdGhlIEV2ZW50XG4gICAqL1xuICBwdWJsaWMgZW5oYW5jZUV2ZW50V2l0aEVycm9yRGF0YShldmVudDogRXZlbnQsIGhpbnQ6IEV2ZW50SGludCA9IHt9KTogRXZlbnQge1xuICAgIGlmICghaGludC5vcmlnaW5hbEV4Y2VwdGlvbiB8fCAhaXNFcnJvcihoaW50Lm9yaWdpbmFsRXhjZXB0aW9uKSkge1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgICBjb25zdCBleGNlcHRpb25OYW1lID0gKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gYXMgRXh0ZW5kZWRFcnJvcikubmFtZSB8fCBoaW50Lm9yaWdpbmFsRXhjZXB0aW9uLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBjb25zdCBlcnJvckRhdGEgPSB0aGlzLl9leHRyYWN0RXJyb3JEYXRhKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gYXMgRXh0ZW5kZWRFcnJvcik7XG5cbiAgICBpZiAoZXJyb3JEYXRhKSB7XG4gICAgICBjb25zdCBjb250ZXh0czogQ29udGV4dHMgPSB7XG4gICAgICAgIC4uLmV2ZW50LmNvbnRleHRzLFxuICAgICAgfTtcblxuICAgICAgY29uc3Qgbm9ybWFsaXplZEVycm9yRGF0YSA9IG5vcm1hbGl6ZShlcnJvckRhdGEsIHRoaXMuX29wdGlvbnMuZGVwdGgpO1xuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChub3JtYWxpemVkRXJyb3JEYXRhKSkge1xuICAgICAgICAvLyBXZSBtYXJrIHRoZSBlcnJvciBkYXRhIGFzIFwiYWxyZWFkeSBub3JtYWxpemVkXCIgaGVyZSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IG90aGVyIG5vcm1hbGl6YXRpb24gcHJvY2VkdXJlcyB0b1xuICAgICAgICAvLyBwb3RlbnRpYWxseSB0cnVuY2F0ZSB0aGUgZGF0YSB3ZSBqdXN0IGFscmVhZHkgbm9ybWFsaXplZCwgd2l0aCBhIGNlcnRhaW4gZGVwdGggc2V0dGluZy5cbiAgICAgICAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KG5vcm1hbGl6ZWRFcnJvckRhdGEsICdfX3NlbnRyeV9za2lwX25vcm1hbGl6YXRpb25fXycsIHRydWUpO1xuICAgICAgICBjb250ZXh0c1tleGNlcHRpb25OYW1lXSA9IG5vcm1hbGl6ZWRFcnJvckRhdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBjb250ZXh0cyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3QgZXh0cmEgaW5mb3JtYXRpb24gZnJvbSB0aGUgRXJyb3Igb2JqZWN0XG4gICAqL1xuICBwcml2YXRlIF9leHRyYWN0RXJyb3JEYXRhKGVycm9yOiBFeHRlbmRlZEVycm9yKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsIHtcbiAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGVuaGFuY2UgYWxyZWFkeSBleGlzdGluZyBldmVudCwgc28gbm8gaGFybSBkb25lIGlmIGl0IHdvbid0IHN1Y2NlZWRcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmF0aXZlS2V5cyA9IFtcbiAgICAgICAgJ25hbWUnLFxuICAgICAgICAnbWVzc2FnZScsXG4gICAgICAgICdzdGFjaycsXG4gICAgICAgICdsaW5lJyxcbiAgICAgICAgJ2NvbHVtbicsXG4gICAgICAgICdmaWxlTmFtZScsXG4gICAgICAgICdsaW5lTnVtYmVyJyxcbiAgICAgICAgJ2NvbHVtbk51bWJlcicsXG4gICAgICAgICd0b0pTT04nLFxuICAgICAgXTtcblxuICAgICAgY29uc3QgZXh0cmFFcnJvckluZm86IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XG5cbiAgICAgIC8vIFdlIHdhbnQgb25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMsIHRodXMgYGdldE93blByb3BlcnR5TmFtZXNgIGlzIHJlZHVuZGFudCBoZXJlLCBhcyB3ZSBmaWx0ZXIga2V5cyBhbnl3YXkuXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhlcnJvcikpIHtcbiAgICAgICAgaWYgKG5hdGl2ZUtleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXJyb3Jba2V5XTtcbiAgICAgICAgZXh0cmFFcnJvckluZm9ba2V5XSA9IGlzRXJyb3IodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBzb21lb25lIGF0dGFjaGVkIGB0b0pTT05gIG1ldGhvZCB0byBncmFiIGV2ZW4gbW9yZSBwcm9wZXJ0aWVzIChlZy4gYXhpb3MgaXMgZG9pbmcgdGhhdClcbiAgICAgIGlmICh0eXBlb2YgZXJyb3IudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRFcnJvciA9IGVycm9yLnRvSlNPTigpIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNlcmlhbGl6ZWRFcnJvcikpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNlcmlhbGl6ZWRFcnJvcltrZXldO1xuICAgICAgICAgIGV4dHJhRXJyb3JJbmZvW2tleV0gPSBpc0Vycm9yKHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXh0cmFFcnJvckluZm87XG4gICAgfSBjYXRjaCAob08pIHtcbiAgICAgIF9fREVCVUdfQlVJTERfXyAmJiBsb2dnZXIuZXJyb3IoJ1VuYWJsZSB0byBleHRyYWN0IGV4dHJhIGRhdGEgZnJvbSB0aGUgRXJyb3Igb2JqZWN0OicsIG9PKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkV4dHJhRXJyb3JEYXRhIiwib3B0aW9ucyIsIl9jbGFzc0NhbGxDaGVjayIsInByb3RvdHlwZSIsIl9faW5pdCIsImNhbGwiLCJfb3B0aW9ucyIsIl9vYmplY3RTcHJlYWQiLCJkZXB0aCIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwibmFtZSIsImlkIiwic2V0dXBPbmNlIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJnZXRDdXJyZW50SHViIiwiZXZlbnQiLCJoaW50Iiwic2VsZiIsImdldEludGVncmF0aW9uIiwiZW5oYW5jZUV2ZW50V2l0aEVycm9yRGF0YSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm9yaWdpbmFsRXhjZXB0aW9uIiwidXRpbHMiLCJpc0Vycm9yIiwiZXhjZXB0aW9uTmFtZSIsImNvbnN0cnVjdG9yIiwiZXJyb3JEYXRhIiwiX2V4dHJhY3RFcnJvckRhdGEiLCJjb250ZXh0cyIsIm5vcm1hbGl6ZWRFcnJvckRhdGEiLCJub3JtYWxpemUiLCJpc1BsYWluT2JqZWN0IiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZXJyb3IiLCJuYXRpdmVLZXlzIiwiZXh0cmFFcnJvckluZm8iLCJfaSIsIl9PYmplY3Qka2V5cyIsIk9iamVjdCIsImtleXMiLCJpbmRleE9mIiwidG9TdHJpbmciLCJ0b0pTT04iLCJzZXJpYWxpemVkRXJyb3IiLCJfaTIiLCJfT2JqZWN0JGtleXMyIiwib08iLCJfX1NFTlRSWV9ERUJVR19fIiwibG9nZ2VyIiwiX19pbml0U3RhdGljIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/extraerrordata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/httpclient.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/httpclient.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** HTTPClient integration creates events for failed client side HTTP requests. */\nvar HttpClient = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Returns current hub.\n   */\n\n  /**\n   * @inheritDoc\n   *\n   * @param options\n   */\n  function HttpClient(options) {\n    _classCallCheck(this, HttpClient);\n    HttpClient.prototype.__init.call(this);\n    this._options = _objectSpread({\n      failedRequestStatusCodes: [[500, 599]],\n      failedRequestTargets: [/.*/]\n    }, options);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @param options\n   */\n  _createClass(HttpClient, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = HttpClient.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      this._getCurrentHub = getCurrentHub;\n      this._wrapFetch();\n      this._wrapXHR();\n    }\n\n    /**\n     * Interceptor function for fetch requests\n     *\n     * @param requestInfo The Fetch API request info\n     * @param response The Fetch API response\n     * @param requestInit The request init object\n     */\n  }, {\n    key: \"_fetchResponseHandler\",\n    value: function _fetchResponseHandler(requestInfo, response, requestInit) {\n      var _this = this;\n      if (this._getCurrentHub && this._shouldCaptureResponse(response.status, response.url)) {\n        var request = _getRequest(requestInfo, requestInit);\n        var hub = this._getCurrentHub();\n        var requestHeaders, responseHeaders, requestCookies, responseCookies;\n        if (hub.shouldSendDefaultPii()) {\n          var _map = [{\n            cookieHeader: 'Cookie',\n            obj: request\n          }, {\n            cookieHeader: 'Set-Cookie',\n            obj: response\n          }].map(function (_ref) {\n            var cookieHeader = _ref.cookieHeader,\n              obj = _ref.obj;\n            var headers = _this._extractFetchHeaders(obj.headers);\n            var cookies;\n            try {\n              var cookieString = headers[cookieHeader] || headers[cookieHeader.toLowerCase()] || undefined;\n              if (cookieString) {\n                cookies = _this._parseCookieString(cookieString);\n              }\n            } catch (e) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"Could not extract cookies from header \".concat(cookieHeader));\n            }\n            return {\n              headers: headers,\n              cookies: cookies\n            };\n          });\n          var _map2 = _slicedToArray(_map, 2);\n          var _map2$ = _map2[0];\n          requestHeaders = _map2$.headers;\n          requestCookies = _map2$.cookies;\n          var _map2$2 = _map2[1];\n          responseHeaders = _map2$2.headers;\n          responseCookies = _map2$2.cookies;\n        }\n        var event = this._createEvent({\n          url: request.url,\n          method: request.method,\n          status: response.status,\n          requestHeaders: requestHeaders,\n          responseHeaders: responseHeaders,\n          requestCookies: requestCookies,\n          responseCookies: responseCookies\n        });\n        hub.captureEvent(event);\n      }\n    }\n\n    /**\n     * Interceptor function for XHR requests\n     *\n     * @param xhr The XHR request\n     * @param method The HTTP method\n     * @param headers The HTTP headers\n     */\n  }, {\n    key: \"_xhrResponseHandler\",\n    value: function _xhrResponseHandler(xhr, method, headers) {\n      if (this._getCurrentHub && this._shouldCaptureResponse(xhr.status, xhr.responseURL)) {\n        var requestHeaders, responseCookies, responseHeaders;\n        var hub = this._getCurrentHub();\n        if (hub.shouldSendDefaultPii()) {\n          try {\n            var cookieString = xhr.getResponseHeader('Set-Cookie') || xhr.getResponseHeader('set-cookie') || undefined;\n            if (cookieString) {\n              responseCookies = this._parseCookieString(cookieString);\n            }\n          } catch (e) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Could not extract cookies from response headers');\n          }\n          try {\n            responseHeaders = this._getXHRResponseHeaders(xhr);\n          } catch (e) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Could not extract headers from response');\n          }\n          requestHeaders = headers;\n        }\n        var event = this._createEvent({\n          url: xhr.responseURL,\n          method: method,\n          status: xhr.status,\n          requestHeaders: requestHeaders,\n          // Can't access request cookies from XHR\n          responseHeaders: responseHeaders,\n          responseCookies: responseCookies\n        });\n        hub.captureEvent(event);\n      }\n    }\n\n    /**\n     * Extracts response size from `Content-Length` header when possible\n     *\n     * @param headers\n     * @returns The response size in bytes or undefined\n     */\n  }, {\n    key: \"_getResponseSizeFromHeaders\",\n    value: function _getResponseSizeFromHeaders(headers) {\n      if (headers) {\n        var contentLength = headers['Content-Length'] || headers['content-length'];\n        if (contentLength) {\n          return parseInt(contentLength, 10);\n        }\n      }\n      return undefined;\n    }\n\n    /**\n     * Creates an object containing cookies from the given cookie string\n     *\n     * @param cookieString The cookie string to parse\n     * @returns The parsed cookies\n     */\n  }, {\n    key: \"_parseCookieString\",\n    value: function _parseCookieString(cookieString) {\n      return cookieString.split('; ').reduce(function (acc, cookie) {\n        var _cookie$split = cookie.split('='),\n          _cookie$split2 = _slicedToArray(_cookie$split, 2),\n          key = _cookie$split2[0],\n          value = _cookie$split2[1];\n        acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n    /**\n     * Extracts the headers as an object from the given Fetch API request or response object\n     *\n     * @param headers The headers to extract\n     * @returns The extracted headers as an object\n     */\n  }, {\n    key: \"_extractFetchHeaders\",\n    value: function _extractFetchHeaders(headers) {\n      var result = {};\n      headers.forEach(function (value, key) {\n        result[key] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Extracts the response headers as an object from the given XHR object\n     *\n     * @param xhr The XHR object to extract the response headers from\n     * @returns The response headers as an object\n     */\n  }, {\n    key: \"_getXHRResponseHeaders\",\n    value: function _getXHRResponseHeaders(xhr) {\n      var headers = xhr.getAllResponseHeaders();\n      if (!headers) {\n        return {};\n      }\n      return headers.split('\\r\\n').reduce(function (acc, line) {\n        var _line$split = line.split(': '),\n          _line$split2 = _slicedToArray(_line$split, 2),\n          key = _line$split2[0],\n          value = _line$split2[1];\n        acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n    /**\n     * Checks if the given target url is in the given list of targets\n     *\n     * @param target The target url to check\n     * @returns true if the target url is in the given list of targets, false otherwise\n     */\n  }, {\n    key: \"_isInGivenRequestTargets\",\n    value: function _isInGivenRequestTargets(target) {\n      if (!this._options.failedRequestTargets) {\n        return false;\n      }\n      return this._options.failedRequestTargets.some(function (givenRequestTarget) {\n        if (typeof givenRequestTarget === 'string') {\n          return target.includes(givenRequestTarget);\n        }\n        return givenRequestTarget.test(target);\n      });\n    }\n\n    /**\n     * Checks if the given status code is in the given range\n     *\n     * @param status The status code to check\n     * @returns true if the status code is in the given range, false otherwise\n     */\n  }, {\n    key: \"_isInGivenStatusRanges\",\n    value: function _isInGivenStatusRanges(status) {\n      if (!this._options.failedRequestStatusCodes) {\n        return false;\n      }\n      return this._options.failedRequestStatusCodes.some(function (range) {\n        if (typeof range === 'number') {\n          return range === status;\n        }\n        return status >= range[0] && status <= range[1];\n      });\n    }\n\n    /**\n     * Wraps `fetch` function to capture request and response data\n     */\n  }, {\n    key: \"_wrapFetch\",\n    value: function _wrapFetch() {\n      var _this2 = this;\n      if (!utils.supportsNativeFetch()) {\n        return;\n      }\n      utils.addInstrumentationHandler('fetch', function (handlerData) {\n        var response = handlerData.response,\n          args = handlerData.args;\n        var _args = _slicedToArray(args, 2),\n          requestInfo = _args[0],\n          requestInit = _args[1];\n        if (!response) {\n          return;\n        }\n        _this2._fetchResponseHandler(requestInfo, response, requestInit);\n      });\n    }\n\n    /**\n     * Wraps XMLHttpRequest to capture request and response data\n     */\n  }, {\n    key: \"_wrapXHR\",\n    value: function _wrapXHR() {\n      var _this3 = this;\n      if (!('XMLHttpRequest' in utils.GLOBAL_OBJ)) {\n        return;\n      }\n      utils.addInstrumentationHandler('xhr', function (handlerData) {\n        var xhr = handlerData.xhr;\n        var sentryXhrData = xhr[utils.SENTRY_XHR_DATA_KEY];\n        if (!sentryXhrData) {\n          return;\n        }\n        var method = sentryXhrData.method,\n          headers = sentryXhrData.request_headers;\n        if (!method) {\n          return;\n        }\n        try {\n          _this3._xhrResponseHandler(xhr, method, headers);\n        } catch (e) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Error while extracting response event form XHR response', e);\n        }\n      });\n    }\n\n    /**\n     * Checks whether given url points to Sentry server\n     *\n     * @param url url to verify\n     */\n  }, {\n    key: \"_isSentryRequest\",\n    value: function _isSentryRequest(url) {\n      var client = this._getCurrentHub && this._getCurrentHub().getClient();\n      if (!client) {\n        return false;\n      }\n      var dsn = client.getDsn();\n      return dsn ? url.includes(dsn.host) : false;\n    }\n\n    /**\n     * Checks whether to capture given response as an event\n     *\n     * @param status response status code\n     * @param url response url\n     */\n  }, {\n    key: \"_shouldCaptureResponse\",\n    value: function _shouldCaptureResponse(status, url) {\n      return this._isInGivenStatusRanges(status) && this._isInGivenRequestTargets(url) && !this._isSentryRequest(url);\n    }\n\n    /**\n     * Creates a synthetic Sentry event from given response data\n     *\n     * @param data response data\n     * @returns event\n     */\n  }, {\n    key: \"_createEvent\",\n    value: function _createEvent(data) {\n      var message = \"HTTP Client Error with status code: \".concat(data.status);\n      var event = {\n        message: message,\n        exception: {\n          values: [{\n            type: 'Error',\n            value: message\n          }]\n        },\n        request: {\n          url: data.url,\n          method: data.method,\n          headers: data.requestHeaders,\n          cookies: data.requestCookies\n        },\n        contexts: {\n          response: {\n            status_code: data.status,\n            headers: data.responseHeaders,\n            cookies: data.responseCookies,\n            body_size: this._getResponseSizeFromHeaders(data.responseHeaders)\n          }\n        }\n      };\n      utils.addExceptionMechanism(event, {\n        type: 'http.client'\n      });\n      return event;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'HttpClient';\n    }\n  }]);\n  return HttpClient;\n}();\nHttpClient.__initStatic();\nfunction _getRequest(requestInfo, requestInit) {\n  if (!requestInit && requestInfo instanceof Request) {\n    return requestInfo;\n  }\n\n  // If both are set, we try to construct a new Request with the given arguments\n  // However, if e.g. the original request has a `body`, this will throw an error because it was already accessed\n  // In this case, as a fallback, we just use the original request - using both is rather an edge case\n  if (requestInfo instanceof Request && requestInfo.bodyUsed) {\n    return requestInfo;\n  }\n  return new Request(requestInfo, requestInit);\n}\nexports.HttpClient = HttpClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/httpclient.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var captureconsole = __webpack_require__(/*! ./captureconsole.js */ "./node_modules/@sentry/integrations/cjs/captureconsole.js");
var debug = __webpack_require__(/*! ./debug.js */ "./node_modules/@sentry/integrations/cjs/debug.js");
var dedupe = __webpack_require__(/*! ./dedupe.js */ "./node_modules/@sentry/integrations/cjs/dedupe.js");
var extraerrordata = __webpack_require__(/*! ./extraerrordata.js */ "./node_modules/@sentry/integrations/cjs/extraerrordata.js");
var offline = __webpack_require__(/*! ./offline.js */ "./node_modules/@sentry/integrations/cjs/offline.js");
var reportingobserver = __webpack_require__(/*! ./reportingobserver.js */ "./node_modules/@sentry/integrations/cjs/reportingobserver.js");
var rewriteframes = __webpack_require__(/*! ./rewriteframes.js */ "./node_modules/@sentry/integrations/cjs/rewriteframes.js");
var sessiontiming = __webpack_require__(/*! ./sessiontiming.js */ "./node_modules/@sentry/integrations/cjs/sessiontiming.js");
var transaction = __webpack_require__(/*! ./transaction.js */ "./node_modules/@sentry/integrations/cjs/transaction.js");
var httpclient = __webpack_require__(/*! ./httpclient.js */ "./node_modules/@sentry/integrations/cjs/httpclient.js");
exports.CaptureConsole = captureconsole.CaptureConsole;
exports.Debug = debug.Debug;
exports.Dedupe = dedupe.Dedupe;
exports.ExtraErrorData = extraerrordata.ExtraErrorData;
exports.Offline = offline.Offline;
exports.ReportingObserver = reportingobserver.ReportingObserver;
exports.RewriteFrames = rewriteframes.RewriteFrames;
exports.SessionTiming = sessiontiming.SessionTiming;
exports.Transaction = transaction.Transaction;
exports.HttpClient = httpclient.HttpClient;

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/offline.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/offline.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.sort.js */ \"./node_modules/core-js/modules/es.array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar localForage = __webpack_require__(/*! localforage */ \"./node_modules/localforage/dist/localforage.js\");\nvar WINDOW = utils.GLOBAL_OBJ;\n\n/**\n * cache offline errors and send when connected\n * @deprecated The offline integration has been deprecated in favor of the offline transport wrapper.\n *\n * http://docs.sentry.io/platforms/javascript/configuration/transports/#offline-caching\n */\nvar Offline = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * the current hub instance\n   */\n\n  /**\n   * maximum number of events to store while offline\n   */\n\n  /**\n   * event cache\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Offline() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Offline);\n    Offline.prototype.__init.call(this);\n    this.maxStoredEvents = options.maxStoredEvents || 30; // set a reasonable default\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this.offlineEventStore = localForage.default.createInstance({\n      name: 'sentry/offlineEventStore'\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Offline, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Offline.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var _this = this;\n      this.hub = getCurrentHub();\n      if ('addEventListener' in WINDOW) {\n        WINDOW.addEventListener('online', function () {\n          void _this._sendEvents().catch(function () {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('could not send cached events');\n          });\n        });\n      }\n      var eventProcessor = function eventProcessor(event) {\n        if (_this.hub && _this.hub.getIntegration(Offline)) {\n          // cache if we are positively offline\n          if ('navigator' in WINDOW && 'onLine' in WINDOW.navigator && !WINDOW.navigator.onLine) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Event dropped due to being a offline - caching instead');\n            void _this._cacheEvent(event).then(function (_event) {\n              return _this._enforceMaxEvents();\n            }).catch(function (_error) {\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('could not cache event while offline');\n            });\n\n            // return null on success or failure, because being offline will still result in an error\n            return null;\n          }\n        }\n        return event;\n      };\n      eventProcessor.id = this.name;\n      addGlobalEventProcessor(eventProcessor);\n\n      // if online now, send any events stored in a previous offline session\n      if ('navigator' in WINDOW && 'onLine' in WINDOW.navigator && WINDOW.navigator.onLine) {\n        void this._sendEvents().catch(function () {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('could not send cached events');\n        });\n      }\n    }\n\n    /**\n     * cache an event to send later\n     * @param event an event\n     */\n  }, {\n    key: \"_cacheEvent\",\n    value: function () {\n      var _cacheEvent2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.offlineEventStore.setItem(utils.uuid4(), utils.normalize(event)));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _cacheEvent(_x) {\n        return _cacheEvent2.apply(this, arguments);\n      }\n      return _cacheEvent;\n    }()\n    /**\n     * purge excess events if necessary\n     */\n  }, {\n    key: \"_enforceMaxEvents\",\n    value: function () {\n      var _enforceMaxEvents2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n        var events;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              events = [];\n              return _context2.abrupt(\"return\", this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n                // aggregate events\n                events.push({\n                  cacheKey: cacheKey,\n                  event: event\n                });\n              }).then(function () {\n                return (\n                  // this promise resolves when the iteration is finished\n                  _this2._purgeEvents(\n                  // purge all events past maxStoredEvents in reverse chronological order\n                  events.sort(function (a, b) {\n                    return (b.event.timestamp || 0) - (a.event.timestamp || 0);\n                  }).slice(_this2.maxStoredEvents < events.length ? _this2.maxStoredEvents : events.length).map(function (event) {\n                    return event.cacheKey;\n                  }))\n                );\n              }).catch(function (_error) {\n                (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('could not enforce max events');\n              }));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _enforceMaxEvents() {\n        return _enforceMaxEvents2.apply(this, arguments);\n      }\n      return _enforceMaxEvents;\n    }()\n    /**\n     * purge event from cache\n     */\n  }, {\n    key: \"_purgeEvent\",\n    value: function () {\n      var _purgeEvent2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(cacheKey) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.offlineEventStore.removeItem(cacheKey));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _purgeEvent(_x2) {\n        return _purgeEvent2.apply(this, arguments);\n      }\n      return _purgeEvent;\n    }()\n    /**\n     * purge events from cache\n     */\n  }, {\n    key: \"_purgeEvents\",\n    value: function () {\n      var _purgeEvents2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(cacheKeys) {\n        var _this3 = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", Promise.all(cacheKeys.map(function (cacheKey) {\n                return _this3._purgeEvent(cacheKey);\n              })).then());\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function _purgeEvents(_x3) {\n        return _purgeEvents2.apply(this, arguments);\n      }\n      return _purgeEvents;\n    }()\n    /**\n     * send all events\n     */\n  }, {\n    key: \"_sendEvents\",\n    value: function () {\n      var _sendEvents2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _this4 = this;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n                if (_this4.hub) {\n                  _this4.hub.captureEvent(event);\n                  void _this4._purgeEvent(cacheKey).catch(function (_error) {\n                    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('could not purge event from cache');\n                  });\n                } else {\n                  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('no hub found - could not send cached event');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _sendEvents() {\n        return _sendEvents2.apply(this, arguments);\n      }\n      return _sendEvents;\n    }()\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Offline';\n    }\n  }]);\n  return Offline;\n}();\nOffline.__initStatic();\nexports.Offline = Offline;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/offline.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/reportingobserver.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/reportingobserver.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\nvar WINDOW = utils.GLOBAL_OBJ;\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nvar ReportingObserver = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Returns current hub.\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function ReportingObserver() {\n    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      types: ['crash', 'deprecation', 'intervention']\n    };\n    _classCallCheck(this, ReportingObserver);\n    this._options = _options;\n    ReportingObserver.prototype.__init.call(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(ReportingObserver, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = ReportingObserver.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!utils.supportsReportingObserver()) {\n        return;\n      }\n      this._getCurrentHub = getCurrentHub;\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      var observer = new WINDOW.ReportingObserver(this.handler.bind(this), {\n        buffered: true,\n        types: this._options.types\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      observer.observe();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"handler\",\n    value: function handler(reports) {\n      var hub = this._getCurrentHub && this._getCurrentHub();\n      if (!hub || !hub.getIntegration(ReportingObserver)) {\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(reports),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var report = _step.value;\n          hub.withScope(function (scope) {\n            scope.setExtra('url', report.url);\n            var label = \"ReportingObserver [\".concat(report.type, \"]\");\n            var details = 'No details available';\n            if (report.body) {\n              // Object.keys doesn't work on ReportBody, as all properties are inheirted\n              var plainBody = {};\n\n              // eslint-disable-next-line guard-for-in\n              for (var prop in report.body) {\n                plainBody[prop] = report.body[prop];\n              }\n              scope.setExtra('body', plainBody);\n              if (report.type === 'crash') {\n                var body = report.body;\n                // A fancy way to create a message out of crashId OR reason OR both OR fallback\n                details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n              } else {\n                var _body = report.body;\n                details = _body.message || details;\n              }\n            }\n            hub.captureMessage(\"\".concat(label, \": \").concat(details));\n          });\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'ReportingObserver';\n    }\n  }]);\n  return ReportingObserver;\n}();\nReportingObserver.__initStatic();\nexports.ReportingObserver = ReportingObserver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/reportingobserver.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/rewriteframes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/rewriteframes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n/** Rewrite event frames paths */\nvar RewriteFrames = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * @inheritDoc\n   */\n  function RewriteFrames() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, RewriteFrames);\n    RewriteFrames.prototype.__init.call(this);\n    RewriteFrames.prototype.__init2.call(this);\n    RewriteFrames.prototype.__init3.call(this);\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.prefix) {\n      this._prefix = options.prefix;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(RewriteFrames, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = RewriteFrames.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._prefix = 'app:///';\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      addGlobalEventProcessor(function (event) {\n        var self = getCurrentHub().getIntegration(RewriteFrames);\n        if (self) {\n          return self.process(event);\n        }\n        return event;\n      });\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"process\",\n    value: function process(originalEvent) {\n      var processedEvent = originalEvent;\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = this._processExceptionsEvent(processedEvent);\n      }\n      return processedEvent;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      var _this = this;\n      this._iteratee = function (frame) {\n        if (!frame.filename) {\n          return frame;\n        }\n        // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n        var isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n        // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n        frame.filename.includes('\\\\') && !frame.filename.includes('/');\n        // Check if the frame filename begins with `/`\n        var startsWithSlash = /^\\//.test(frame.filename);\n        if (isWindowsFrame || startsWithSlash) {\n          var filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n          .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n          var base = _this._root ? utils.relative(_this._root, filename) : utils.basename(filename);\n          frame.filename = \"\".concat(_this._prefix).concat(base);\n        }\n        return frame;\n      };\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"_processExceptionsEvent\",\n    value: function _processExceptionsEvent(event) {\n      var _this2 = this;\n      try {\n        return _objectSpread(_objectSpread({}, event), {}, {\n          exception: _objectSpread(_objectSpread({}, event.exception), {}, {\n            // The check for this is performed inside `process` call itself, safe to skip here\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            values: event.exception.values.map(function (value) {\n              return _objectSpread(_objectSpread({}, value), value.stacktrace && {\n                stacktrace: _this2._processStacktrace(value.stacktrace)\n              });\n            })\n          })\n        });\n      } catch (_oO) {\n        return event;\n      }\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"_processStacktrace\",\n    value: function _processStacktrace(stacktrace) {\n      var _this3 = this;\n      return _objectSpread(_objectSpread({}, stacktrace), {}, {\n        frames: stacktrace && stacktrace.frames && stacktrace.frames.map(function (f) {\n          return _this3._iteratee(f);\n        })\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'RewriteFrames';\n    }\n  }]);\n  return RewriteFrames;\n}();\nRewriteFrames.__initStatic();\nexports.RewriteFrames = RewriteFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/rewriteframes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/sessiontiming.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/sessiontiming.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** This function adds duration since Sentry was initialized till the time event was sent */\nvar SessionTiming = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SessionTiming() {\n    _classCallCheck(this, SessionTiming);\n    SessionTiming.prototype.__init.call(this);\n    SessionTiming.prototype.__init2.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(SessionTiming, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = SessionTiming.id;\n    }\n\n    /** Exact time Client was initialized expressed in milliseconds since Unix Epoch. */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._startTime = Date.now();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      addGlobalEventProcessor(function (event) {\n        var self = getCurrentHub().getIntegration(SessionTiming);\n        if (self) {\n          return self.process(event);\n        }\n        return event;\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"process\",\n    value: function process(event) {\n      var _objectSpread2;\n      var now = Date.now();\n      return _objectSpread(_objectSpread({}, event), {}, {\n        extra: _objectSpread(_objectSpread({}, event.extra), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, 'session:start', this._startTime), _defineProperty(_objectSpread2, 'session:duration', now - this._startTime), _defineProperty(_objectSpread2, 'session:end', now), _objectSpread2))\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'SessionTiming';\n    }\n  }]);\n  return SessionTiming;\n}();\nSessionTiming.__initStatic();\nexports.SessionTiming = SessionTiming;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvY2pzL3Nlc3Npb250aW1pbmcuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUFBLElBQ0FBLGFBQUE7RUFBQTs7RUFBQSxTQUFBQSxjQUFBO0lBQUFDLGVBQUEsT0FBQUQsYUFBQTtJQUFBQSxhQUFBLENBQUFFLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0lBQUFKLGFBQUEsQ0FBQUUsU0FBQSxDQUFBRyxPQUFBLENBQUFELElBQUE7RUFBQTtFQUNBO0FBQ0E7QUFDQTtFQUZBRSxZQUFBLENBQUFOLGFBQUE7SUFBQU8sR0FBQTtJQUFBQyxLQUFBO0lBS0E7QUFDQTtBQUNBO0lBQ0EsU0FBQUwsT0FBQTtNQUFBLEtBQUFNLElBQUEsR0FBQVQsYUFBQSxDQUFBVSxFQUFBO0lBQUE7O0lBRUE7RUFBQTtJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUFDQSxTQUFBSCxRQUFBO01BQUEsS0FBQU0sVUFBQSxHQUFBQyxJQUFBLENBQUFDLEdBQUE7SUFBQTs7SUFFQTtBQUNBO0FBQ0E7RUFGQTtJQUFBTixHQUFBO0lBQUFDLEtBQUEsRUFHQSxTQUFBTSxVQUFBQyx1QkFBQSxFQUFBQyxhQUFBO01BQ0FELHVCQUFBLFdBQUFFLEtBQUE7UUFDQSxJQUFBQyxJQUFBLEdBQUFGLGFBQUEsR0FBQUcsY0FBQSxDQUFBbkIsYUFBQTtRQUNBLElBQUFrQixJQUFBO1VBQ0EsT0FBQUEsSUFBQSxDQUFBRSxPQUFBLENBQUFILEtBQUE7UUFDQTtRQUNBLE9BQUFBLEtBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFWLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFZLFFBQUFILEtBQUE7TUFBQSxJQUFBSSxjQUFBO01BQ0EsSUFBQVIsR0FBQSxHQUFBRCxJQUFBLENBQUFDLEdBQUE7TUFFQSxPQUFBUyxhQUFBLENBQUFBLGFBQUEsS0FDQUwsS0FBQTtRQUNBTSxLQUFBLEVBQUFELGFBQUEsQ0FBQUEsYUFBQSxLQUNBTCxLQUFBLENBQUFNLEtBQUEsUUFBQUYsY0FBQSxPQUFBRyxlQUFBLENBQUFILGNBQUEsRUFDQSxzQkFBQVYsVUFBQSxHQUFBYSxlQUFBLENBQUFILGNBQUEsRUFDQSxvQkFBQVIsR0FBQSxRQUFBRixVQUFBLEdBQUFhLGVBQUEsQ0FBQUgsY0FBQSxFQUNBLGVBQUFSLEdBQUEsR0FBQVEsY0FBQTtNQUNBO0lBRUE7RUFBQTtJQUFBZCxHQUFBO0lBQUFDLEtBQUEsRUF0Q0EsU0FBQWlCLGFBQUE7TUFBQSxLQUFBZixFQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFWLGFBQUE7QUFBQTtBQXVDQUEsYUFBQSxDQUFBeUIsWUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9zZXNzaW9udGltaW5nLnRzPzQ1NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24gfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcblxuLyoqIFRoaXMgZnVuY3Rpb24gYWRkcyBkdXJhdGlvbiBzaW5jZSBTZW50cnkgd2FzIGluaXRpYWxpemVkIHRpbGwgdGhlIHRpbWUgZXZlbnQgd2FzIHNlbnQgKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uVGltaW5nIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdTZXNzaW9uVGltaW5nJztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBTZXNzaW9uVGltaW5nLmlkO1xuXG4gIC8qKiBFeGFjdCB0aW1lIENsaWVudCB3YXMgaW5pdGlhbGl6ZWQgZXhwcmVzc2VkIGluIG1pbGxpc2Vjb25kcyBzaW5jZSBVbml4IEVwb2NoLiAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3N0YXJ0VGltZTogbnVtYmVyID0gRGF0ZS5ub3coKTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzZXR1cE9uY2UoYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3I6IChjYWxsYmFjazogRXZlbnRQcm9jZXNzb3IpID0+IHZvaWQsIGdldEN1cnJlbnRIdWI6ICgpID0+IEh1Yik6IHZvaWQge1xuICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSBnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oU2Vzc2lvblRpbWluZyk7XG4gICAgICBpZiAoc2VsZikge1xuICAgICAgICByZXR1cm4gc2VsZi5wcm9jZXNzKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcHVibGljIHByb2Nlc3MoZXZlbnQ6IEV2ZW50KTogRXZlbnQge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZXZlbnQsXG4gICAgICBleHRyYToge1xuICAgICAgICAuLi5ldmVudC5leHRyYSxcbiAgICAgICAgWydzZXNzaW9uOnN0YXJ0J106IHRoaXMuX3N0YXJ0VGltZSxcbiAgICAgICAgWydzZXNzaW9uOmR1cmF0aW9uJ106IG5vdyAtIHRoaXMuX3N0YXJ0VGltZSxcbiAgICAgICAgWydzZXNzaW9uOmVuZCddOiBub3csXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJTZXNzaW9uVGltaW5nIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG90eXBlIiwiX19pbml0IiwiY2FsbCIsIl9faW5pdDIiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsIm5hbWUiLCJpZCIsIl9zdGFydFRpbWUiLCJEYXRlIiwibm93Iiwic2V0dXBPbmNlIiwiYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IiLCJnZXRDdXJyZW50SHViIiwiZXZlbnQiLCJzZWxmIiwiZ2V0SW50ZWdyYXRpb24iLCJwcm9jZXNzIiwiX29iamVjdFNwcmVhZDIiLCJfb2JqZWN0U3ByZWFkIiwiZXh0cmEiLCJfZGVmaW5lUHJvcGVydHkiLCJfX2luaXRTdGF0aWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/sessiontiming.js\n");

/***/ }),

/***/ "./node_modules/@sentry/integrations/cjs/transaction.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/integrations/cjs/transaction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Add node transaction to the event */\nvar Transaction = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n    Transaction.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(Transaction, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Transaction.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      addGlobalEventProcessor(function (event) {\n        var self = getCurrentHub().getIntegration(Transaction);\n        if (self) {\n          return self.process(event);\n        }\n        return event;\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"process\",\n    value: function process(event) {\n      var frames = this._getFramesFromEvent(event);\n\n      // use for loop so we don't have to reverse whole frames array\n      for (var i = frames.length - 1; i >= 0; i--) {\n        var frame = frames[i];\n        if (frame.in_app === true) {\n          event.transaction = this._getTransaction(frame);\n          break;\n        }\n      }\n      return event;\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"_getFramesFromEvent\",\n    value: function _getFramesFromEvent(event) {\n      var exception = event.exception && event.exception.values && event.exception.values[0];\n      return exception && exception.stacktrace && exception.stacktrace.frames || [];\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"_getTransaction\",\n    value: function _getTransaction(frame) {\n      return frame.module || frame.function ? \"\".concat(frame.module || '?', \"/\").concat(frame.function || '?') : '<unknown>';\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Transaction';\n    }\n  }]);\n  return Transaction;\n}();\nTransaction.__initStatic();\nexports.Transaction = Transaction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9pbnRlZ3JhdGlvbnMvY2pzL3RyYW5zYWN0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUFBLElBQ0FBLFdBQUE7RUFBQTs7RUFBQSxTQUFBQSxZQUFBO0lBQUFDLGVBQUEsT0FBQUQsV0FBQTtJQUFBQSxXQUFBLENBQUFFLFNBQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBO0VBQUE7RUFDQTtBQUNBO0FBQ0E7RUFGQUMsWUFBQSxDQUFBTCxXQUFBO0lBQUFNLEdBQUE7SUFBQUMsS0FBQTtJQUtBO0FBQ0E7QUFDQTtJQUNBLFNBQUFKLE9BQUE7TUFBQSxLQUFBSyxJQUFBLEdBQUFSLFdBQUEsQ0FBQVMsRUFBQTtJQUFBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFHLFVBQUFDLHVCQUFBLEVBQUFDLGFBQUE7TUFDQUQsdUJBQUEsV0FBQUUsS0FBQTtRQUNBLElBQUFDLElBQUEsR0FBQUYsYUFBQSxHQUFBRyxjQUFBLENBQUFmLFdBQUE7UUFDQSxJQUFBYyxJQUFBO1VBQ0EsT0FBQUEsSUFBQSxDQUFBRSxPQUFBLENBQUFILEtBQUE7UUFDQTtRQUNBLE9BQUFBLEtBQUE7TUFDQTtJQUNBOztJQUVBO0FBQ0E7QUFDQTtFQUZBO0lBQUFQLEdBQUE7SUFBQUMsS0FBQSxFQUdBLFNBQUFTLFFBQUFILEtBQUE7TUFDQSxJQUFBSSxNQUFBLFFBQUFDLG1CQUFBLENBQUFMLEtBQUE7O01BRUE7TUFDQSxTQUFBTSxDQUFBLEdBQUFGLE1BQUEsQ0FBQUcsTUFBQSxNQUFBRCxDQUFBLE9BQUFBLENBQUE7UUFDQSxJQUFBRSxLQUFBLEdBQUFKLE1BQUEsQ0FBQUUsQ0FBQTtRQUVBLElBQUFFLEtBQUEsQ0FBQUMsTUFBQTtVQUNBVCxLQUFBLENBQUFVLFdBQUEsUUFBQUMsZUFBQSxDQUFBSCxLQUFBO1VBQ0E7UUFDQTtNQUNBO01BRUEsT0FBQVIsS0FBQTtJQUNBOztJQUVBO0VBQUE7SUFBQVAsR0FBQTtJQUFBQyxLQUFBLEVBQ0EsU0FBQVcsb0JBQUFMLEtBQUE7TUFDQSxJQUFBWSxTQUFBLEdBQUFaLEtBQUEsQ0FBQVksU0FBQSxJQUFBWixLQUFBLENBQUFZLFNBQUEsQ0FBQUMsTUFBQSxJQUFBYixLQUFBLENBQUFZLFNBQUEsQ0FBQUMsTUFBQTtNQUNBLE9BQUFELFNBQUEsSUFBQUEsU0FBQSxDQUFBRSxVQUFBLElBQUFGLFNBQUEsQ0FBQUUsVUFBQSxDQUFBVixNQUFBO0lBQ0E7O0lBRUE7RUFBQTtJQUFBWCxHQUFBO0lBQUFDLEtBQUEsRUFDQSxTQUFBaUIsZ0JBQUFILEtBQUE7TUFDQSxPQUFBQSxLQUFBLENBQUFPLE1BQUEsSUFBQVAsS0FBQSxDQUFBUSxRQUFBLE1BQUFDLE1BQUEsQ0FBQVQsS0FBQSxDQUFBTyxNQUFBLGNBQUFFLE1BQUEsQ0FBQVQsS0FBQSxDQUFBUSxRQUFBO0lBQ0E7RUFBQTtJQUFBdkIsR0FBQTtJQUFBQyxLQUFBLEVBaERBLFNBQUF3QixhQUFBO01BQUEsS0FBQXRCLEVBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQVQsV0FBQTtBQUFBO0FBaURBQSxXQUFBLENBQUErQixZQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9uLnRzPzk1OWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFdmVudCwgRXZlbnRQcm9jZXNzb3IsIEh1YiwgSW50ZWdyYXRpb24sIFN0YWNrRnJhbWUgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcblxuLyoqIEFkZCBub2RlIHRyYW5zYWN0aW9uIHRvIHRoZSBldmVudCAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uIGltcGxlbWVudHMgSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWQ6IHN0cmluZyA9ICdUcmFuc2FjdGlvbic7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgbmFtZTogc3RyaW5nID0gVHJhbnNhY3Rpb24uaWQ7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yOiAoY2FsbGJhY2s6IEV2ZW50UHJvY2Vzc29yKSA9PiB2b2lkLCBnZXRDdXJyZW50SHViOiAoKSA9PiBIdWIpOiB2b2lkIHtcbiAgICBhZGRHbG9iYWxFdmVudFByb2Nlc3NvcihldmVudCA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gZ2V0Q3VycmVudEh1YigpLmdldEludGVncmF0aW9uKFRyYW5zYWN0aW9uKTtcbiAgICAgIGlmIChzZWxmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnByb2Nlc3MoZXZlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBwdWJsaWMgcHJvY2VzcyhldmVudDogRXZlbnQpOiBFdmVudCB7XG4gICAgY29uc3QgZnJhbWVzID0gdGhpcy5fZ2V0RnJhbWVzRnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIC8vIHVzZSBmb3IgbG9vcCBzbyB3ZSBkb24ndCBoYXZlIHRvIHJldmVyc2Ugd2hvbGUgZnJhbWVzIGFycmF5XG4gICAgZm9yIChsZXQgaSA9IGZyYW1lcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgZnJhbWUgPSBmcmFtZXNbaV07XG5cbiAgICAgIGlmIChmcmFtZS5pbl9hcHAgPT09IHRydWUpIHtcbiAgICAgICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0aGlzLl9nZXRUcmFuc2FjdGlvbihmcmFtZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG4gIC8qKiBKU0RvYyAqL1xuICBwcml2YXRlIF9nZXRGcmFtZXNGcm9tRXZlbnQoZXZlbnQ6IEV2ZW50KTogU3RhY2tGcmFtZVtdIHtcbiAgICBjb25zdCBleGNlcHRpb24gPSBldmVudC5leGNlcHRpb24gJiYgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyAmJiBldmVudC5leGNlcHRpb24udmFsdWVzWzBdO1xuICAgIHJldHVybiAoZXhjZXB0aW9uICYmIGV4Y2VwdGlvbi5zdGFja3RyYWNlICYmIGV4Y2VwdGlvbi5zdGFja3RyYWNlLmZyYW1lcykgfHwgW107XG4gIH1cblxuICAvKiogSlNEb2MgKi9cbiAgcHJpdmF0ZSBfZ2V0VHJhbnNhY3Rpb24oZnJhbWU6IFN0YWNrRnJhbWUpOiBzdHJpbmcge1xuICAgIHJldHVybiBmcmFtZS5tb2R1bGUgfHwgZnJhbWUuZnVuY3Rpb24gPyBgJHtmcmFtZS5tb2R1bGUgfHwgJz8nfS8ke2ZyYW1lLmZ1bmN0aW9uIHx8ICc/J31gIDogJzx1bmtub3duPic7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJUcmFuc2FjdGlvbiIsIl9jbGFzc0NhbGxDaGVjayIsInByb3RvdHlwZSIsIl9faW5pdCIsImNhbGwiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsIm5hbWUiLCJpZCIsInNldHVwT25jZSIsImFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yIiwiZ2V0Q3VycmVudEh1YiIsImV2ZW50Iiwic2VsZiIsImdldEludGVncmF0aW9uIiwicHJvY2VzcyIsImZyYW1lcyIsIl9nZXRGcmFtZXNGcm9tRXZlbnQiLCJpIiwibGVuZ3RoIiwiZnJhbWUiLCJpbl9hcHAiLCJ0cmFuc2FjdGlvbiIsIl9nZXRUcmFuc2FjdGlvbiIsImV4Y2VwdGlvbiIsInZhbHVlcyIsInN0YWNrdHJhY2UiLCJtb2R1bGUiLCJmdW5jdGlvbiIsImNvbmNhdCIsIl9faW5pdFN0YXRpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/integrations/cjs/transaction.js\n");

/***/ }),

/***/ "./node_modules/@sentry/replay/cjs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/replay/cjs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\nvar _excluded = [\"category\", \"level\", \"message\"];\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.string.repeat.js */ \"./node_modules/core-js/modules/es.string.repeat.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array-buffer.slice.js */ \"./node_modules/core-js/modules/es.array-buffer.slice.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint32-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint32-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.copy-within.js */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.every.js */ \"./node_modules/core-js/modules/es.typed-array.every.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.fill.js */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.filter.js */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find.js */ \"./node_modules/core-js/modules/es.typed-array.find.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find-index.js */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.for-each.js */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.includes.js */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.index-of.js */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.iterator.js */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.join.js */ \"./node_modules/core-js/modules/es.typed-array.join.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.last-index-of.js */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.map.js */ \"./node_modules/core-js/modules/es.typed-array.map.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce.js */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce-right.js */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reverse.js */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.set.js */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.slice.js */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.some.js */ \"./node_modules/core-js/modules/es.typed-array.some.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.sort.js */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.subarray.js */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.find.js */ \"./node_modules/core-js/modules/es.array.find.js\");\n__webpack_require__(/*! core-js/modules/es.string.ends-with.js */ \"./node_modules/core-js/modules/es.string.ends-with.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.object.assign.js */ \"./node_modules/core-js/modules/es.object.assign.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.get.js */ \"./node_modules/core-js/modules/es.reflect.get.js\");\n__webpack_require__(/*! core-js/modules/es.set.js */ \"./node_modules/core-js/modules/es.set.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.number.is-nan.js */ \"./node_modules/core-js/modules/es.number.is-nan.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.weak-map.js */ \"./node_modules/core-js/modules/es.weak-map.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.entries.js */ \"./node_modules/core-js/modules/es.object.entries.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint8-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-array.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-names.js */ \"./node_modules/core-js/modules/es.object.get-own-property-names.js\");\n__webpack_require__(/*! core-js/modules/es.map.js */ \"./node_modules/core-js/modules/es.map.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.float32-array.js */ \"./node_modules/core-js/modules/es.typed-array.float32-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.float64-array.js */ \"./node_modules/core-js/modules/es.typed-array.float64-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.int32-array.js */ \"./node_modules/core-js/modules/es.typed-array.int32-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint16-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint16-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.int16-array.js */ \"./node_modules/core-js/modules/es.typed-array.int16-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.int8-array.js */ \"./node_modules/core-js/modules/es.typed-array.int8-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint8-clamped-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js\");\n__webpack_require__(/*! core-js/modules/es.object.values.js */ \"./node_modules/core-js/modules/es.object.values.js\");\n__webpack_require__(/*! core-js/modules/es.array-buffer.constructor.js */ \"./node_modules/core-js/modules/es.array-buffer.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.array.sort.js */ \"./node_modules/core-js/modules/es.array.sort.js\");\n__webpack_require__(/*! core-js/modules/web.url.js */ \"./node_modules/core-js/modules/web.url.js\");\n__webpack_require__(/*! core-js/modules/web.url-search-params.js */ \"./node_modules/core-js/modules/web.url-search-params.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"./node_modules/core-js/modules/es.string.starts-with.js\");\n__webpack_require__(/*! core-js/modules/es.string.search.js */ \"./node_modules/core-js/modules/es.string.search.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar core = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/cjs/index.js\");\nvar utils = __webpack_require__(/*! @sentry/utils */ \"./node_modules/@sentry/utils/cjs/index.js\");\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nvar WINDOW = utils.GLOBAL_OBJ;\nvar REPLAY_SESSION_KEY = 'sentryReplaySession';\nvar REPLAY_EVENT_NAME = 'replay_event';\nvar UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nvar SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nvar SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n// The maximum length of a session\nvar MAX_SESSION_LIFE = 3600000; // 60 minutes in ms\n\n/** Default flush delays */\nvar DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nvar DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nvar BUFFER_CHECKOUT_TIME = 60000;\nvar RETRY_BASE_INTERVAL = 5000;\nvar RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nvar NETWORK_BODY_MAX_SIZE = 150000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nvar CONSOLE_ARG_MAX_SIZE = 5000;\nvar NodeType$1;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\nfunction isElement(n) {\n  return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n  var host = n === null || n === void 0 ? void 0 : n.host;\n  return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\nfunction isInputTypeMasked(_ref) {\n  var maskInputOptions = _ref.maskInputOptions,\n    tagName = _ref.tagName,\n    type = _ref.type;\n  if (tagName.toLowerCase() === 'option') {\n    tagName = 'select';\n  }\n  var actualType = typeof type === 'string' ? type.toLowerCase() : undefined;\n  return maskInputOptions[tagName.toLowerCase()] || actualType && maskInputOptions[actualType] || actualType === 'password' || tagName === 'input' && !type && maskInputOptions['text'];\n}\nfunction hasInputMaskOptions(_ref2) {\n  var tagName = _ref2.tagName,\n    type = _ref2.type,\n    maskInputOptions = _ref2.maskInputOptions,\n    maskInputSelector = _ref2.maskInputSelector;\n  return maskInputSelector || isInputTypeMasked({\n    maskInputOptions: maskInputOptions,\n    tagName: tagName,\n    type: type\n  });\n}\nfunction maskInputValue(_ref3) {\n  var input = _ref3.input,\n    maskInputSelector = _ref3.maskInputSelector,\n    unmaskInputSelector = _ref3.unmaskInputSelector,\n    maskInputOptions = _ref3.maskInputOptions,\n    tagName = _ref3.tagName,\n    type = _ref3.type,\n    value = _ref3.value,\n    maskInputFn = _ref3.maskInputFn;\n  var text = value || '';\n  if (unmaskInputSelector && input.matches(unmaskInputSelector)) {\n    return text;\n  }\n  if (input.hasAttribute('data-rr-is-password')) {\n    type = 'password';\n  }\n  if (isInputTypeMasked({\n    maskInputOptions: maskInputOptions,\n    tagName: tagName,\n    type: type\n  }) || maskInputSelector && input.matches(maskInputSelector)) {\n    if (maskInputFn) {\n      text = maskInputFn(text);\n    } else {\n      text = '*'.repeat(text.length);\n    }\n  }\n  return text;\n}\nvar ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n  var ctx = canvas.getContext('2d');\n  if (!ctx) return true;\n  var chunkSize = 50;\n  for (var x = 0; x < canvas.width; x += chunkSize) {\n    for (var y = 0; y < canvas.height; y += chunkSize) {\n      var getImageData = ctx.getImageData;\n      var originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData ? getImageData[ORIGINAL_ATTRIBUTE_NAME] : getImageData;\n      var pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n      if (pixelBuffer.some(function (pixel) {\n        return pixel !== 0;\n      })) return false;\n    }\n  }\n  return true;\n}\nfunction getInputType(element) {\n  var type = element.type;\n  return element.hasAttribute('data-rr-is-password') ? 'password' : type ? type.toLowerCase() : null;\n}\nfunction getInputValue(el, tagName, type) {\n  typeof type === 'string' ? type.toLowerCase() : '';\n  if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n    return el.getAttribute('value') || '';\n  }\n  return el.value;\n}\nvar _id = 1;\nvar tagNameRegex = new RegExp('[^a-z0-9-_:]');\nvar IGNORED_NODE = -2;\nfunction defaultMaskFn(str) {\n  return str ? str.replace(/[\\S]/g, '*') : '';\n}\nfunction genId() {\n  return _id++;\n}\nfunction getValidTagName(element) {\n  if (element instanceof HTMLFormElement) {\n    return 'form';\n  }\n  var processedTagName = element.tagName.toLowerCase().trim();\n  if (tagNameRegex.test(processedTagName)) {\n    return 'div';\n  }\n  return processedTagName;\n}\nfunction getCssRulesString(s) {\n  try {\n    var rules = s.rules || s.cssRules;\n    return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getCssRuleString(rule) {\n  var cssStringified = rule.cssText;\n  if (isCSSImportRule(rule)) {\n    try {\n      cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n    } catch (_a) {}\n  }\n  return validateStringifiedCssRule(cssStringified);\n}\nfunction validateStringifiedCssRule(cssStringified) {\n  if (cssStringified.indexOf(':') > -1) {\n    var regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n    return cssStringified.replace(regex, '$1\\\\$2');\n  }\n  return cssStringified;\n}\nfunction isCSSImportRule(rule) {\n  return 'styleSheet' in rule;\n}\nfunction stringifyStyleSheet(sheet) {\n  return sheet.cssRules ? Array.from(sheet.cssRules).map(function (rule) {\n    return rule.cssText ? validateStringifiedCssRule(rule.cssText) : '';\n  }).join('') : '';\n}\nfunction extractOrigin(url) {\n  var origin = '';\n  if (url.indexOf('//') > -1) {\n    origin = url.split('/').slice(0, 3).join('/');\n  } else {\n    origin = url.split('/')[0];\n  }\n  origin = origin.split('?')[0];\n  return origin;\n}\nvar canvasService;\nvar canvasCtx;\nvar URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nvar RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nvar DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n  return (cssText || '').replace(URL_IN_CSS_REF, function (origin, quote1, path1, quote2, path2, path3) {\n    var filePath = path1 || path2 || path3;\n    var maybeQuote = quote1 || quote2 || '';\n    if (!filePath) {\n      return origin;\n    }\n    if (!RELATIVE_PATH.test(filePath)) {\n      return \"url(\".concat(maybeQuote).concat(filePath).concat(maybeQuote, \")\");\n    }\n    if (DATA_URI.test(filePath)) {\n      return \"url(\".concat(maybeQuote).concat(filePath).concat(maybeQuote, \")\");\n    }\n    if (filePath[0] === '/') {\n      return \"url(\".concat(maybeQuote).concat(extractOrigin(href) + filePath).concat(maybeQuote, \")\");\n    }\n    var stack = href.split('/');\n    var parts = filePath.split('/');\n    stack.pop();\n    var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        if (part === '.') {\n          continue;\n        } else if (part === '..') {\n          stack.pop();\n        } else {\n          stack.push(part);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return \"url(\".concat(maybeQuote).concat(stack.join('/')).concat(maybeQuote, \")\");\n  });\n}\nvar SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nvar SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n  if (attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  var pos = 0;\n  function collectCharacters(regEx) {\n    var chars;\n    var match = regEx.exec(attributeValue.substring(pos));\n    if (match) {\n      chars = match[0];\n      pos += chars.length;\n      return chars;\n    }\n    return '';\n  }\n  var output = [];\n  while (true) {\n    collectCharacters(SRCSET_COMMAS_OR_SPACES);\n    if (pos >= attributeValue.length) {\n      break;\n    }\n    var url = collectCharacters(SRCSET_NOT_SPACES);\n    if (url.slice(-1) === ',') {\n      url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n      output.push(url);\n    } else {\n      var descriptorsStr = '';\n      url = absoluteToDoc(doc, url);\n      var inParens = false;\n      while (true) {\n        var c = attributeValue.charAt(pos);\n        if (c === '') {\n          output.push((url + descriptorsStr).trim());\n          break;\n        } else if (!inParens) {\n          if (c === ',') {\n            pos += 1;\n            output.push((url + descriptorsStr).trim());\n            break;\n          } else if (c === '(') {\n            inParens = true;\n          }\n        } else {\n          if (c === ')') {\n            inParens = false;\n          }\n        }\n        descriptorsStr += c;\n        pos += 1;\n      }\n    }\n  }\n  return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n  if (!attributeValue || attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  var a = doc.createElement('a');\n  a.href = attributeValue;\n  return a.href;\n}\nfunction isSVGElement(el) {\n  return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n  var a = document.createElement('a');\n  a.href = '';\n  return a.href;\n}\nfunction transformAttribute(doc, element, _tagName, _name, value, maskAllText, unmaskTextSelector, maskTextFn) {\n  if (!value) {\n    return value;\n  }\n  var name = _name.toLowerCase();\n  var tagName = _tagName.toLowerCase();\n  if (name === 'src' || name === 'href') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'xlink:href' && value[0] !== '#') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'background' && (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'srcset') {\n    return getAbsoluteSrcsetString(doc, value);\n  } else if (name === 'style') {\n    return absoluteToStylesheet(value, getHref());\n  } else if (tagName === 'object' && name === 'data') {\n    return absoluteToDoc(doc, value);\n  } else if (maskAllText && _shouldMaskAttribute(element, name, tagName, unmaskTextSelector)) {\n    return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);\n  }\n  return value;\n}\nfunction _shouldMaskAttribute(element, attribute, tagName, unmaskTextSelector) {\n  if (unmaskTextSelector && element.matches(unmaskTextSelector)) {\n    return false;\n  }\n  return ['placeholder', 'title', 'aria-label'].indexOf(attribute) > -1 || tagName === 'input' && attribute === 'value' && element.hasAttribute('type') && ['submit', 'button'].indexOf(element.getAttribute('type').toLowerCase()) > -1;\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n  if (unblockSelector && element.matches(unblockSelector)) {\n    return false;\n  }\n  if (typeof blockClass === 'string') {\n    if (element.classList.contains(blockClass)) {\n      return true;\n    }\n  } else {\n    for (var eIndex = 0; eIndex < element.classList.length; eIndex++) {\n      var className = element.classList[eIndex];\n      if (blockClass.test(className)) {\n        return true;\n      }\n    }\n  }\n  if (blockSelector) {\n    return element.matches(blockSelector);\n  }\n  return false;\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {\n  if (!node) {\n    return false;\n  }\n  if (node.nodeType !== node.ELEMENT_NODE) {\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n  }\n  if (unmaskTextSelector) {\n    if (node.matches(unmaskTextSelector) || node.closest(unmaskTextSelector)) {\n      return false;\n    }\n  }\n  if (maskAllText) {\n    return true;\n  }\n  if (typeof maskTextClass === 'string') {\n    if (node.classList.contains(maskTextClass)) {\n      return true;\n    }\n  } else {\n    for (var eIndex = 0; eIndex < node.classList.length; eIndex++) {\n      var className = node.classList[eIndex];\n      if (maskTextClass.test(className)) {\n        return true;\n      }\n    }\n  }\n  if (maskTextSelector) {\n    if (node.matches(maskTextSelector)) {\n      return true;\n    }\n  }\n  return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n  var win = iframeEl.contentWindow;\n  if (!win) {\n    return;\n  }\n  var fired = false;\n  var readyState;\n  try {\n    readyState = win.document.readyState;\n  } catch (error) {\n    return;\n  }\n  if (readyState !== 'complete') {\n    var timer = setTimeout(function () {\n      if (!fired) {\n        listener();\n        fired = true;\n      }\n    }, iframeLoadTimeout);\n    iframeEl.addEventListener('load', function () {\n      clearTimeout(timer);\n      fired = true;\n      listener();\n    });\n    return;\n  }\n  var blankUrl = 'about:blank';\n  if (win.location.href !== blankUrl || iframeEl.src === blankUrl || iframeEl.src === '') {\n    setTimeout(listener, 0);\n    return;\n  }\n  iframeEl.addEventListener('load', listener);\n}\nfunction serializeNode(n, options) {\n  var _a;\n  var doc = options.doc,\n    blockClass = options.blockClass,\n    blockSelector = options.blockSelector,\n    unblockSelector = options.unblockSelector,\n    maskTextClass = options.maskTextClass,\n    maskTextSelector = options.maskTextSelector,\n    unmaskTextSelector = options.unmaskTextSelector,\n    inlineStylesheet = options.inlineStylesheet,\n    maskInputSelector = options.maskInputSelector,\n    unmaskInputSelector = options.unmaskInputSelector,\n    maskAllText = options.maskAllText,\n    _options$maskInputOpt = options.maskInputOptions,\n    maskInputOptions = _options$maskInputOpt === void 0 ? {} : _options$maskInputOpt,\n    maskTextFn = options.maskTextFn,\n    maskInputFn = options.maskInputFn,\n    _options$dataURLOptio = options.dataURLOptions,\n    dataURLOptions = _options$dataURLOptio === void 0 ? {} : _options$dataURLOptio,\n    inlineImages = options.inlineImages,\n    recordCanvas = options.recordCanvas,\n    keepIframeSrcFn = options.keepIframeSrcFn;\n  var rootId;\n  if (doc.__sn) {\n    var docId = doc.__sn.id;\n    rootId = docId === 1 ? undefined : docId;\n  }\n  switch (n.nodeType) {\n    case n.DOCUMENT_NODE:\n      if (n.compatMode !== 'CSS1Compat') {\n        return {\n          type: NodeType$1.Document,\n          childNodes: [],\n          compatMode: n.compatMode,\n          rootId: rootId\n        };\n      } else {\n        return {\n          type: NodeType$1.Document,\n          childNodes: [],\n          rootId: rootId\n        };\n      }\n    case n.DOCUMENT_TYPE_NODE:\n      return {\n        type: NodeType$1.DocumentType,\n        name: n.name,\n        publicId: n.publicId,\n        systemId: n.systemId,\n        rootId: rootId\n      };\n    case n.ELEMENT_NODE:\n      var needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n      var tagName = getValidTagName(n);\n      var attributes = {};\n      for (var _i = 0, _Array$from = Array.from(n.attributes); _i < _Array$from.length; _i++) {\n        var _Array$from$_i = _Array$from[_i],\n          name = _Array$from$_i.name,\n          value = _Array$from$_i.value;\n        if (!skipAttribute(tagName, name)) {\n          attributes[name] = transformAttribute(doc, n, tagName, name, value, maskAllText, unmaskTextSelector, maskTextFn);\n        }\n      }\n      if (tagName === 'link' && inlineStylesheet) {\n        var stylesheet = Array.from(doc.styleSheets).find(function (s) {\n          return s.href === n.href;\n        });\n        var cssText = null;\n        if (stylesheet) {\n          cssText = getCssRulesString(stylesheet);\n        }\n        if (cssText) {\n          delete attributes.rel;\n          delete attributes.href;\n          attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n      }\n      if (tagName === 'style' && n.sheet && !(n.innerText || n.textContent || '').trim().length) {\n        var _cssText = getCssRulesString(n.sheet);\n        if (_cssText) {\n          attributes._cssText = absoluteToStylesheet(_cssText, getHref());\n        }\n      }\n      if (tagName === 'input' || tagName === 'textarea' || tagName === 'select' || tagName === 'option') {\n        var el = n;\n        var type = getInputType(el);\n        var _value = getInputValue(el, tagName.toUpperCase(), type);\n        var checked = n.checked;\n        if (type !== 'submit' && type !== 'button' && _value) {\n          attributes.value = maskInputValue({\n            input: el,\n            type: type,\n            tagName: tagName,\n            value: _value,\n            maskInputSelector: maskInputSelector,\n            unmaskInputSelector: unmaskInputSelector,\n            maskInputOptions: maskInputOptions,\n            maskInputFn: maskInputFn\n          });\n        }\n        if (checked) {\n          attributes.checked = checked;\n        }\n      }\n      if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n          attributes.selected = true;\n        } else {\n          delete attributes.selected;\n        }\n      }\n      if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n          if (!is2DCanvasBlank(n)) {\n            attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          }\n        } else if (!('__context' in n)) {\n          var canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          var blankCanvas = document.createElement('canvas');\n          blankCanvas.width = n.width;\n          blankCanvas.height = n.height;\n          var blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          if (canvasDataURL !== blankCanvasDataURL) {\n            attributes.rr_dataURL = canvasDataURL;\n          }\n        }\n      }\n      if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n          canvasService = doc.createElement('canvas');\n          canvasCtx = canvasService.getContext('2d');\n        }\n        var image = n;\n        var oldValue = image.crossOrigin;\n        image.crossOrigin = 'anonymous';\n        var recordInlineImage = function recordInlineImage() {\n          try {\n            canvasService.width = image.naturalWidth;\n            canvasService.height = image.naturalHeight;\n            canvasCtx.drawImage(image, 0, 0);\n            attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          } catch (err) {\n            console.warn(\"Cannot inline img src=\".concat(image.currentSrc, \"! Error: \").concat(err));\n          }\n          oldValue ? attributes.crossOrigin = oldValue : delete attributes.crossOrigin;\n        };\n        if (image.complete && image.naturalWidth !== 0) recordInlineImage();else image.onload = recordInlineImage;\n      }\n      if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = n.paused ? 'paused' : 'played';\n        attributes.rr_mediaCurrentTime = n.currentTime;\n      }\n      if (n.scrollLeft) {\n        attributes.rr_scrollLeft = n.scrollLeft;\n      }\n      if (n.scrollTop) {\n        attributes.rr_scrollTop = n.scrollTop;\n      }\n      if (needBlock) {\n        var _n$getBoundingClientR = n.getBoundingClientRect(),\n          width = _n$getBoundingClientR.width,\n          height = _n$getBoundingClientR.height;\n        attributes = {\n          class: attributes.class,\n          rr_width: \"\".concat(width, \"px\"),\n          rr_height: \"\".concat(height, \"px\")\n        };\n      }\n      if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n        if (!n.contentDocument) {\n          attributes.rr_src = attributes.src;\n        }\n        delete attributes.src;\n      }\n      return {\n        type: NodeType$1.Element,\n        tagName: tagName,\n        attributes: attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock: needBlock,\n        rootId: rootId\n      };\n    case n.TEXT_NODE:\n      var parentTagName = n.parentNode && n.parentNode.tagName;\n      var textContent = n.textContent;\n      var isStyle = parentTagName === 'STYLE' ? true : undefined;\n      var isScript = parentTagName === 'SCRIPT' ? true : undefined;\n      if (isStyle && textContent) {\n        try {\n          if (n.nextSibling || n.previousSibling) {} else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n            textContent = stringifyStyleSheet(n.parentNode.sheet);\n          }\n        } catch (err) {\n          console.warn(\"Cannot get CSS styles from text's parentNode. Error: \".concat(err), n);\n        }\n        textContent = absoluteToStylesheet(textContent, getHref());\n      }\n      if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n      }\n      if (parentTagName === 'TEXTAREA' && textContent) {\n        textContent = '';\n      } else if (parentTagName === 'OPTION' && textContent) {\n        var option = n.parentNode;\n        textContent = maskInputValue({\n          input: option,\n          type: null,\n          tagName: parentTagName,\n          value: textContent,\n          maskInputSelector: maskInputSelector,\n          unmaskInputSelector: unmaskInputSelector,\n          maskInputOptions: maskInputOptions,\n          maskInputFn: maskInputFn\n        });\n      } else if (!isStyle && !isScript && needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) && textContent) {\n        textContent = maskTextFn ? maskTextFn(textContent) : defaultMaskFn(textContent);\n      }\n      return {\n        type: NodeType$1.Text,\n        textContent: textContent || '',\n        isStyle: isStyle,\n        rootId: rootId\n      };\n    case n.CDATA_SECTION_NODE:\n      return {\n        type: NodeType$1.CDATA,\n        textContent: '',\n        rootId: rootId\n      };\n    case n.COMMENT_NODE:\n      return {\n        type: NodeType$1.Comment,\n        textContent: n.textContent || '',\n        rootId: rootId\n      };\n    default:\n      return false;\n  }\n}\nfunction lowerIfExists(maybeAttr) {\n  if (maybeAttr === undefined || maybeAttr === null) {\n    return '';\n  } else {\n    return maybeAttr.toLowerCase();\n  }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n  if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {\n    return true;\n  } else if (sn.type === NodeType$1.Element) {\n    if (slimDOMOptions.script && (sn.tagName === 'script' || sn.tagName === 'link' && (sn.attributes.rel === 'preload' || sn.attributes.rel === 'modulepreload') && sn.attributes.as === 'script' || sn.tagName === 'link' && sn.attributes.rel === 'prefetch' && typeof sn.attributes.href === 'string' && sn.attributes.href.endsWith('.js'))) {\n      return true;\n    } else if (slimDOMOptions.headFavicon && (sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon' || sn.tagName === 'meta' && (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) || lowerIfExists(sn.attributes.name) === 'application-name' || lowerIfExists(sn.attributes.rel) === 'icon' || lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' || lowerIfExists(sn.attributes.rel) === 'shortcut icon'))) {\n      return true;\n    } else if (sn.tagName === 'meta') {\n      if (slimDOMOptions.headMetaDescKeywords && lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n        return true;\n      } else if (slimDOMOptions.headMetaSocial && (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) || lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) || lowerIfExists(sn.attributes.name) === 'pinterest')) {\n        return true;\n      } else if (slimDOMOptions.headMetaRobots && (lowerIfExists(sn.attributes.name) === 'robots' || lowerIfExists(sn.attributes.name) === 'googlebot' || lowerIfExists(sn.attributes.name) === 'bingbot')) {\n        return true;\n      } else if (slimDOMOptions.headMetaHttpEquiv && sn.attributes['http-equiv'] !== undefined) {\n        return true;\n      } else if (slimDOMOptions.headMetaAuthorship && (lowerIfExists(sn.attributes.name) === 'author' || lowerIfExists(sn.attributes.name) === 'generator' || lowerIfExists(sn.attributes.name) === 'framework' || lowerIfExists(sn.attributes.name) === 'publisher' || lowerIfExists(sn.attributes.name) === 'progid' || lowerIfExists(sn.attributes.property).match(/^article:/) || lowerIfExists(sn.attributes.property).match(/^product:/))) {\n        return true;\n      } else if (slimDOMOptions.headMetaVerification && (lowerIfExists(sn.attributes.name) === 'google-site-verification' || lowerIfExists(sn.attributes.name) === 'yandex-verification' || lowerIfExists(sn.attributes.name) === 'csrf-token' || lowerIfExists(sn.attributes.name) === 'p:domain_verify' || lowerIfExists(sn.attributes.name) === 'verify-v1' || lowerIfExists(sn.attributes.name) === 'verification' || lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction serializeNodeWithId(n, options) {\n  var doc = options.doc,\n    map = options.map,\n    blockClass = options.blockClass,\n    blockSelector = options.blockSelector,\n    unblockSelector = options.unblockSelector,\n    maskTextClass = options.maskTextClass,\n    maskTextSelector = options.maskTextSelector,\n    unmaskTextSelector = options.unmaskTextSelector,\n    _options$skipChild = options.skipChild,\n    skipChild = _options$skipChild === void 0 ? false : _options$skipChild,\n    _options$inlineStyles = options.inlineStylesheet,\n    inlineStylesheet = _options$inlineStyles === void 0 ? true : _options$inlineStyles,\n    maskInputSelector = options.maskInputSelector,\n    unmaskInputSelector = options.unmaskInputSelector,\n    maskAllText = options.maskAllText,\n    _options$maskInputOpt2 = options.maskInputOptions,\n    maskInputOptions = _options$maskInputOpt2 === void 0 ? {} : _options$maskInputOpt2,\n    maskTextFn = options.maskTextFn,\n    maskInputFn = options.maskInputFn,\n    slimDOMOptions = options.slimDOMOptions,\n    _options$dataURLOptio2 = options.dataURLOptions,\n    dataURLOptions = _options$dataURLOptio2 === void 0 ? {} : _options$dataURLOptio2,\n    _options$inlineImages = options.inlineImages,\n    inlineImages = _options$inlineImages === void 0 ? false : _options$inlineImages,\n    _options$recordCanvas = options.recordCanvas,\n    recordCanvas = _options$recordCanvas === void 0 ? false : _options$recordCanvas,\n    onSerialize = options.onSerialize,\n    onIframeLoad = options.onIframeLoad,\n    _options$iframeLoadTi = options.iframeLoadTimeout,\n    iframeLoadTimeout = _options$iframeLoadTi === void 0 ? 5000 : _options$iframeLoadTi,\n    _options$keepIframeSr = options.keepIframeSrcFn,\n    keepIframeSrcFn = _options$keepIframeSr === void 0 ? function () {\n      return false;\n    } : _options$keepIframeSr;\n  var _options$preserveWhit = options.preserveWhiteSpace,\n    preserveWhiteSpace = _options$preserveWhit === void 0 ? true : _options$preserveWhit;\n  var _serializedNode = serializeNode(n, {\n    doc: doc,\n    blockClass: blockClass,\n    blockSelector: blockSelector,\n    unblockSelector: unblockSelector,\n    maskTextClass: maskTextClass,\n    maskTextSelector: maskTextSelector,\n    unmaskTextSelector: unmaskTextSelector,\n    inlineStylesheet: inlineStylesheet,\n    maskInputSelector: maskInputSelector,\n    unmaskInputSelector: unmaskInputSelector,\n    maskAllText: maskAllText,\n    maskInputOptions: maskInputOptions,\n    maskTextFn: maskTextFn,\n    maskInputFn: maskInputFn,\n    dataURLOptions: dataURLOptions,\n    inlineImages: inlineImages,\n    recordCanvas: recordCanvas,\n    keepIframeSrcFn: keepIframeSrcFn\n  });\n  if (!_serializedNode) {\n    console.warn(n, 'not serialized');\n    return null;\n  }\n  var id;\n  if ('__sn' in n) {\n    id = n.__sn.id;\n  } else if (slimDOMExcluded(_serializedNode, slimDOMOptions) || !preserveWhiteSpace && _serializedNode.type === NodeType$1.Text && !_serializedNode.isStyle && !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length) {\n    id = IGNORED_NODE;\n  } else {\n    id = genId();\n  }\n  var serializedNode = Object.assign(_serializedNode, {\n    id: id\n  });\n  n.__sn = serializedNode;\n  if (id === IGNORED_NODE) {\n    return null;\n  }\n  map[id] = n;\n  if (onSerialize) {\n    onSerialize(n);\n  }\n  var recordChild = !skipChild;\n  if (serializedNode.type === NodeType$1.Element) {\n    recordChild = recordChild && !serializedNode.needBlock;\n    delete serializedNode.needBlock;\n    if (n.shadowRoot) serializedNode.isShadowHost = true;\n  }\n  if ((serializedNode.type === NodeType$1.Document || serializedNode.type === NodeType$1.Element) && recordChild) {\n    if (slimDOMOptions.headWhitespace && _serializedNode.type === NodeType$1.Element && _serializedNode.tagName === 'head') {\n      preserveWhiteSpace = false;\n    }\n    var bypassOptions = {\n      doc: doc,\n      map: map,\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      unblockSelector: unblockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      unmaskTextSelector: unmaskTextSelector,\n      skipChild: skipChild,\n      inlineStylesheet: inlineStylesheet,\n      maskInputSelector: maskInputSelector,\n      unmaskInputSelector: unmaskInputSelector,\n      maskAllText: maskAllText,\n      maskInputOptions: maskInputOptions,\n      maskTextFn: maskTextFn,\n      maskInputFn: maskInputFn,\n      slimDOMOptions: slimDOMOptions,\n      dataURLOptions: dataURLOptions,\n      inlineImages: inlineImages,\n      recordCanvas: recordCanvas,\n      preserveWhiteSpace: preserveWhiteSpace,\n      onSerialize: onSerialize,\n      onIframeLoad: onIframeLoad,\n      iframeLoadTimeout: iframeLoadTimeout,\n      keepIframeSrcFn: keepIframeSrcFn\n    };\n    for (var _i2 = 0, _Array$from2 = Array.from(n.childNodes); _i2 < _Array$from2.length; _i2++) {\n      var childN = _Array$from2[_i2];\n      var serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n      if (serializedChildNode) {\n        serializedNode.childNodes.push(serializedChildNode);\n      }\n    }\n    if (isElement(n) && n.shadowRoot) {\n      for (var _i3 = 0, _Array$from3 = Array.from(n.shadowRoot.childNodes); _i3 < _Array$from3.length; _i3++) {\n        var _childN = _Array$from3[_i3];\n        var _serializedChildNode = serializeNodeWithId(_childN, bypassOptions);\n        if (_serializedChildNode) {\n          _serializedChildNode.isShadow = true;\n          serializedNode.childNodes.push(_serializedChildNode);\n        }\n      }\n    }\n  }\n  if (n.parentNode && isShadowRoot(n.parentNode)) {\n    serializedNode.isShadow = true;\n  }\n  if (serializedNode.type === NodeType$1.Element && serializedNode.tagName === 'iframe') {\n    onceIframeLoaded(n, function () {\n      var iframeDoc = n.contentDocument;\n      if (iframeDoc && onIframeLoad) {\n        var serializedIframeNode = serializeNodeWithId(iframeDoc, {\n          doc: iframeDoc,\n          map: map,\n          blockClass: blockClass,\n          blockSelector: blockSelector,\n          unblockSelector: unblockSelector,\n          maskTextClass: maskTextClass,\n          maskTextSelector: maskTextSelector,\n          unmaskTextSelector: unmaskTextSelector,\n          skipChild: false,\n          inlineStylesheet: inlineStylesheet,\n          maskInputSelector: maskInputSelector,\n          unmaskInputSelector: unmaskInputSelector,\n          maskAllText: maskAllText,\n          maskInputOptions: maskInputOptions,\n          maskTextFn: maskTextFn,\n          maskInputFn: maskInputFn,\n          slimDOMOptions: slimDOMOptions,\n          dataURLOptions: dataURLOptions,\n          inlineImages: inlineImages,\n          recordCanvas: recordCanvas,\n          preserveWhiteSpace: preserveWhiteSpace,\n          onSerialize: onSerialize,\n          onIframeLoad: onIframeLoad,\n          iframeLoadTimeout: iframeLoadTimeout,\n          keepIframeSrcFn: keepIframeSrcFn\n        });\n        if (serializedIframeNode) {\n          onIframeLoad(n, serializedIframeNode);\n        }\n      }\n    }, iframeLoadTimeout);\n  }\n  return serializedNode;\n}\nfunction snapshot(n, options) {\n  var _ref4 = options || {},\n    _ref4$blockClass = _ref4.blockClass,\n    blockClass = _ref4$blockClass === void 0 ? 'rr-block' : _ref4$blockClass,\n    _ref4$blockSelector = _ref4.blockSelector,\n    blockSelector = _ref4$blockSelector === void 0 ? null : _ref4$blockSelector,\n    _ref4$unblockSelector = _ref4.unblockSelector,\n    unblockSelector = _ref4$unblockSelector === void 0 ? null : _ref4$unblockSelector,\n    _ref4$maskTextClass = _ref4.maskTextClass,\n    maskTextClass = _ref4$maskTextClass === void 0 ? 'rr-mask' : _ref4$maskTextClass,\n    _ref4$maskTextSelecto = _ref4.maskTextSelector,\n    maskTextSelector = _ref4$maskTextSelecto === void 0 ? null : _ref4$maskTextSelecto,\n    _ref4$unmaskTextSelec = _ref4.unmaskTextSelector,\n    unmaskTextSelector = _ref4$unmaskTextSelec === void 0 ? null : _ref4$unmaskTextSelec,\n    _ref4$inlineStyleshee = _ref4.inlineStylesheet,\n    inlineStylesheet = _ref4$inlineStyleshee === void 0 ? true : _ref4$inlineStyleshee,\n    _ref4$inlineImages = _ref4.inlineImages,\n    inlineImages = _ref4$inlineImages === void 0 ? false : _ref4$inlineImages,\n    _ref4$recordCanvas = _ref4.recordCanvas,\n    recordCanvas = _ref4$recordCanvas === void 0 ? false : _ref4$recordCanvas,\n    _ref4$maskInputSelect = _ref4.maskInputSelector,\n    maskInputSelector = _ref4$maskInputSelect === void 0 ? null : _ref4$maskInputSelect,\n    _ref4$unmaskInputSele = _ref4.unmaskInputSelector,\n    unmaskInputSelector = _ref4$unmaskInputSele === void 0 ? null : _ref4$unmaskInputSele,\n    _ref4$maskAllText = _ref4.maskAllText,\n    maskAllText = _ref4$maskAllText === void 0 ? false : _ref4$maskAllText,\n    _ref4$maskAllInputs = _ref4.maskAllInputs,\n    maskAllInputs = _ref4$maskAllInputs === void 0 ? false : _ref4$maskAllInputs,\n    maskTextFn = _ref4.maskTextFn,\n    maskInputFn = _ref4.maskInputFn,\n    _ref4$slimDOM = _ref4.slimDOM,\n    slimDOM = _ref4$slimDOM === void 0 ? false : _ref4$slimDOM,\n    dataURLOptions = _ref4.dataURLOptions,\n    preserveWhiteSpace = _ref4.preserveWhiteSpace,\n    onSerialize = _ref4.onSerialize,\n    onIframeLoad = _ref4.onIframeLoad,\n    iframeLoadTimeout = _ref4.iframeLoadTimeout,\n    _ref4$keepIframeSrcFn = _ref4.keepIframeSrcFn,\n    keepIframeSrcFn = _ref4$keepIframeSrcFn === void 0 ? function () {\n      return false;\n    } : _ref4$keepIframeSrcFn;\n  var idNodeMap = {};\n  var maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true\n  } : maskAllInputs === false ? {} : maskAllInputs;\n  var slimDOMOptions = slimDOM === true || slimDOM === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaDescKeywords: slimDOM === 'all',\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaAuthorship: true,\n    headMetaVerification: true\n  } : slimDOM === false ? {} : slimDOM;\n  return [serializeNodeWithId(n, {\n    doc: n,\n    map: idNodeMap,\n    blockClass: blockClass,\n    blockSelector: blockSelector,\n    unblockSelector: unblockSelector,\n    maskTextClass: maskTextClass,\n    maskTextSelector: maskTextSelector,\n    unmaskTextSelector: unmaskTextSelector,\n    skipChild: false,\n    inlineStylesheet: inlineStylesheet,\n    maskInputSelector: maskInputSelector,\n    unmaskInputSelector: unmaskInputSelector,\n    maskAllText: maskAllText,\n    maskInputOptions: maskInputOptions,\n    maskTextFn: maskTextFn,\n    maskInputFn: maskInputFn,\n    slimDOMOptions: slimDOMOptions,\n    dataURLOptions: dataURLOptions,\n    inlineImages: inlineImages,\n    recordCanvas: recordCanvas,\n    preserveWhiteSpace: preserveWhiteSpace,\n    onSerialize: onSerialize,\n    onIframeLoad: onIframeLoad,\n    iframeLoadTimeout: iframeLoadTimeout,\n    keepIframeSrcFn: keepIframeSrcFn\n  }), idNodeMap];\n}\nfunction skipAttribute(tagName, attributeName, value) {\n  return (tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay';\n}\nvar EventType$1;\n(function (EventType) {\n  EventType[EventType[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType[EventType[\"Load\"] = 1] = \"Load\";\n  EventType[EventType[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType[EventType[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType[EventType[\"Meta\"] = 4] = \"Meta\";\n  EventType[EventType[\"Custom\"] = 5] = \"Custom\";\n  EventType[EventType[\"Plugin\"] = 6] = \"Plugin\";\n})(EventType$1 || (EventType$1 = {}));\nvar IncrementalSource;\n(function (IncrementalSource) {\n  IncrementalSource[IncrementalSource[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource[IncrementalSource[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource[IncrementalSource[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource[IncrementalSource[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource[IncrementalSource[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource[IncrementalSource[\"Input\"] = 5] = \"Input\";\n  IncrementalSource[IncrementalSource[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource[IncrementalSource[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource[IncrementalSource[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource[IncrementalSource[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource[IncrementalSource[\"Font\"] = 10] = \"Font\";\n  IncrementalSource[IncrementalSource[\"Log\"] = 11] = \"Log\";\n  IncrementalSource[IncrementalSource[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource[IncrementalSource[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n})(IncrementalSource || (IncrementalSource = {}));\nvar MouseInteractions;\n(function (MouseInteractions) {\n  MouseInteractions[MouseInteractions[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions[MouseInteractions[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions[MouseInteractions[\"Click\"] = 2] = \"Click\";\n  MouseInteractions[MouseInteractions[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions[MouseInteractions[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions[MouseInteractions[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions[MouseInteractions[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions[MouseInteractions[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions[MouseInteractions[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions[MouseInteractions[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions[MouseInteractions[\"TouchCancel\"] = 10] = \"TouchCancel\";\n})(MouseInteractions || (MouseInteractions = {}));\nvar CanvasContext;\n(function (CanvasContext) {\n  CanvasContext[CanvasContext[\"2D\"] = 0] = \"2D\";\n  CanvasContext[CanvasContext[\"WebGL\"] = 1] = \"WebGL\";\n  CanvasContext[CanvasContext[\"WebGL2\"] = 2] = \"WebGL2\";\n})(CanvasContext || (CanvasContext = {}));\nvar MediaInteractions;\n(function (MediaInteractions) {\n  MediaInteractions[MediaInteractions[\"Play\"] = 0] = \"Play\";\n  MediaInteractions[MediaInteractions[\"Pause\"] = 1] = \"Pause\";\n  MediaInteractions[MediaInteractions[\"Seeked\"] = 2] = \"Seeked\";\n  MediaInteractions[MediaInteractions[\"VolumeChange\"] = 3] = \"VolumeChange\";\n})(MediaInteractions || (MediaInteractions = {}));\nvar ReplayerEvents;\n(function (ReplayerEvents) {\n  ReplayerEvents[\"Start\"] = \"start\";\n  ReplayerEvents[\"Pause\"] = \"pause\";\n  ReplayerEvents[\"Resume\"] = \"resume\";\n  ReplayerEvents[\"Resize\"] = \"resize\";\n  ReplayerEvents[\"Finish\"] = \"finish\";\n  ReplayerEvents[\"FullsnapshotRebuilded\"] = \"fullsnapshot-rebuilded\";\n  ReplayerEvents[\"LoadStylesheetStart\"] = \"load-stylesheet-start\";\n  ReplayerEvents[\"LoadStylesheetEnd\"] = \"load-stylesheet-end\";\n  ReplayerEvents[\"SkipStart\"] = \"skip-start\";\n  ReplayerEvents[\"SkipEnd\"] = \"skip-end\";\n  ReplayerEvents[\"MouseInteraction\"] = \"mouse-interaction\";\n  ReplayerEvents[\"EventCast\"] = \"event-cast\";\n  ReplayerEvents[\"CustomEvent\"] = \"custom-event\";\n  ReplayerEvents[\"Flush\"] = \"flush\";\n  ReplayerEvents[\"StateChange\"] = \"state-change\";\n  ReplayerEvents[\"PlayBack\"] = \"play-back\";\n})(ReplayerEvents || (ReplayerEvents = {}));\nfunction on(type, fn) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  var options = {\n    capture: true,\n    passive: true\n  };\n  target.addEventListener(type, fn, options);\n  return function () {\n    return target.removeEventListener(type, fn, options);\n  };\n}\nfunction createMirror() {\n  return {\n    map: {},\n    getId: function getId(n) {\n      if (!n || !n.__sn) {\n        return -1;\n      }\n      return n.__sn.id;\n    },\n    getNode: function getNode(id) {\n      return this.map[id] || null;\n    },\n    removeNodeFromMap: function removeNodeFromMap(n) {\n      var _this = this;\n      var id = n.__sn && n.__sn.id;\n      delete this.map[id];\n      if (n.childNodes) {\n        n.childNodes.forEach(function (child) {\n          return _this.removeNodeFromMap(child);\n        });\n      }\n    },\n    has: function has(id) {\n      return this.map.hasOwnProperty(id);\n    },\n    reset: function reset() {\n      this.map = {};\n    }\n  };\n}\nvar DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' + '\\r\\n' + 'now you can use replayer.getMirror() to access the mirror instance of a replayer,' + '\\r\\n' + 'or you can use record.mirror to access the mirror instance during recording.';\nvar _mirror = {\n  map: {},\n  getId: function getId() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return -1;\n  },\n  getNode: function getNode() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return null;\n  },\n  removeNodeFromMap: function removeNodeFromMap() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  },\n  has: function has() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return false;\n  },\n  reset: function reset() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  }\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n  _mirror = new Proxy(_mirror, {\n    get: function get(target, prop, receiver) {\n      if (prop === 'map') {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  });\n}\nfunction throttle(func, wait) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout = null;\n  var previous = 0;\n  return function (arg) {\n    var now = Date.now();\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n    var remaining = wait - (now - previous);\n    var context = this;\n    var args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(function () {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        func.apply(context, args);\n      }, remaining);\n    }\n  };\n}\nfunction hookSetter(target, key, d, isRevoked) {\n  var win = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;\n  var original = win.Object.getOwnPropertyDescriptor(target, key);\n  win.Object.defineProperty(target, key, isRevoked ? d : {\n    set: function set(value) {\n      var _this2 = this;\n      setTimeout(function () {\n        d.set.call(_this2, value);\n      }, 0);\n      if (original && original.set) {\n        original.set.call(this, value);\n      }\n    }\n  });\n  return function () {\n    return hookSetter(target, key, original || {}, true);\n  };\n}\nfunction patch(source, name, replacement) {\n  try {\n    if (!(name in source)) {\n      return function () {};\n    }\n    var original = source[name];\n    var wrapped = replacement(original);\n    if (typeof wrapped === 'function') {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __rrweb_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    }\n    source[name] = wrapped;\n    return function () {\n      source[name] = original;\n    };\n  } catch (_a) {\n    return function () {};\n  }\n}\nfunction getWindowHeight() {\n  return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight;\n}\nfunction getWindowWidth() {\n  return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector) {\n  if (!node) {\n    return false;\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    var needBlock = false;\n    var needUnblock = unblockSelector && node.matches(unblockSelector);\n    if (typeof blockClass === 'string') {\n      if (node.closest !== undefined) {\n        needBlock = !needUnblock && node.closest('.' + blockClass) !== null;\n      } else {\n        needBlock = !needUnblock && node.classList.contains(blockClass);\n      }\n    } else {\n      !needUnblock && node.classList.forEach(function (className) {\n        if (blockClass.test(className)) {\n          needBlock = true;\n        }\n      });\n    }\n    if (!needBlock && blockSelector) {\n      needBlock = node.matches(blockSelector);\n    }\n    return !needUnblock && needBlock || isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n  }\n  if (node.nodeType === node.TEXT_NODE) {\n    return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n  }\n  return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n}\nfunction isIgnored(n) {\n  if ('__sn' in n) {\n    return n.__sn.id === IGNORED_NODE;\n  }\n  return false;\n}\nfunction isAncestorRemoved(target, mirror) {\n  if (isShadowRoot(target)) {\n    return false;\n  }\n  var id = mirror.getId(target);\n  if (!mirror.has(id)) {\n    return true;\n  }\n  if (target.parentNode && target.parentNode.nodeType === target.DOCUMENT_NODE) {\n    return false;\n  }\n  if (!target.parentNode) {\n    return true;\n  }\n  return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction isTouchEvent(event) {\n  return Boolean(event.changedTouches);\n}\nfunction polyfill() {\n  var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n    win.NodeList.prototype.forEach = Array.prototype.forEach;\n  }\n  if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n    win.DOMTokenList.prototype.forEach = Array.prototype.forEach;\n  }\n  if (!Node.prototype.contains) {\n    Node.prototype.contains = function contains(node) {\n      if (!(0 in arguments)) {\n        throw new TypeError('1 argument is required');\n      }\n      do {\n        if (this === node) {\n          return true;\n        }\n      } while (node = node && node.parentNode);\n      return false;\n    };\n  }\n}\nfunction isIframeINode(node) {\n  if ('__sn' in node) {\n    return node.__sn.type === NodeType$1.Element && node.__sn.tagName === 'iframe';\n  }\n  return false;\n}\nfunction hasShadowRoot(n) {\n  return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);\n}\nfunction isNodeInLinkedList(n) {\n  return '__ln' in n;\n}\nvar DoubleLinkedList = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function DoubleLinkedList() {\n    _classCallCheck(this, DoubleLinkedList);\n    this.length = 0;\n    this.head = null;\n  }\n  _createClass(DoubleLinkedList, [{\n    key: \"get\",\n    value: function get(position) {\n      if (position >= this.length) {\n        throw new Error('Position outside of list range');\n      }\n      var current = this.head;\n      for (var index = 0; index < position; index++) {\n        current = (current === null || current === void 0 ? void 0 : current.next) || null;\n      }\n      return current;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(n) {\n      var node = {\n        value: n,\n        previous: null,\n        next: null\n      };\n      n.__ln = node;\n      if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n        var current = n.previousSibling.__ln.next;\n        node.next = current;\n        node.previous = n.previousSibling.__ln;\n        n.previousSibling.__ln.next = node;\n        if (current) {\n          current.previous = node;\n        }\n      } else if (n.nextSibling && isNodeInLinkedList(n.nextSibling) && n.nextSibling.__ln.previous) {\n        var _current = n.nextSibling.__ln.previous;\n        node.previous = _current;\n        node.next = n.nextSibling.__ln;\n        n.nextSibling.__ln.previous = node;\n        if (_current) {\n          _current.next = node;\n        }\n      } else {\n        if (this.head) {\n          this.head.previous = node;\n        }\n        node.next = this.head;\n        this.head = node;\n      }\n      this.length++;\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(n) {\n      var current = n.__ln;\n      if (!this.head) {\n        return;\n      }\n      if (!current.previous) {\n        this.head = current.next;\n        if (this.head) {\n          this.head.previous = null;\n        }\n      } else {\n        current.previous.next = current.next;\n        if (current.next) {\n          current.next.previous = current.previous;\n        }\n      }\n      if (n.__ln) {\n        delete n.__ln;\n      }\n      this.length--;\n    }\n  }]);\n  return DoubleLinkedList;\n}();\nvar moveKey = function moveKey(id, parentId) {\n  return \"\".concat(id, \"@\").concat(parentId);\n};\nfunction isINode(n) {\n  return '__sn' in n;\n}\nvar MutationBuffer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function MutationBuffer() {\n    var _this3 = this;\n    _classCallCheck(this, MutationBuffer);\n    this.frozen = false;\n    this.locked = false;\n    this.texts = [];\n    this.attributes = [];\n    this.removes = [];\n    this.mapRemoves = [];\n    this.movedMap = {};\n    this.addedSet = new Set();\n    this.movedSet = new Set();\n    this.droppedSet = new Set();\n    this.processMutations = function (mutations) {\n      mutations.forEach(_this3.processMutation);\n      _this3.emit();\n    };\n    this.emit = function () {\n      if (_this3.frozen || _this3.locked) {\n        return;\n      }\n      var adds = [];\n      var addList = new DoubleLinkedList();\n      var getNextId = function getNextId(n) {\n        var ns = n;\n        var nextId = IGNORED_NODE;\n        while (nextId === IGNORED_NODE) {\n          ns = ns && ns.nextSibling;\n          nextId = ns && _this3.mirror.getId(ns);\n        }\n        return nextId;\n      };\n      var pushAdd = function pushAdd(n) {\n        var _a, _b, _c, _d, _e;\n        var shadowHost = n.getRootNode ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host : null;\n        var rootShadowHost = shadowHost;\n        while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host) rootShadowHost = ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) || null;\n        var notInDoc = !_this3.doc.contains(n) && (!rootShadowHost || !_this3.doc.contains(rootShadowHost));\n        if (!n.parentNode || notInDoc) {\n          return;\n        }\n        var parentId = isShadowRoot(n.parentNode) ? _this3.mirror.getId(shadowHost) : _this3.mirror.getId(n.parentNode);\n        var nextId = getNextId(n);\n        if (parentId === -1 || nextId === -1) {\n          return addList.addNode(n);\n        }\n        var sn = serializeNodeWithId(n, {\n          doc: _this3.doc,\n          map: _this3.mirror.map,\n          blockClass: _this3.blockClass,\n          blockSelector: _this3.blockSelector,\n          unblockSelector: _this3.unblockSelector,\n          maskTextClass: _this3.maskTextClass,\n          maskTextSelector: _this3.maskTextSelector,\n          unmaskTextSelector: _this3.unmaskTextSelector,\n          maskInputSelector: _this3.maskInputSelector,\n          unmaskInputSelector: _this3.unmaskInputSelector,\n          skipChild: true,\n          inlineStylesheet: _this3.inlineStylesheet,\n          maskAllText: _this3.maskAllText,\n          maskInputOptions: _this3.maskInputOptions,\n          maskTextFn: _this3.maskTextFn,\n          maskInputFn: _this3.maskInputFn,\n          slimDOMOptions: _this3.slimDOMOptions,\n          recordCanvas: _this3.recordCanvas,\n          inlineImages: _this3.inlineImages,\n          onSerialize: function onSerialize(currentN) {\n            if (isIframeINode(currentN)) {\n              _this3.iframeManager.addIframe(currentN);\n            }\n            if (hasShadowRoot(n)) {\n              _this3.shadowDomManager.addShadowRoot(n.shadowRoot, document);\n            }\n          },\n          onIframeLoad: function onIframeLoad(iframe, childSn) {\n            _this3.iframeManager.attachIframe(iframe, childSn);\n            _this3.shadowDomManager.observeAttachShadow(iframe);\n          }\n        });\n        if (sn) {\n          adds.push({\n            parentId: parentId,\n            nextId: nextId,\n            node: sn\n          });\n        }\n      };\n      while (_this3.mapRemoves.length) {\n        _this3.mirror.removeNodeFromMap(_this3.mapRemoves.shift());\n      }\n      var _iterator2 = _createForOfIteratorHelper(_this3.movedSet),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var n = _step2.value;\n          if (isParentRemoved(_this3.removes, n, _this3.mirror) && !_this3.movedSet.has(n.parentNode)) {\n            continue;\n          }\n          pushAdd(n);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(_this3.addedSet),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _n = _step3.value;\n          if (!isAncestorInSet(_this3.droppedSet, _n) && !isParentRemoved(_this3.removes, _n, _this3.mirror)) {\n            pushAdd(_n);\n          } else if (isAncestorInSet(_this3.movedSet, _n)) {\n            pushAdd(_n);\n          } else {\n            _this3.droppedSet.add(_n);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var candidate = null;\n      while (addList.length) {\n        var node = null;\n        if (candidate) {\n          var parentId = _this3.mirror.getId(candidate.value.parentNode);\n          var nextId = getNextId(candidate.value);\n          if (parentId !== -1 && nextId !== -1) {\n            node = candidate;\n          }\n        }\n        if (!node) {\n          for (var index = addList.length - 1; index >= 0; index--) {\n            var _node = addList.get(index);\n            if (_node) {\n              var _parentId = _this3.mirror.getId(_node.value.parentNode);\n              var _nextId = getNextId(_node.value);\n              if (_parentId !== -1 && _nextId !== -1) {\n                node = _node;\n                break;\n              }\n            }\n          }\n        }\n        if (!node) {\n          while (addList.head) {\n            addList.removeNode(addList.head.value);\n          }\n          break;\n        }\n        candidate = node.previous;\n        addList.removeNode(node.value);\n        pushAdd(node.value);\n      }\n      var payload = {\n        texts: _this3.texts.map(function (text) {\n          return {\n            id: _this3.mirror.getId(text.node),\n            value: text.value\n          };\n        }).filter(function (text) {\n          return _this3.mirror.has(text.id);\n        }),\n        attributes: _this3.attributes.map(function (attribute) {\n          return {\n            id: _this3.mirror.getId(attribute.node),\n            attributes: attribute.attributes\n          };\n        }).filter(function (attribute) {\n          return _this3.mirror.has(attribute.id);\n        }),\n        removes: _this3.removes,\n        adds: adds\n      };\n      if (!payload.texts.length && !payload.attributes.length && !payload.removes.length && !payload.adds.length) {\n        return;\n      }\n      _this3.texts = [];\n      _this3.attributes = [];\n      _this3.removes = [];\n      _this3.addedSet = new Set();\n      _this3.movedSet = new Set();\n      _this3.droppedSet = new Set();\n      _this3.movedMap = {};\n      _this3.mutationCb(payload);\n    };\n    this.processMutation = function (m) {\n      if (isIgnored(m.target)) {\n        return;\n      }\n      switch (m.type) {\n        case 'characterData':\n          {\n            var value = m.target.textContent;\n            if (!isBlocked(m.target, _this3.blockClass, _this3.blockSelector, _this3.unblockSelector) && value !== m.oldValue) {\n              _this3.texts.push({\n                value: needMaskingText(m.target, _this3.maskTextClass, _this3.maskTextSelector, _this3.unmaskTextSelector, _this3.maskAllText) && value ? _this3.maskTextFn ? _this3.maskTextFn(value) : value.replace(/[\\S]/g, '*') : value,\n                node: m.target\n              });\n            }\n            break;\n          }\n        case 'attributes':\n          {\n            var target = m.target;\n            var _value2 = target.getAttribute(m.attributeName);\n            if (m.attributeName === 'value') {\n              _value2 = maskInputValue({\n                input: target,\n                maskInputSelector: _this3.maskInputSelector,\n                unmaskInputSelector: _this3.unmaskInputSelector,\n                maskInputOptions: _this3.maskInputOptions,\n                tagName: target.tagName,\n                type: target.getAttribute('type'),\n                value: _value2,\n                maskInputFn: _this3.maskInputFn\n              });\n            }\n            if (isBlocked(m.target, _this3.blockClass, _this3.blockSelector, _this3.unblockSelector) || _value2 === m.oldValue) {\n              return;\n            }\n            var item = _this3.attributes.find(function (a) {\n              return a.node === m.target;\n            });\n            if (!item) {\n              item = {\n                node: m.target,\n                attributes: {}\n              };\n              _this3.attributes.push(item);\n            }\n            if (m.attributeName === 'type' && target.tagName === 'INPUT' && (m.oldValue || '').toLowerCase() === 'password') {\n              target.setAttribute('data-rr-is-password', 'true');\n            }\n            if (m.attributeName === 'style') {\n              var old = _this3.doc.createElement('span');\n              if (m.oldValue) {\n                old.setAttribute('style', m.oldValue);\n              }\n              if (item.attributes.style === undefined || item.attributes.style === null) {\n                item.attributes.style = {};\n              }\n              try {\n                var styleObj = item.attributes.style;\n                for (var _i4 = 0, _Array$from4 = Array.from(target.style); _i4 < _Array$from4.length; _i4++) {\n                  var pname = _Array$from4[_i4];\n                  var newValue = target.style.getPropertyValue(pname);\n                  var newPriority = target.style.getPropertyPriority(pname);\n                  if (newValue !== old.style.getPropertyValue(pname) || newPriority !== old.style.getPropertyPriority(pname)) {\n                    if (newPriority === '') {\n                      styleObj[pname] = newValue;\n                    } else {\n                      styleObj[pname] = [newValue, newPriority];\n                    }\n                  }\n                }\n                for (var _i5 = 0, _Array$from5 = Array.from(old.style); _i5 < _Array$from5.length; _i5++) {\n                  var _pname = _Array$from5[_i5];\n                  if (target.style.getPropertyValue(_pname) === '') {\n                    styleObj[_pname] = false;\n                  }\n                }\n              } catch (error) {\n                console.warn('[rrweb] Error when parsing update to style attribute:', error);\n              }\n            } else {\n              var element = m.target;\n              item.attributes[m.attributeName] = transformAttribute(_this3.doc, element, element.tagName, m.attributeName, _value2, _this3.maskAllText, _this3.unmaskTextSelector, _this3.maskTextFn);\n            }\n            break;\n          }\n        case 'childList':\n          {\n            m.addedNodes.forEach(function (n) {\n              return _this3.genAdds(n, m.target);\n            });\n            m.removedNodes.forEach(function (n) {\n              var nodeId = _this3.mirror.getId(n);\n              var parentId = isShadowRoot(m.target) ? _this3.mirror.getId(m.target.host) : _this3.mirror.getId(m.target);\n              if (isBlocked(m.target, _this3.blockClass, _this3.blockSelector, _this3.unblockSelector) || isIgnored(n)) {\n                return;\n              }\n              if (_this3.addedSet.has(n)) {\n                deepDelete(_this3.addedSet, n);\n                _this3.droppedSet.add(n);\n              } else if (_this3.addedSet.has(m.target) && nodeId === -1) ;else if (isAncestorRemoved(m.target, _this3.mirror)) ;else if (_this3.movedSet.has(n) && _this3.movedMap[moveKey(nodeId, parentId)]) {\n                deepDelete(_this3.movedSet, n);\n              } else {\n                _this3.removes.push({\n                  parentId: parentId,\n                  id: nodeId,\n                  isShadow: isShadowRoot(m.target) ? true : undefined\n                });\n              }\n              _this3.mapRemoves.push(n);\n            });\n            break;\n          }\n      }\n    };\n    this.genAdds = function (n, target) {\n      if (target && isBlocked(target, _this3.blockClass, _this3.blockSelector, _this3.unblockSelector)) {\n        return;\n      }\n      if (isINode(n)) {\n        if (isIgnored(n)) {\n          return;\n        }\n        _this3.movedSet.add(n);\n        var targetId = null;\n        if (target && isINode(target)) {\n          targetId = target.__sn.id;\n        }\n        if (targetId) {\n          _this3.movedMap[moveKey(n.__sn.id, targetId)] = true;\n        }\n      } else {\n        _this3.addedSet.add(n);\n        _this3.droppedSet.delete(n);\n      }\n      if (!isBlocked(n, _this3.blockClass, _this3.blockSelector, _this3.unblockSelector)) n.childNodes.forEach(function (childN) {\n        return _this3.genAdds(childN);\n      });\n    };\n  }\n  _createClass(MutationBuffer, [{\n    key: \"init\",\n    value: function init(options) {\n      var _this4 = this;\n      ['mutationCb', 'blockClass', 'blockSelector', 'unblockSelector', 'maskTextClass', 'maskTextSelector', 'unmaskTextSelector', 'maskInputSelector', 'unmaskInputSelector', 'inlineStylesheet', 'maskAllText', 'maskInputOptions', 'maskTextFn', 'maskInputFn', 'recordCanvas', 'inlineImages', 'slimDOMOptions', 'doc', 'mirror', 'iframeManager', 'shadowDomManager', 'canvasManager'].forEach(function (key) {\n        _this4[key] = options[key];\n      });\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      this.frozen = true;\n      this.canvasManager.freeze();\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      this.frozen = false;\n      this.canvasManager.unfreeze();\n      this.emit();\n    }\n  }, {\n    key: \"isFrozen\",\n    value: function isFrozen() {\n      return this.frozen;\n    }\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      this.locked = true;\n      this.canvasManager.lock();\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      this.locked = false;\n      this.canvasManager.unlock();\n      this.emit();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.shadowDomManager.reset();\n      this.canvasManager.reset();\n    }\n  }]);\n  return MutationBuffer;\n}();\nfunction deepDelete(addsSet, n) {\n  addsSet.delete(n);\n  n.childNodes.forEach(function (childN) {\n    return deepDelete(addsSet, childN);\n  });\n}\nfunction isParentRemoved(removes, n, mirror) {\n  var parentNode = n.parentNode;\n  if (!parentNode) {\n    return false;\n  }\n  var parentId = mirror.getId(parentNode);\n  if (removes.some(function (r) {\n    return r.id === parentId;\n  })) {\n    return true;\n  }\n  return isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n  var parentNode = n.parentNode;\n  if (!parentNode) {\n    return false;\n  }\n  if (set.has(parentNode)) {\n    return true;\n  }\n  return isAncestorInSet(set, parentNode);\n}\nvar callbackWrapper = function callbackWrapper(cb) {\n  var rrwebWrapped = function rrwebWrapped() {\n    try {\n      return cb.apply(void 0, arguments);\n    } catch (error) {\n      try {\n        error.__rrweb__ = true;\n      } catch (_a) {}\n      throw error;\n    }\n  };\n  return rrwebWrapped;\n};\nvar mutationBuffers = [];\nfunction getEventTarget(event) {\n  try {\n    if ('composedPath' in event) {\n      var path = event.composedPath();\n      if (path.length) {\n        return path[0];\n      }\n    } else if ('path' in event && event.path.length) {\n      return event.path[0];\n    }\n  } catch (_a) {}\n  return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n  var _a, _b;\n  var mutationBuffer = new MutationBuffer();\n  mutationBuffers.push(mutationBuffer);\n  mutationBuffer.init(options);\n  var mutationObserverCtor = window.MutationObserver || window.__rrMutationObserver;\n  var angularZoneSymbol = (_b = (_a = window === null || window === void 0 ? void 0 : window.Zone) === null || _a === void 0 ? void 0 : _a.__symbol__) === null || _b === void 0 ? void 0 : _b.call(_a, 'MutationObserver');\n  if (angularZoneSymbol && window[angularZoneSymbol]) {\n    mutationObserverCtor = window[angularZoneSymbol];\n  }\n  var observer = new mutationObserverCtor(callbackWrapper(function (mutations) {\n    if (options.onMutation && options.onMutation(mutations) === false) {\n      return;\n    }\n    mutationBuffer.processMutations(mutations);\n  }));\n  observer.observe(rootEl, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction initMoveObserver(_ref5) {\n  var mousemoveCb = _ref5.mousemoveCb,\n    sampling = _ref5.sampling,\n    doc = _ref5.doc,\n    mirror = _ref5.mirror;\n  if (sampling.mousemove === false) {\n    return function () {};\n  }\n  var threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n  var callbackThreshold = typeof sampling.mousemoveCallback === 'number' ? sampling.mousemoveCallback : 500;\n  var positions = [];\n  var timeBaseline;\n  var wrappedCb = throttle(function (source) {\n    var totalOffset = Date.now() - timeBaseline;\n    callbackWrapper(mousemoveCb)(positions.map(function (p) {\n      p.timeOffset -= totalOffset;\n      return p;\n    }), source);\n    positions = [];\n    timeBaseline = null;\n  }, callbackThreshold);\n  var updatePosition = throttle(function (evt) {\n    var target = getEventTarget(evt);\n    var _ref6 = isTouchEvent(evt) ? evt.changedTouches[0] : evt,\n      clientX = _ref6.clientX,\n      clientY = _ref6.clientY;\n    if (!timeBaseline) {\n      timeBaseline = Date.now();\n    }\n    positions.push({\n      x: clientX,\n      y: clientY,\n      id: mirror.getId(target),\n      timeOffset: Date.now() - timeBaseline\n    });\n    wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent ? IncrementalSource.Drag : evt instanceof MouseEvent ? IncrementalSource.MouseMove : IncrementalSource.TouchMove);\n  }, threshold, {\n    trailing: false\n  });\n  var handlers = [on('mousemove', callbackWrapper(updatePosition), doc), on('touchmove', callbackWrapper(updatePosition), doc), on('drag', callbackWrapper(updatePosition), doc)];\n  return callbackWrapper(function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction initMouseInteractionObserver(_ref7) {\n  var mouseInteractionCb = _ref7.mouseInteractionCb,\n    doc = _ref7.doc,\n    mirror = _ref7.mirror,\n    blockClass = _ref7.blockClass,\n    blockSelector = _ref7.blockSelector,\n    unblockSelector = _ref7.unblockSelector,\n    sampling = _ref7.sampling;\n  if (sampling.mouseInteraction === false) {\n    return function () {};\n  }\n  var disableMap = sampling.mouseInteraction === true || sampling.mouseInteraction === undefined ? {} : sampling.mouseInteraction;\n  var handlers = [];\n  var getHandler = function getHandler(eventKey) {\n    return function (event) {\n      var target = getEventTarget(event);\n      if (isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n        return;\n      }\n      var e = isTouchEvent(event) ? event.changedTouches[0] : event;\n      if (!e) {\n        return;\n      }\n      var id = mirror.getId(target);\n      var clientX = e.clientX,\n        clientY = e.clientY;\n      callbackWrapper(mouseInteractionCb)({\n        type: MouseInteractions[eventKey],\n        id: id,\n        x: clientX,\n        y: clientY\n      });\n    };\n  };\n  Object.keys(MouseInteractions).filter(function (key) {\n    return Number.isNaN(Number(key)) && !key.endsWith('_Departed') && disableMap[key] !== false;\n  }).forEach(function (eventKey) {\n    var eventName = eventKey.toLowerCase();\n    var handler = callbackWrapper(getHandler(eventKey));\n    handlers.push(on(eventName, handler, doc));\n  });\n  return callbackWrapper(function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction initScrollObserver(_ref8) {\n  var scrollCb = _ref8.scrollCb,\n    doc = _ref8.doc,\n    mirror = _ref8.mirror,\n    blockClass = _ref8.blockClass,\n    blockSelector = _ref8.blockSelector,\n    unblockSelector = _ref8.unblockSelector,\n    sampling = _ref8.sampling;\n  var updatePosition = throttle(function (evt) {\n    var target = getEventTarget(evt);\n    if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n      return;\n    }\n    var id = mirror.getId(target);\n    if (target === doc) {\n      var scrollEl = doc.scrollingElement || doc.documentElement;\n      callbackWrapper(scrollCb)({\n        id: id,\n        x: scrollEl.scrollLeft,\n        y: scrollEl.scrollTop\n      });\n    } else {\n      callbackWrapper(scrollCb)({\n        id: id,\n        x: target.scrollLeft,\n        y: target.scrollTop\n      });\n    }\n  }, sampling.scroll || 100);\n  return on('scroll', callbackWrapper(updatePosition), doc);\n}\nfunction initViewportResizeObserver(_ref9) {\n  var viewportResizeCb = _ref9.viewportResizeCb;\n  var lastH = -1;\n  var lastW = -1;\n  var updateDimension = throttle(function () {\n    var height = getWindowHeight();\n    var width = getWindowWidth();\n    if (lastH !== height || lastW !== width) {\n      callbackWrapper(viewportResizeCb)({\n        width: Number(width),\n        height: Number(height)\n      });\n      lastH = height;\n      lastW = width;\n    }\n  }, 200);\n  return on('resize', callbackWrapper(updateDimension), window);\n}\nfunction wrapEventWithUserTriggeredFlag(v, enable) {\n  var value = Object.assign({}, v);\n  if (!enable) delete value.userTriggered;\n  return value;\n}\nvar INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nvar lastInputValueMap = new WeakMap();\nfunction initInputObserver(_ref10) {\n  var inputCb = _ref10.inputCb,\n    doc = _ref10.doc,\n    mirror = _ref10.mirror,\n    blockClass = _ref10.blockClass,\n    blockSelector = _ref10.blockSelector,\n    unblockSelector = _ref10.unblockSelector,\n    ignoreClass = _ref10.ignoreClass,\n    ignoreSelector = _ref10.ignoreSelector,\n    maskInputSelector = _ref10.maskInputSelector,\n    unmaskInputSelector = _ref10.unmaskInputSelector,\n    maskInputOptions = _ref10.maskInputOptions,\n    maskInputFn = _ref10.maskInputFn,\n    sampling = _ref10.sampling,\n    userTriggeredOnInput = _ref10.userTriggeredOnInput;\n  function eventHandler(event) {\n    var target = getEventTarget(event);\n    var tagName = target && target.tagName;\n    var userTriggered = event.isTrusted;\n    if (tagName === 'OPTION') target = target.parentElement;\n    if (!target || !tagName || INPUT_TAGS.indexOf(tagName) < 0 || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n      return;\n    }\n    var el = target;\n    var type = getInputType(el);\n    if (el.classList.contains(ignoreClass) || ignoreSelector && el.matches(ignoreSelector)) {\n      return;\n    }\n    var text = getInputValue(el, tagName, type);\n    var isChecked = false;\n    if (type === 'radio' || type === 'checkbox') {\n      isChecked = target.checked;\n    }\n    if (hasInputMaskOptions({\n      maskInputOptions: maskInputOptions,\n      maskInputSelector: maskInputSelector,\n      tagName: tagName,\n      type: type\n    })) {\n      text = maskInputValue({\n        input: el,\n        maskInputOptions: maskInputOptions,\n        maskInputSelector: maskInputSelector,\n        unmaskInputSelector: unmaskInputSelector,\n        tagName: tagName,\n        type: type,\n        value: text,\n        maskInputFn: maskInputFn\n      });\n    }\n    cbWithDedup(target, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n      text: text,\n      isChecked: isChecked,\n      userTriggered: userTriggered\n    }, userTriggeredOnInput));\n    var name = target.name;\n    if (type === 'radio' && name && isChecked) {\n      doc.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\".concat(name, \"\\\"]\")).forEach(function (el) {\n        if (el !== target) {\n          var _text = maskInputValue({\n            input: el,\n            maskInputOptions: maskInputOptions,\n            maskInputSelector: maskInputSelector,\n            unmaskInputSelector: unmaskInputSelector,\n            tagName: tagName,\n            type: type,\n            value: getInputValue(el, tagName, type),\n            maskInputFn: maskInputFn\n          });\n          cbWithDedup(el, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n            text: _text,\n            isChecked: !isChecked,\n            userTriggered: false\n          }, userTriggeredOnInput));\n        }\n      });\n    }\n  }\n  function cbWithDedup(target, v) {\n    var lastInputValue = lastInputValueMap.get(target);\n    if (!lastInputValue || lastInputValue.text !== v.text || lastInputValue.isChecked !== v.isChecked) {\n      lastInputValueMap.set(target, v);\n      var id = mirror.getId(target);\n      inputCb(Object.assign(Object.assign({}, v), {\n        id: id\n      }));\n    }\n  }\n  var events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n  var handlers = events.map(function (eventName) {\n    return on(eventName, callbackWrapper(eventHandler), doc);\n  });\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n  var hookProperties = [[HTMLInputElement.prototype, 'value'], [HTMLInputElement.prototype, 'checked'], [HTMLSelectElement.prototype, 'value'], [HTMLTextAreaElement.prototype, 'value'], [HTMLSelectElement.prototype, 'selectedIndex'], [HTMLOptionElement.prototype, 'selected']];\n  if (propertyDescriptor && propertyDescriptor.set) {\n    handlers.push.apply(handlers, _toConsumableArray(hookProperties.map(function (p) {\n      return hookSetter(p[0], p[1], {\n        set: function set() {\n          callbackWrapper(eventHandler)({\n            target: this\n          });\n        }\n      });\n    })));\n  }\n  return callbackWrapper(function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction getNestedCSSRulePositions(rule) {\n  var positions = [];\n  function recurse(childRule, pos) {\n    if (hasNestedCSSRule('CSSGroupingRule') && childRule.parentRule instanceof CSSGroupingRule || hasNestedCSSRule('CSSMediaRule') && childRule.parentRule instanceof CSSMediaRule || hasNestedCSSRule('CSSSupportsRule') && childRule.parentRule instanceof CSSSupportsRule || hasNestedCSSRule('CSSConditionRule') && childRule.parentRule instanceof CSSConditionRule) {\n      var rules = Array.from(childRule.parentRule.cssRules);\n      var index = rules.indexOf(childRule);\n      pos.unshift(index);\n    } else {\n      var _rules = Array.from(childRule.parentStyleSheet.cssRules);\n      var _index = _rules.indexOf(childRule);\n      pos.unshift(_index);\n    }\n    return pos;\n  }\n  return recurse(rule, positions);\n}\nfunction initStyleSheetObserver(_ref11, _ref12) {\n  var styleSheetRuleCb = _ref11.styleSheetRuleCb,\n    mirror = _ref11.mirror;\n  var win = _ref12.win;\n  if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n    return function () {};\n  }\n  var insertRule = win.CSSStyleSheet.prototype.insertRule;\n  win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n    apply: callbackWrapper(function (target, thisArg, argumentsList) {\n      var _argumentsList = _slicedToArray(argumentsList, 2),\n        rule = _argumentsList[0],\n        index = _argumentsList[1];\n      var id = mirror.getId(thisArg.ownerNode);\n      if (id !== -1) {\n        styleSheetRuleCb({\n          id: id,\n          adds: [{\n            rule: rule,\n            index: index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  var deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n  win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n    apply: callbackWrapper(function (target, thisArg, argumentsList) {\n      var _argumentsList2 = _slicedToArray(argumentsList, 1),\n        index = _argumentsList2[0];\n      var id = mirror.getId(thisArg.ownerNode);\n      if (id !== -1) {\n        styleSheetRuleCb({\n          id: id,\n          removes: [{\n            index: index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  var supportedNestedCSSRuleTypes = {};\n  if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n    supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n  } else {\n    if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n      supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n      supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n      supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n    }\n  }\n  var unmodifiedFunctions = {};\n  Object.entries(supportedNestedCSSRuleTypes).forEach(function (_ref13) {\n    var _ref14 = _slicedToArray(_ref13, 2),\n      typeKey = _ref14[0],\n      type = _ref14[1];\n    unmodifiedFunctions[typeKey] = {\n      insertRule: type.prototype.insertRule,\n      deleteRule: type.prototype.deleteRule\n    };\n    type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n      apply: callbackWrapper(function (target, thisArg, argumentsList) {\n        var _argumentsList3 = _slicedToArray(argumentsList, 2),\n          rule = _argumentsList3[0],\n          index = _argumentsList3[1];\n        var id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n        if (id !== -1) {\n          styleSheetRuleCb({\n            id: id,\n            adds: [{\n              rule: rule,\n              index: [].concat(_toConsumableArray(getNestedCSSRulePositions(thisArg)), [index || 0])\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n      apply: callbackWrapper(function (target, thisArg, argumentsList) {\n        var _argumentsList4 = _slicedToArray(argumentsList, 1),\n          index = _argumentsList4[0];\n        var id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n        if (id !== -1) {\n          styleSheetRuleCb({\n            id: id,\n            removes: [{\n              index: [].concat(_toConsumableArray(getNestedCSSRulePositions(thisArg)), [index])\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n  });\n  return callbackWrapper(function () {\n    win.CSSStyleSheet.prototype.insertRule = insertRule;\n    win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n    Object.entries(supportedNestedCSSRuleTypes).forEach(function (_ref15) {\n      var _ref16 = _slicedToArray(_ref15, 2),\n        typeKey = _ref16[0],\n        type = _ref16[1];\n      type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n      type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n    });\n  });\n}\nfunction initStyleDeclarationObserver(_ref17, _ref18) {\n  var styleDeclarationCb = _ref17.styleDeclarationCb,\n    mirror = _ref17.mirror;\n  var win = _ref18.win;\n  var setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n  win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n    apply: callbackWrapper(function (target, thisArg, argumentsList) {\n      var _a, _b;\n      var _argumentsList5 = _slicedToArray(argumentsList, 3),\n        property = _argumentsList5[0],\n        value = _argumentsList5[1],\n        priority = _argumentsList5[2];\n      var id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n      if (id !== -1) {\n        styleDeclarationCb({\n          id: id,\n          set: {\n            property: property,\n            value: value,\n            priority: priority\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  var removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n  win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n    apply: callbackWrapper(function (target, thisArg, argumentsList) {\n      var _a, _b;\n      var _argumentsList6 = _slicedToArray(argumentsList, 1),\n        property = _argumentsList6[0];\n      var id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n      if (id !== -1) {\n        styleDeclarationCb({\n          id: id,\n          remove: {\n            property: property\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  return callbackWrapper(function () {\n    win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n  });\n}\nfunction initMediaInteractionObserver(_ref19) {\n  var mediaInteractionCb = _ref19.mediaInteractionCb,\n    blockClass = _ref19.blockClass,\n    blockSelector = _ref19.blockSelector,\n    unblockSelector = _ref19.unblockSelector,\n    mirror = _ref19.mirror,\n    sampling = _ref19.sampling;\n  var handler = function handler(type) {\n    return throttle(callbackWrapper(function (event) {\n      var target = getEventTarget(event);\n      if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n        return;\n      }\n      var currentTime = target.currentTime,\n        volume = target.volume,\n        muted = target.muted;\n      mediaInteractionCb({\n        type: type,\n        id: mirror.getId(target),\n        currentTime: currentTime,\n        volume: volume,\n        muted: muted\n      });\n    }), sampling.media || 500);\n  };\n  var handlers = [on('play', handler(0)), on('pause', handler(1)), on('seeked', handler(2)), on('volumechange', handler(3))];\n  return callbackWrapper(function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction initFontObserver(_ref20) {\n  var fontCb = _ref20.fontCb,\n    doc = _ref20.doc;\n  var win = doc.defaultView;\n  if (!win) {\n    return function () {};\n  }\n  var handlers = [];\n  var fontMap = new WeakMap();\n  var originalFontFace = win.FontFace;\n  win.FontFace = function FontFace(family, source, descriptors) {\n    var fontFace = new originalFontFace(family, source, descriptors);\n    fontMap.set(fontFace, {\n      family: family,\n      buffer: typeof source !== 'string',\n      descriptors: descriptors,\n      fontSource: typeof source === 'string' ? source : JSON.stringify(Array.from(new Uint8Array(source)))\n    });\n    return fontFace;\n  };\n  var restoreHandler = patch(doc.fonts, 'add', function (original) {\n    return function (fontFace) {\n      setTimeout(function () {\n        var p = fontMap.get(fontFace);\n        if (p) {\n          fontCb(p);\n          fontMap.delete(fontFace);\n        }\n      }, 0);\n      return original.apply(this, [fontFace]);\n    };\n  });\n  handlers.push(function () {\n    win.FontFace = originalFontFace;\n  });\n  handlers.push(restoreHandler);\n  return callbackWrapper(function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction mergeHooks(o, hooks) {\n  var mutationCb = o.mutationCb,\n    mousemoveCb = o.mousemoveCb,\n    mouseInteractionCb = o.mouseInteractionCb,\n    scrollCb = o.scrollCb,\n    viewportResizeCb = o.viewportResizeCb,\n    inputCb = o.inputCb,\n    mediaInteractionCb = o.mediaInteractionCb,\n    styleSheetRuleCb = o.styleSheetRuleCb,\n    styleDeclarationCb = o.styleDeclarationCb,\n    canvasMutationCb = o.canvasMutationCb,\n    fontCb = o.fontCb;\n  o.mutationCb = function () {\n    if (hooks.mutation) {\n      hooks.mutation.apply(hooks, arguments);\n    }\n    mutationCb.apply(void 0, arguments);\n  };\n  o.mousemoveCb = function () {\n    if (hooks.mousemove) {\n      hooks.mousemove.apply(hooks, arguments);\n    }\n    mousemoveCb.apply(void 0, arguments);\n  };\n  o.mouseInteractionCb = function () {\n    if (hooks.mouseInteraction) {\n      hooks.mouseInteraction.apply(hooks, arguments);\n    }\n    mouseInteractionCb.apply(void 0, arguments);\n  };\n  o.scrollCb = function () {\n    if (hooks.scroll) {\n      hooks.scroll.apply(hooks, arguments);\n    }\n    scrollCb.apply(void 0, arguments);\n  };\n  o.viewportResizeCb = function () {\n    if (hooks.viewportResize) {\n      hooks.viewportResize.apply(hooks, arguments);\n    }\n    viewportResizeCb.apply(void 0, arguments);\n  };\n  o.inputCb = function () {\n    if (hooks.input) {\n      hooks.input.apply(hooks, arguments);\n    }\n    inputCb.apply(void 0, arguments);\n  };\n  o.mediaInteractionCb = function () {\n    if (hooks.mediaInteaction) {\n      hooks.mediaInteaction.apply(hooks, arguments);\n    }\n    mediaInteractionCb.apply(void 0, arguments);\n  };\n  o.styleSheetRuleCb = function () {\n    if (hooks.styleSheetRule) {\n      hooks.styleSheetRule.apply(hooks, arguments);\n    }\n    styleSheetRuleCb.apply(void 0, arguments);\n  };\n  o.styleDeclarationCb = function () {\n    if (hooks.styleDeclaration) {\n      hooks.styleDeclaration.apply(hooks, arguments);\n    }\n    styleDeclarationCb.apply(void 0, arguments);\n  };\n  o.canvasMutationCb = function () {\n    if (hooks.canvasMutation) {\n      hooks.canvasMutation.apply(hooks, arguments);\n    }\n    canvasMutationCb.apply(void 0, arguments);\n  };\n  o.fontCb = function () {\n    if (hooks.font) {\n      hooks.font.apply(hooks, arguments);\n    }\n    fontCb.apply(void 0, arguments);\n  };\n}\nfunction initObservers(o) {\n  var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var currentWindow = o.doc.defaultView;\n  if (!currentWindow) {\n    return function () {};\n  }\n  mergeHooks(o, hooks);\n  var mutationObserver = initMutationObserver(o, o.doc);\n  var mousemoveHandler = initMoveObserver(o);\n  var mouseInteractionHandler = initMouseInteractionObserver(o);\n  var scrollHandler = initScrollObserver(o);\n  var viewportResizeHandler = initViewportResizeObserver(o);\n  var inputHandler = initInputObserver(o);\n  var mediaInteractionHandler = initMediaInteractionObserver(o);\n  var styleSheetObserver = initStyleSheetObserver(o, {\n    win: currentWindow\n  });\n  var styleDeclarationObserver = initStyleDeclarationObserver(o, {\n    win: currentWindow\n  });\n  var fontObserver = o.collectFonts ? initFontObserver(o) : function () {};\n  var pluginHandlers = [];\n  var _iterator4 = _createForOfIteratorHelper(o.plugins),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var plugin = _step4.value;\n      pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return callbackWrapper(function () {\n    mutationBuffers.forEach(function (b) {\n      return b.reset();\n    });\n    mutationObserver.disconnect();\n    mousemoveHandler();\n    mouseInteractionHandler();\n    scrollHandler();\n    viewportResizeHandler();\n    inputHandler();\n    mediaInteractionHandler();\n    try {\n      styleSheetObserver();\n      styleDeclarationObserver();\n    } catch (e) {}\n    fontObserver();\n    pluginHandlers.forEach(function (h) {\n      return h();\n    });\n  });\n}\nfunction hasNestedCSSRule(prop) {\n  return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n  return Boolean(typeof window[prop] !== 'undefined' && window[prop].prototype && 'insertRule' in window[prop].prototype && 'deleteRule' in window[prop].prototype);\n}\nvar IframeManager = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function IframeManager(options) {\n    _classCallCheck(this, IframeManager);\n    this.iframes = new WeakMap();\n    this.mutationCb = options.mutationCb;\n  }\n  _createClass(IframeManager, [{\n    key: \"addIframe\",\n    value: function addIframe(iframeEl) {\n      this.iframes.set(iframeEl, true);\n    }\n  }, {\n    key: \"addLoadListener\",\n    value: function addLoadListener(cb) {\n      this.loadListener = cb;\n    }\n  }, {\n    key: \"attachIframe\",\n    value: function attachIframe(iframeEl, childSn) {\n      var _a;\n      this.mutationCb({\n        adds: [{\n          parentId: iframeEl.__sn.id,\n          nextId: null,\n          node: childSn\n        }],\n        removes: [],\n        texts: [],\n        attributes: [],\n        isAttachIframe: true\n      });\n      (_a = this.loadListener) === null || _a === void 0 ? void 0 : _a.call(this, iframeEl);\n    }\n  }]);\n  return IframeManager;\n}();\nvar ShadowDomManager = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ShadowDomManager(options) {\n    _classCallCheck(this, ShadowDomManager);\n    this.restorePatches = [];\n    this.mutationCb = options.mutationCb;\n    this.scrollCb = options.scrollCb;\n    this.bypassOptions = options.bypassOptions;\n    this.mirror = options.mirror;\n    var manager = this;\n    this.restorePatches.push(patch(HTMLElement.prototype, 'attachShadow', function (original) {\n      return function () {\n        var shadowRoot = original.apply(this, arguments);\n        if (this.shadowRoot) manager.addShadowRoot(this.shadowRoot, this.ownerDocument);\n        return shadowRoot;\n      };\n    }));\n  }\n  _createClass(ShadowDomManager, [{\n    key: \"addShadowRoot\",\n    value: function addShadowRoot(shadowRoot, doc) {\n      initMutationObserver(Object.assign(Object.assign({}, this.bypassOptions), {\n        doc: doc,\n        mutationCb: this.mutationCb,\n        mirror: this.mirror,\n        shadowDomManager: this\n      }), shadowRoot);\n      initScrollObserver(Object.assign(Object.assign({}, this.bypassOptions), {\n        scrollCb: this.scrollCb,\n        doc: shadowRoot,\n        mirror: this.mirror\n      }));\n    }\n  }, {\n    key: \"observeAttachShadow\",\n    value: function observeAttachShadow(iframeElement) {\n      if (iframeElement.contentWindow) {\n        var manager = this;\n        this.restorePatches.push(patch(iframeElement.contentWindow.HTMLElement.prototype, 'attachShadow', function (original) {\n          return function () {\n            var shadowRoot = original.apply(this, arguments);\n            if (this.shadowRoot) manager.addShadowRoot(this.shadowRoot, iframeElement.contentDocument);\n            return shadowRoot;\n          };\n        }));\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.restorePatches.forEach(function (restorePatch) {\n        return restorePatch();\n      });\n    }\n  }]);\n  return ShadowDomManager;\n}();\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction initCanvas2DMutationObserver(cb, win, blockClass, unblockSelector, blockSelector, mirror) {\n  var handlers = [];\n  var props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n  var _iterator5 = _createForOfIteratorHelper(props2D),\n    _step5;\n  try {\n    var _loop = function _loop() {\n      var prop = _step5.value;\n      try {\n        if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n          return \"continue\";\n        }\n        var restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n          return function () {\n            var _this5 = this;\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n              setTimeout(function () {\n                var recordArgs = [].concat(args);\n                if (prop === 'drawImage') {\n                  if (recordArgs[0] && recordArgs[0] instanceof HTMLCanvasElement) {\n                    var canvas = recordArgs[0];\n                    var ctx = canvas.getContext('2d');\n                    var imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);\n                    var pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;\n                    recordArgs[0] = JSON.stringify(pix);\n                  }\n                }\n                cb(_this5.canvas, {\n                  type: CanvasContext['2D'],\n                  property: prop,\n                  args: recordArgs\n                });\n              }, 0);\n            }\n            return original.apply(this, args);\n          };\n        });\n        handlers.push(restoreHandler);\n      } catch (_a) {\n        var hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n          set: function set(v) {\n            cb(this.canvas, {\n              type: CanvasContext['2D'],\n              property: prop,\n              args: [v],\n              setter: true\n            });\n          }\n        });\n        handlers.push(hookHandler);\n      }\n    };\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\nfunction initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector) {\n  var handlers = [];\n  try {\n    var restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {\n      return function (contextType) {\n        if (!isBlocked(this, blockClass, blockSelector, unblockSelector)) {\n          if (!('__context' in this)) this.__context = contextType;\n        }\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        return original.apply(this, [contextType].concat(args));\n      };\n    });\n    handlers.push(restoreHandler);\n  } catch (_a) {\n    console.error('failed to patch HTMLCanvasElement.prototype.getContext');\n  }\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\n\n/*\n * base64-arraybuffer 1.0.2 <https://github.com/niklasvh/base64-arraybuffer>\n * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>\n * Released under MIT License\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nvar encode = function encode(arraybuffer) {\n  var bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64 = '';\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n  return base64;\n};\nvar webGLVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n  var contextMap = webGLVarMap.get(ctx);\n  if (!contextMap) {\n    contextMap = new Map();\n    webGLVarMap.set(ctx, contextMap);\n  }\n  if (!contextMap.has(ctor)) {\n    contextMap.set(ctor, []);\n  }\n  return contextMap.get(ctor);\n}\nvar saveWebGLVar = function saveWebGLVar(value, win, ctx) {\n  if (!value || !(isInstanceOfWebGLObject(value, win) || _typeof(value) === 'object')) return;\n  var name = value.constructor.name;\n  var list = variableListFor(ctx, name);\n  var index = list.indexOf(value);\n  if (index === -1) {\n    index = list.length;\n    list.push(value);\n  }\n  return index;\n};\nfunction serializeArg(value, win, ctx) {\n  if (value instanceof Array) {\n    return value.map(function (arg) {\n      return serializeArg(arg, win, ctx);\n    });\n  } else if (value === null) {\n    return value;\n  } else if (value instanceof Float32Array || value instanceof Float64Array || value instanceof Int32Array || value instanceof Uint32Array || value instanceof Uint8Array || value instanceof Uint16Array || value instanceof Int16Array || value instanceof Int8Array || value instanceof Uint8ClampedArray) {\n    var name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [Object.values(value)]\n    };\n  } else if (value instanceof ArrayBuffer) {\n    var _name2 = value.constructor.name;\n    var base64 = encode(value);\n    return {\n      rr_type: _name2,\n      base64: base64\n    };\n  } else if (value instanceof DataView) {\n    var _name3 = value.constructor.name;\n    return {\n      rr_type: _name3,\n      args: [serializeArg(value.buffer, win, ctx), value.byteOffset, value.byteLength]\n    };\n  } else if (value instanceof HTMLImageElement) {\n    var _name4 = value.constructor.name;\n    var src = value.src;\n    return {\n      rr_type: _name4,\n      src: src\n    };\n  } else if (value instanceof ImageData) {\n    var _name5 = value.constructor.name;\n    return {\n      rr_type: _name5,\n      args: [serializeArg(value.data, win, ctx), value.width, value.height]\n    };\n  } else if (isInstanceOfWebGLObject(value, win) || _typeof(value) === 'object') {\n    var _name6 = value.constructor.name;\n    var index = saveWebGLVar(value, win, ctx);\n    return {\n      rr_type: _name6,\n      index: index\n    };\n  }\n  return value;\n}\nvar serializeArgs = function serializeArgs(args, win, ctx) {\n  return _toConsumableArray(args).map(function (arg) {\n    return serializeArg(arg, win, ctx);\n  });\n};\nvar isInstanceOfWebGLObject = function isInstanceOfWebGLObject(value, win) {\n  var webGLConstructorNames = ['WebGLActiveInfo', 'WebGLBuffer', 'WebGLFramebuffer', 'WebGLProgram', 'WebGLRenderbuffer', 'WebGLShader', 'WebGLShaderPrecisionFormat', 'WebGLTexture', 'WebGLUniformLocation', 'WebGLVertexArrayObject', 'WebGLVertexArrayObjectOES'];\n  var supportedWebGLConstructorNames = webGLConstructorNames.filter(function (name) {\n    return typeof win[name] === 'function';\n  });\n  return Boolean(supportedWebGLConstructorNames.find(function (name) {\n    return value instanceof win[name];\n  }));\n};\nfunction patchGLPrototype(prototype, type, cb, blockClass, unblockSelector, blockSelector, mirror, win) {\n  var handlers = [];\n  var props = Object.getOwnPropertyNames(prototype);\n  var _iterator6 = _createForOfIteratorHelper(props),\n    _step6;\n  try {\n    var _loop2 = function _loop2() {\n      var prop = _step6.value;\n      try {\n        if (typeof prototype[prop] !== 'function') {\n          return \"continue\";\n        }\n        var restoreHandler = patch(prototype, prop, function (original) {\n          return function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n            var result = original.apply(this, args);\n            saveWebGLVar(result, win, prototype);\n            if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n              var id = mirror.getId(this.canvas);\n              var recordArgs = serializeArgs([].concat(args), win, prototype);\n              var mutation = {\n                type: type,\n                property: prop,\n                args: recordArgs\n              };\n              cb(this.canvas, mutation);\n            }\n            return result;\n          };\n        });\n        handlers.push(restoreHandler);\n      } catch (_a) {\n        var hookHandler = hookSetter(prototype, prop, {\n          set: function set(v) {\n            cb(this.canvas, {\n              type: type,\n              property: prop,\n              args: [v],\n              setter: true\n            });\n          }\n        });\n        handlers.push(hookHandler);\n      }\n    };\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _ret2 = _loop2();\n      if (_ret2 === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return handlers;\n}\nfunction initCanvasWebGLMutationObserver(cb, win, blockClass, blockSelector, unblockSelector, mirror) {\n  var handlers = [];\n  handlers.push.apply(handlers, _toConsumableArray(patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, blockSelector, unblockSelector, mirror, win)));\n  if (typeof win.WebGL2RenderingContext !== 'undefined') {\n    handlers.push.apply(handlers, _toConsumableArray(patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, blockSelector, unblockSelector, mirror, win)));\n  }\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\nvar CanvasManager = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CanvasManager(options) {\n    _classCallCheck(this, CanvasManager);\n    this.pendingCanvasMutations = new Map();\n    this.rafStamps = {\n      latestId: 0,\n      invokeId: null\n    };\n    this.frozen = false;\n    this.locked = false;\n    this.processMutation = function (target, mutation) {\n      var newFrame = this.rafStamps.invokeId && this.rafStamps.latestId !== this.rafStamps.invokeId;\n      if (newFrame || !this.rafStamps.invokeId) this.rafStamps.invokeId = this.rafStamps.latestId;\n      if (!this.pendingCanvasMutations.has(target)) {\n        this.pendingCanvasMutations.set(target, []);\n      }\n      this.pendingCanvasMutations.get(target).push(mutation);\n    };\n    this.mutationCb = options.mutationCb;\n    this.mirror = options.mirror;\n    if (options.recordCanvas === true) this.initCanvasMutationObserver(options.win, options.blockClass, options.blockSelector, options.unblockSelector);\n  }\n  _createClass(CanvasManager, [{\n    key: \"reset\",\n    value: function reset() {\n      this.pendingCanvasMutations.clear();\n      this.resetObservers && this.resetObservers();\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      this.frozen = true;\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      this.frozen = false;\n    }\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      this.locked = true;\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      this.locked = false;\n    }\n  }, {\n    key: \"initCanvasMutationObserver\",\n    value: function initCanvasMutationObserver(win, blockClass, unblockSelector, blockSelector) {\n      this.startRAFTimestamping();\n      this.startPendingCanvasMutationFlusher();\n      var canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector);\n      var canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n      var canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n      this.resetObservers = function () {\n        canvasContextReset();\n        canvas2DReset();\n        canvasWebGL1and2Reset();\n      };\n    }\n  }, {\n    key: \"startPendingCanvasMutationFlusher\",\n    value: function startPendingCanvasMutationFlusher() {\n      var _this6 = this;\n      requestAnimationFrame(function () {\n        return _this6.flushPendingCanvasMutations();\n      });\n    }\n  }, {\n    key: \"startRAFTimestamping\",\n    value: function startRAFTimestamping() {\n      var _this7 = this;\n      var setLatestRAFTimestamp = function setLatestRAFTimestamp(timestamp) {\n        _this7.rafStamps.latestId = timestamp;\n        requestAnimationFrame(setLatestRAFTimestamp);\n      };\n      requestAnimationFrame(setLatestRAFTimestamp);\n    }\n  }, {\n    key: \"flushPendingCanvasMutations\",\n    value: function flushPendingCanvasMutations() {\n      var _this8 = this;\n      this.pendingCanvasMutations.forEach(function (values, canvas) {\n        var id = _this8.mirror.getId(canvas);\n        _this8.flushPendingCanvasMutationFor(canvas, id);\n      });\n      requestAnimationFrame(function () {\n        return _this8.flushPendingCanvasMutations();\n      });\n    }\n  }, {\n    key: \"flushPendingCanvasMutationFor\",\n    value: function flushPendingCanvasMutationFor(canvas, id) {\n      if (this.frozen || this.locked) {\n        return;\n      }\n      var valuesWithType = this.pendingCanvasMutations.get(canvas);\n      if (!valuesWithType || id === -1) return;\n      var values = valuesWithType.map(function (value) {\n        var rest = __rest(value, [\"type\"]);\n        return rest;\n      });\n      var type = valuesWithType[0].type;\n      this.mutationCb({\n        id: id,\n        type: type,\n        commands: values\n      });\n      this.pendingCanvasMutations.delete(canvas);\n    }\n  }]);\n  return CanvasManager;\n}();\nfunction wrapEvent(e) {\n  return Object.assign(Object.assign({}, e), {\n    timestamp: Date.now()\n  });\n}\nvar wrappedEmit;\nvar takeFullSnapshot;\nvar mirror = createMirror();\nfunction record() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var emit = options.emit,\n    checkoutEveryNms = options.checkoutEveryNms,\n    checkoutEveryNth = options.checkoutEveryNth,\n    _options$blockClass = options.blockClass,\n    blockClass = _options$blockClass === void 0 ? 'rr-block' : _options$blockClass,\n    _options$blockSelecto = options.blockSelector,\n    blockSelector = _options$blockSelecto === void 0 ? null : _options$blockSelecto,\n    _options$unblockSelec = options.unblockSelector,\n    unblockSelector = _options$unblockSelec === void 0 ? null : _options$unblockSelec,\n    _options$ignoreClass = options.ignoreClass,\n    ignoreClass = _options$ignoreClass === void 0 ? 'rr-ignore' : _options$ignoreClass,\n    _options$ignoreSelect = options.ignoreSelector,\n    ignoreSelector = _options$ignoreSelect === void 0 ? null : _options$ignoreSelect,\n    _options$maskTextClas = options.maskTextClass,\n    maskTextClass = _options$maskTextClas === void 0 ? 'rr-mask' : _options$maskTextClas,\n    _options$maskTextSele = options.maskTextSelector,\n    maskTextSelector = _options$maskTextSele === void 0 ? null : _options$maskTextSele,\n    _options$maskInputSel = options.maskInputSelector,\n    maskInputSelector = _options$maskInputSel === void 0 ? null : _options$maskInputSel,\n    _options$unmaskTextSe = options.unmaskTextSelector,\n    unmaskTextSelector = _options$unmaskTextSe === void 0 ? null : _options$unmaskTextSe,\n    _options$unmaskInputS = options.unmaskInputSelector,\n    unmaskInputSelector = _options$unmaskInputS === void 0 ? null : _options$unmaskInputS,\n    _options$inlineStyles2 = options.inlineStylesheet,\n    inlineStylesheet = _options$inlineStyles2 === void 0 ? true : _options$inlineStyles2,\n    _options$maskAllText = options.maskAllText,\n    maskAllText = _options$maskAllText === void 0 ? false : _options$maskAllText,\n    maskAllInputs = options.maskAllInputs,\n    _maskInputOptions = options.maskInputOptions,\n    _slimDOMOptions = options.slimDOMOptions,\n    maskInputFn = options.maskInputFn,\n    maskTextFn = options.maskTextFn,\n    hooks = options.hooks,\n    packFn = options.packFn,\n    _options$sampling = options.sampling,\n    sampling = _options$sampling === void 0 ? {} : _options$sampling,\n    mousemoveWait = options.mousemoveWait,\n    _options$recordCanvas2 = options.recordCanvas,\n    recordCanvas = _options$recordCanvas2 === void 0 ? false : _options$recordCanvas2,\n    _options$userTriggere = options.userTriggeredOnInput,\n    userTriggeredOnInput = _options$userTriggere === void 0 ? false : _options$userTriggere,\n    _options$collectFonts = options.collectFonts,\n    collectFonts = _options$collectFonts === void 0 ? false : _options$collectFonts,\n    _options$inlineImages2 = options.inlineImages,\n    inlineImages = _options$inlineImages2 === void 0 ? false : _options$inlineImages2,\n    plugins = options.plugins,\n    _options$keepIframeSr2 = options.keepIframeSrcFn,\n    keepIframeSrcFn = _options$keepIframeSr2 === void 0 ? function () {\n      return false;\n    } : _options$keepIframeSr2,\n    onMutation = options.onMutation;\n  if (!emit) {\n    throw new Error('emit function is required');\n  }\n  if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n    sampling.mousemove = mousemoveWait;\n  }\n  var maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true,\n    radio: true,\n    checkbox: true\n  } : _maskInputOptions !== undefined ? _maskInputOptions : {};\n  var slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaVerification: true,\n    headMetaAuthorship: _slimDOMOptions === 'all',\n    headMetaDescKeywords: _slimDOMOptions === 'all'\n  } : _slimDOMOptions ? _slimDOMOptions : {};\n  polyfill();\n  var lastFullSnapshotEvent;\n  var incrementalSnapshotCount = 0;\n  var eventProcessor = function eventProcessor(e) {\n    var _iterator7 = _createForOfIteratorHelper(plugins || []),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var plugin = _step7.value;\n        if (plugin.eventProcessor) {\n          e = plugin.eventProcessor(e);\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    if (packFn) {\n      e = packFn(e);\n    }\n    return e;\n  };\n  wrappedEmit = function wrappedEmit(e, isCheckout) {\n    var _a;\n    if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) && e.type !== EventType$1.FullSnapshot && !(e.type === EventType$1.IncrementalSnapshot && e.data.source === IncrementalSource.Mutation)) {\n      mutationBuffers.forEach(function (buf) {\n        return buf.unfreeze();\n      });\n    }\n    emit(eventProcessor(e), isCheckout);\n    if (e.type === EventType$1.FullSnapshot) {\n      lastFullSnapshotEvent = e;\n      incrementalSnapshotCount = 0;\n    } else if (e.type === EventType$1.IncrementalSnapshot) {\n      if (e.data.source === IncrementalSource.Mutation && e.data.isAttachIframe) {\n        return;\n      }\n      incrementalSnapshotCount++;\n      var exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n      var exceedTime = checkoutEveryNms && e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n      if (exceedCount || exceedTime) {\n        takeFullSnapshot(true);\n      }\n    }\n  };\n  var wrappedMutationEmit = function wrappedMutationEmit(m) {\n    wrappedEmit(wrapEvent({\n      type: EventType$1.IncrementalSnapshot,\n      data: Object.assign({\n        source: IncrementalSource.Mutation\n      }, m)\n    }));\n  };\n  var wrappedScrollEmit = function wrappedScrollEmit(p) {\n    return wrappedEmit(wrapEvent({\n      type: EventType$1.IncrementalSnapshot,\n      data: Object.assign({\n        source: IncrementalSource.Scroll\n      }, p)\n    }));\n  };\n  var wrappedCanvasMutationEmit = function wrappedCanvasMutationEmit(p) {\n    return wrappedEmit(wrapEvent({\n      type: EventType$1.IncrementalSnapshot,\n      data: Object.assign({\n        source: IncrementalSource.CanvasMutation\n      }, p)\n    }));\n  };\n  var iframeManager = new IframeManager({\n    mutationCb: wrappedMutationEmit\n  });\n  var canvasManager = new CanvasManager({\n    recordCanvas: recordCanvas,\n    mutationCb: wrappedCanvasMutationEmit,\n    win: window,\n    blockClass: blockClass,\n    blockSelector: blockSelector,\n    unblockSelector: unblockSelector,\n    mirror: mirror\n  });\n  var shadowDomManager = new ShadowDomManager({\n    mutationCb: wrappedMutationEmit,\n    scrollCb: wrappedScrollEmit,\n    bypassOptions: {\n      onMutation: onMutation,\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      unblockSelector: unblockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      unmaskTextSelector: unmaskTextSelector,\n      maskInputSelector: maskInputSelector,\n      unmaskInputSelector: unmaskInputSelector,\n      inlineStylesheet: inlineStylesheet,\n      maskAllText: maskAllText,\n      maskInputOptions: maskInputOptions,\n      maskTextFn: maskTextFn,\n      maskInputFn: maskInputFn,\n      recordCanvas: recordCanvas,\n      inlineImages: inlineImages,\n      sampling: sampling,\n      slimDOMOptions: slimDOMOptions,\n      iframeManager: iframeManager,\n      canvasManager: canvasManager\n    },\n    mirror: mirror\n  });\n  takeFullSnapshot = function takeFullSnapshot() {\n    var isCheckout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _a, _b, _c, _d;\n    wrappedEmit(wrapEvent({\n      type: EventType$1.Meta,\n      data: {\n        href: window.location.href,\n        width: getWindowWidth(),\n        height: getWindowHeight()\n      }\n    }), isCheckout);\n    mutationBuffers.forEach(function (buf) {\n      return buf.lock();\n    });\n    var _snapshot = snapshot(document, {\n        blockClass: blockClass,\n        blockSelector: blockSelector,\n        unblockSelector: unblockSelector,\n        maskTextClass: maskTextClass,\n        maskTextSelector: maskTextSelector,\n        unmaskTextSelector: unmaskTextSelector,\n        maskInputSelector: maskInputSelector,\n        unmaskInputSelector: unmaskInputSelector,\n        inlineStylesheet: inlineStylesheet,\n        maskAllText: maskAllText,\n        maskAllInputs: maskInputOptions,\n        maskTextFn: maskTextFn,\n        slimDOM: slimDOMOptions,\n        recordCanvas: recordCanvas,\n        inlineImages: inlineImages,\n        onSerialize: function onSerialize(n) {\n          if (isIframeINode(n)) {\n            iframeManager.addIframe(n);\n          }\n          if (hasShadowRoot(n)) {\n            shadowDomManager.addShadowRoot(n.shadowRoot, document);\n          }\n        },\n        onIframeLoad: function onIframeLoad(iframe, childSn) {\n          iframeManager.attachIframe(iframe, childSn);\n          shadowDomManager.observeAttachShadow(iframe);\n        },\n        keepIframeSrcFn: keepIframeSrcFn\n      }),\n      _snapshot2 = _slicedToArray(_snapshot, 2),\n      node = _snapshot2[0],\n      idNodeMap = _snapshot2[1];\n    if (!node) {\n      return console.warn('Failed to snapshot the document');\n    }\n    mirror.map = idNodeMap;\n    wrappedEmit(wrapEvent({\n      type: EventType$1.FullSnapshot,\n      data: {\n        node: node,\n        initialOffset: {\n          left: window.pageXOffset !== undefined ? window.pageXOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) || ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) || (document === null || document === void 0 ? void 0 : document.body.scrollLeft) || 0,\n          top: window.pageYOffset !== undefined ? window.pageYOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) || ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) || (document === null || document === void 0 ? void 0 : document.body.scrollTop) || 0\n        }\n      }\n    }));\n    mutationBuffers.forEach(function (buf) {\n      return buf.unlock();\n    });\n  };\n  try {\n    var handlers = [];\n    handlers.push(on('DOMContentLoaded', function () {\n      wrappedEmit(wrapEvent({\n        type: EventType$1.DomContentLoaded,\n        data: {}\n      }));\n    }));\n    var observe = function observe(doc) {\n      var _a;\n      return callbackWrapper(initObservers)({\n        onMutation: onMutation,\n        mutationCb: wrappedMutationEmit,\n        mousemoveCb: function mousemoveCb(positions, source) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: {\n              source: source,\n              positions: positions\n            }\n          }));\n        },\n        mouseInteractionCb: function mouseInteractionCb(d) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.MouseInteraction\n            }, d)\n          }));\n        },\n        scrollCb: wrappedScrollEmit,\n        viewportResizeCb: function viewportResizeCb(d) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.ViewportResize\n            }, d)\n          }));\n        },\n        inputCb: function inputCb(v) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.Input\n            }, v)\n          }));\n        },\n        mediaInteractionCb: function mediaInteractionCb(p) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.MediaInteraction\n            }, p)\n          }));\n        },\n        styleSheetRuleCb: function styleSheetRuleCb(r) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.StyleSheetRule\n            }, r)\n          }));\n        },\n        styleDeclarationCb: function styleDeclarationCb(r) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.StyleDeclaration\n            }, r)\n          }));\n        },\n        canvasMutationCb: wrappedCanvasMutationEmit,\n        fontCb: function fontCb(p) {\n          return wrappedEmit(wrapEvent({\n            type: EventType$1.IncrementalSnapshot,\n            data: Object.assign({\n              source: IncrementalSource.Font\n            }, p)\n          }));\n        },\n        blockClass: blockClass,\n        ignoreClass: ignoreClass,\n        ignoreSelector: ignoreSelector,\n        maskTextClass: maskTextClass,\n        maskTextSelector: maskTextSelector,\n        unmaskTextSelector: unmaskTextSelector,\n        maskInputSelector: maskInputSelector,\n        unmaskInputSelector: unmaskInputSelector,\n        maskInputOptions: maskInputOptions,\n        inlineStylesheet: inlineStylesheet,\n        sampling: sampling,\n        recordCanvas: recordCanvas,\n        inlineImages: inlineImages,\n        userTriggeredOnInput: userTriggeredOnInput,\n        collectFonts: collectFonts,\n        doc: doc,\n        maskAllText: maskAllText,\n        maskInputFn: maskInputFn,\n        maskTextFn: maskTextFn,\n        blockSelector: blockSelector,\n        unblockSelector: unblockSelector,\n        slimDOMOptions: slimDOMOptions,\n        mirror: mirror,\n        iframeManager: iframeManager,\n        shadowDomManager: shadowDomManager,\n        canvasManager: canvasManager,\n        plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter(function (p) {\n          return p.observer;\n        })) === null || _a === void 0 ? void 0 : _a.map(function (p) {\n          return {\n            observer: p.observer,\n            options: p.options,\n            callback: function callback(payload) {\n              return wrappedEmit(wrapEvent({\n                type: EventType$1.Plugin,\n                data: {\n                  plugin: p.name,\n                  payload: payload\n                }\n              }));\n            }\n          };\n        })) || []\n      }, hooks);\n    };\n    iframeManager.addLoadListener(function (iframeEl) {\n      try {\n        handlers.push(observe(iframeEl.contentDocument));\n      } catch (error) {\n        console.warn(error);\n      }\n    });\n    var init = function init() {\n      takeFullSnapshot();\n      handlers.push(observe(document));\n    };\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      init();\n    } else {\n      handlers.push(on('load', function () {\n        wrappedEmit(wrapEvent({\n          type: EventType$1.Load,\n          data: {}\n        }));\n        init();\n      }, window));\n    }\n    return function () {\n      handlers.forEach(function (h) {\n        return h();\n      });\n    };\n  } catch (error) {\n    console.warn(error);\n  }\n}\nrecord.addCustomEvent = function (tag, payload) {\n  if (!wrappedEmit) {\n    throw new Error('please add custom event after start recording');\n  }\n  wrappedEmit(wrapEvent({\n    type: EventType$1.Custom,\n    data: {\n      tag: tag,\n      payload: payload\n    }\n  }));\n};\nrecord.freezePage = function () {\n  mutationBuffers.forEach(function (buf) {\n    return buf.freeze();\n  });\n};\nrecord.takeFullSnapshot = function (isCheckout) {\n  if (!takeFullSnapshot) {\n    throw new Error('please take full snapshot after start recording');\n  }\n  takeFullSnapshot(isCheckout);\n};\nrecord.mirror = mirror;\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(breadcrumb) {\n  return _objectSpread({\n    timestamp: Date.now() / 1000,\n    type: 'default'\n  }, breadcrumb);\n}\nvar NodeType;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nfunction timestampToMs(timestamp) {\n  var isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Add an event to the event buffer.\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEvent(_x2, _x3, _x4) {\n  return _addEvent.apply(this, arguments);\n}\n/**\n * Add a breadcrumb event to replay.\n */\nfunction _addEvent() {\n  _addEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(replay, event, isCheckout) {\n    var timestampInMs, client;\n    return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          if (replay.eventBuffer) {\n            _context11.next = 2;\n            break;\n          }\n          return _context11.abrupt(\"return\", null);\n        case 2:\n          if (!replay.isPaused()) {\n            _context11.next = 4;\n            break;\n          }\n          return _context11.abrupt(\"return\", null);\n        case 4:\n          timestampInMs = timestampToMs(event.timestamp); // Throw out events that happen more than 5 minutes ago. This can happen if\n          // page has been left open and idle for a long period of time and user\n          // comes back to trigger a new session. The performance entries rely on\n          // `performance.timeOrigin`, which is when the page first opened.\n          if (!(timestampInMs + replay.timeouts.sessionIdlePause < Date.now())) {\n            _context11.next = 7;\n            break;\n          }\n          return _context11.abrupt(\"return\", null);\n        case 7:\n          _context11.prev = 7;\n          if (isCheckout) {\n            replay.eventBuffer.clear();\n          }\n          _context11.next = 11;\n          return replay.eventBuffer.addEvent(event);\n        case 11:\n          return _context11.abrupt(\"return\", _context11.sent);\n        case 14:\n          _context11.prev = 14;\n          _context11.t0 = _context11[\"catch\"](7);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(_context11.t0);\n          _context11.next = 19;\n          return replay.stop('addEvent');\n        case 19:\n          client = core.getCurrentHub().getClient();\n          if (client) {\n            client.recordDroppedEvent('internal_sdk_error', 'replay');\n          }\n        case 21:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee10, null, [[7, 14]]);\n  }));\n  return _addEvent.apply(this, arguments);\n}\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category)) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n  replay.addUpdate(function () {\n    void addEvent(replay, {\n      type: EventType$1.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: utils.normalize(breadcrumb, 10, 1000)\n      }\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n\n/**\n * Detect a slow click on a button/a tag,\n * and potentially create a corresponding breadcrumb.\n */\nfunction detectSlowClick(replay, config, clickBreadcrumb, node) {\n  if (ignoreElement(node, config)) {\n    return;\n  }\n\n  /*\n    We consider a slow click a click on a button/a, which does not trigger one of:\n     - DOM mutation\n     - Scroll (within 100ms)\n     Within the given threshold time.\n     After time timeout time, we stop listening and mark it as a slow click anyhow.\n  */\n\n  var cleanup = function cleanup() {\n    // replaced further down\n  };\n\n  // After timeout time, def. consider this a slow click, and stop watching for mutations\n  var timeout = setTimeout(function () {\n    handleSlowClick(replay, clickBreadcrumb, config.timeout, 'timeout');\n    cleanup();\n  }, config.timeout);\n  var mutationHandler = function mutationHandler() {\n    maybeHandleSlowClick(replay, clickBreadcrumb, config.threshold, config.timeout, 'mutation');\n    cleanup();\n  };\n  var scrollHandler = function scrollHandler() {\n    maybeHandleSlowClick(replay, clickBreadcrumb, config.scrollTimeout, config.timeout, 'scroll');\n    cleanup();\n  };\n  var obs = new MutationObserver(mutationHandler);\n  obs.observe(WINDOW.document.documentElement, {\n    attributes: true,\n    characterData: true,\n    childList: true,\n    subtree: true\n  });\n  WINDOW.addEventListener('scroll', scrollHandler);\n\n  // Stop listening to scroll timeouts early\n  var scrollTimeout = setTimeout(function () {\n    WINDOW.removeEventListener('scroll', scrollHandler);\n  }, config.scrollTimeout);\n  cleanup = function cleanup() {\n    clearTimeout(timeout);\n    clearTimeout(scrollTimeout);\n    obs.disconnect();\n    WINDOW.removeEventListener('scroll', scrollHandler);\n  };\n}\nfunction maybeHandleSlowClick(replay, clickBreadcrumb, threshold, timeout, endReason) {\n  var now = Date.now();\n  var timeAfterClickMs = now - clickBreadcrumb.timestamp * 1000;\n  if (timeAfterClickMs > threshold) {\n    handleSlowClick(replay, clickBreadcrumb, Math.min(timeAfterClickMs, timeout), endReason);\n    return true;\n  }\n  return false;\n}\nfunction handleSlowClick(replay, clickBreadcrumb, timeAfterClickMs, endReason) {\n  var breadcrumb = {\n    message: clickBreadcrumb.message,\n    timestamp: clickBreadcrumb.timestamp,\n    category: 'ui.slowClickDetected',\n    data: _objectSpread(_objectSpread({}, clickBreadcrumb.data), {}, {\n      url: WINDOW.location.href,\n      // TODO FN: add parametrized route, when possible\n      timeAfterClickMs: timeAfterClickMs,\n      endReason: endReason\n    })\n  };\n  addBreadcrumbEvent(replay, breadcrumb);\n}\nvar SLOW_CLICK_IGNORE_TAGS = ['SELECT', 'OPTION'];\nfunction ignoreElement(node, config) {\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n  if (SLOW_CLICK_IGNORE_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (node.tagName === 'A' && (node.hasAttribute('download') || node.hasAttribute('target') && node.getAttribute('target') !== '_self')) {\n    return true;\n  }\n  if (config.ignoreSelector && node.matches(config.ignoreSelector)) {\n    return true;\n  }\n  return false;\n}\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nvar ATTRIBUTES_TO_RECORD = new Set(['id', 'class', 'aria-label', 'role', 'name', 'alt', 'title', 'data-test-id', 'data-testid']);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  var obj = {};\n  for (var key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      var normalizedKey = key;\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n  return obj;\n}\nvar handleDomListener = function handleDomListener(replay) {\n  var slowClickExperiment = replay.getOptions()._experiments.slowClicks;\n  var slowClickConfig = slowClickExperiment ? {\n    threshold: slowClickExperiment.threshold,\n    timeout: slowClickExperiment.timeout,\n    scrollTimeout: slowClickExperiment.scrollTimeout,\n    ignoreSelector: slowClickExperiment.ignoreSelectors ? slowClickExperiment.ignoreSelectors.join(',') : ''\n  } : undefined;\n  return function (handlerData) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    var result = handleDom(handlerData);\n    if (!result) {\n      return;\n    }\n    var isClick = handlerData.name === 'click';\n    var event = isClick && handlerData.event;\n    // Ignore clicks if ctrl/alt/meta keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (isClick && slowClickConfig && event && !event.altKey && !event.metaKey && !event.ctrlKey) {\n      detectSlowClick(replay, slowClickConfig, result, getClickTargetNode(handlerData.event));\n    }\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nfunction getBaseDomBreadcrumb(target, message) {\n  // `__sn` property is the serialized node created by rrweb\n  var serializedNode = target && isRrwebNode(target) && target.__sn.type === NodeType.Element ? target.__sn : null;\n  return {\n    message: message,\n    data: serializedNode ? {\n      nodeId: serializedNode.id,\n      node: {\n        id: serializedNode.id,\n        tagName: serializedNode.tagName,\n        textContent: target ? Array.from(target.childNodes).map(function (node) {\n          return '__sn' in node && node.__sn.type === NodeType.Text && node.__sn.textContent;\n        }).filter(Boolean) // filter out empty values\n        .map(function (text) {\n          return text.trim();\n        }).join('') : '',\n        attributes: getAttributesToRecord(serializedNode.attributes)\n      }\n    } : {}\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nfunction handleDom(handlerData) {\n  var _getDomTarget = getDomTarget(handlerData),\n    target = _getDomTarget.target,\n    message = _getDomTarget.message;\n  return createBreadcrumb(_objectSpread({\n    category: \"ui.\".concat(handlerData.name)\n  }, getBaseDomBreadcrumb(target, message)));\n}\nfunction getDomTarget(handlerData) {\n  var isClick = handlerData.name === 'click';\n  var message;\n  var target = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event) : getTargetNode(handlerData.event);\n    message = utils.htmlTreeAsString(target, {\n      maxStringLength: 200\n    }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n  return {\n    target: target,\n    message: message\n  };\n}\nfunction isRrwebNode(node) {\n  return '__sn' in node;\n}\nfunction getTargetNode(event) {\n  if (isEventWithTarget(event)) {\n    return event.target;\n  }\n  return event;\n}\nvar INTERACTIVE_SELECTOR = 'button,a';\n\n// For clicks, we check if the target is inside of a button or link\n// If so, we use this as the target instead\n// This is useful because if you click on the image in <button><img></button>,\n// The target will be the image, not the button, which we don't want here\nfunction getClickTargetNode(event) {\n  var target = getTargetNode(event);\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n  var closestInteractive = target.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || target;\n}\nfunction isEventWithTarget(event) {\n  return _typeof(event) === 'object' && !!event && 'target' in event;\n}\n\n/** Handle keyboard events & create breadcrumbs. */\nfunction handleKeyboardEvent(replay, event) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  replay.triggerUserActivity();\n  var breadcrumb = getKeyboardBreadcrumb(event);\n  if (!breadcrumb) {\n    return;\n  }\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nfunction getKeyboardBreadcrumb(event) {\n  var metaKey = event.metaKey,\n    shiftKey = event.shiftKey,\n    ctrlKey = event.ctrlKey,\n    altKey = event.altKey,\n    key = event.key,\n    target = event.target;\n\n  // never capture for input fields\n  if (!target || isInputElement(target)) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  var hasModifierKey = metaKey || ctrlKey || altKey;\n  var isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n  var message = utils.htmlTreeAsString(target, {\n    maxStringLength: 200\n  }) || '<unknown>';\n  var baseBreadcrumb = getBaseDomBreadcrumb(target, message);\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message: message,\n    data: _objectSpread(_objectSpread({}, baseBreadcrumb.data), {}, {\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      ctrlKey: ctrlKey,\n      altKey: altKey,\n      key: key\n    })\n  });\n}\nfunction isInputElement(target) {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\nvar NAVIGATION_ENTRY_KEYS = ['name', 'type', 'startTime', 'transferSize', 'duration'];\nfunction isNavigationEntryEqual(a) {\n  return function (b) {\n    return NAVIGATION_ENTRY_KEYS.every(function (key) {\n      return a[key] === b[key];\n    });\n  };\n}\n\n/**\n * There are some difficulties diagnosing why there are duplicate navigation\n * entries. We've witnessed several intermittent results:\n * - duplicate entries have duration = 0\n * - duplicate entries are the same object reference\n * - none of the above\n *\n * Compare the values of several keys to determine if the entries are duplicates or not.\n */\n// TODO (high-prio): Figure out wth is returned here\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction dedupePerformanceEntries(currentList, newList) {\n  // Partition `currentList` into 3 different lists based on entryType\n  var _currentList$reduce = currentList.reduce(function (acc, entry) {\n      if (entry.entryType === 'navigation') {\n        acc[0].push(entry);\n      } else if (entry.entryType === 'largest-contentful-paint') {\n        acc[1].push(entry);\n      } else {\n        acc[2].push(entry);\n      }\n      return acc;\n    }, [[], [], []]),\n    _currentList$reduce2 = _slicedToArray(_currentList$reduce, 3),\n    existingNavigationEntries = _currentList$reduce2[0],\n    existingLcpEntries = _currentList$reduce2[1],\n    existingEntries = _currentList$reduce2[2];\n  var newEntries = [];\n  var newNavigationEntries = [];\n  var newLcpEntry = existingLcpEntries.length ? existingLcpEntries[existingLcpEntries.length - 1] // Take the last element as list is sorted\n  : undefined;\n  newList.forEach(function (entry) {\n    if (entry.entryType === 'largest-contentful-paint') {\n      // We want the latest LCP event only\n      if (!newLcpEntry || newLcpEntry.startTime < entry.startTime) {\n        newLcpEntry = entry;\n      }\n      return;\n    }\n    if (entry.entryType === 'navigation') {\n      var navigationEntry = entry;\n\n      // Check if the navigation entry is contained in currentList or newList\n      if (\n      // Ignore any navigation entries with duration 0, as they are likely duplicates\n      entry.duration > 0 &&\n      // Ensure new entry does not already exist in existing entries\n      !existingNavigationEntries.find(isNavigationEntryEqual(navigationEntry)) &&\n      // Ensure new entry does not already exist in new list of navigation entries\n      !newNavigationEntries.find(isNavigationEntryEqual(navigationEntry))) {\n        newNavigationEntries.push(navigationEntry);\n      }\n\n      // Otherwise this navigation entry is considered a duplicate and is thrown away\n      return;\n    }\n    newEntries.push(entry);\n  });\n\n  // Re-combine and sort by startTime\n  return [].concat(_toConsumableArray(newLcpEntry ? [newLcpEntry] : []), _toConsumableArray(existingNavigationEntries), _toConsumableArray(existingEntries), newEntries, newNavigationEntries).sort(function (a, b) {\n    return a.startTime - b.startTime;\n  });\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n */\nfunction setupPerformanceObserver(replay) {\n  var performanceObserverHandler = function performanceObserverHandler(list) {\n    // For whatever reason the observer was returning duplicate navigation\n    // entries (the other entry types were not duplicated).\n    var newPerformanceEntries = dedupePerformanceEntries(replay.performanceEvents, list.getEntries());\n    replay.performanceEvents = newPerformanceEntries;\n  };\n  var performanceObserver = new PerformanceObserver(performanceObserverHandler);\n  ['element', 'event', 'first-input', 'largest-contentful-paint', 'layout-shift', 'longtask', 'navigation', 'paint', 'resource'].forEach(function (type) {\n    try {\n      performanceObserver.observe({\n        type: type,\n        buffered: true\n      });\n    } catch (e) {\n      // This can throw if an entry type is not supported in the browser.\n      // Ignore these errors.\n    }\n  });\n  return performanceObserver;\n}\nvar r = \"/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\\nfunction t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:\\\"need dictionary\\\",1:\\\"stream end\\\",0:\\\"\\\",\\\"-1\\\":\\\"file error\\\",\\\"-2\\\":\\\"stream error\\\",\\\"-3\\\":\\\"data error\\\",\\\"-4\\\":\\\"insufficient memory\\\",\\\"-5\\\":\\\"buffer error\\\",\\\"-6\\\":\\\"incompatible version\\\"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:\\\"pako deflate (from Nodeca project)\\\"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if(\\\"object\\\"!=typeof a)throw new TypeError(a+\\\"must be non-object\\\");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if(\\\"function\\\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if(\\\"function\\\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a=\\\"\\\";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\\\"\\\",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\\\"\\\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t=\\\"string\\\"==typeof e.dictionary?Nt(e.dictionary):\\\"[object ArrayBuffer]\\\"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,\\\"string\\\"==typeof t?a.input=Nt(t):\\\"[object ArrayBuffer]\\\"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg=\\\"invalid literal/length code\\\",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg=\\\"invalid distance code\\\",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg=\\\"invalid distance too far back\\\",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg=\\\"invalid distance too far back\\\",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg=\\\"\\\",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg=\\\"incorrect header check\\\",a.mode=me;break}if((15&h)!==we){t.msg=\\\"unknown compression method\\\",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg=\\\"invalid window size\\\",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg=\\\"unknown compression method\\\",a.mode=me;break}if(57344&a.flags){t.msg=\\\"unknown header flags set\\\",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg=\\\"header crc mismatch\\\",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg=\\\"invalid block type\\\",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg=\\\"invalid stored block lengths\\\",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg=\\\"too many length or distance symbols\\\",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\\\"invalid code lengths set\\\",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg=\\\"invalid bit length repeat\\\",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg=\\\"invalid bit length repeat\\\",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg=\\\"invalid code -- missing end-of-block\\\",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\\\"invalid literal/lengths set\\\",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg=\\\"invalid distances set\\\",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg=\\\"invalid literal/length code\\\",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg=\\\"invalid distance code\\\",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg=\\\"invalid distance too far back\\\",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg=\\\"invalid distance too far back\\\",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg=\\\"incorrect data check\\\",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg=\\\"incorrect length check\\\",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:\\\"pako inflate (from Nodeca project)\\\"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\\\"\\\",this.comment=\\\"\\\",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:\\\"\\\"},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\\\"\\\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&(\\\"string\\\"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):\\\"[object ArrayBuffer]\\\"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,\\\"[object ArrayBuffer]\\\"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if(\\\"string\\\"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&(\\\"string\\\"===this.options.to?this.result=this.chunks.join(\\\"\\\"):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\\\"Adding invalid event\\\");const e=this._hasEvents?\\\",\\\":\\\"\\\";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push(\\\"]\\\",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push(\\\"[\\\",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener(\\\"message\\\",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&\\\"function\\\"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\\\"init\\\",success:!0,response:void 0});\";\nfunction e() {\n  var e = new Blob([r]);\n  return URL.createObjectURL(e);\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nvar EventBufferArray = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /** All the events that are buffered to be sent. */\n\n  function EventBufferArray() {\n    _classCallCheck(this, EventBufferArray);\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  _createClass(EventBufferArray, [{\n    key: \"hasEvents\",\n    get: function get() {\n      return this.events.length > 0;\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'sync';\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.events = [];\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"addEvent\",\n    value: function () {\n      var _addEvent2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.events.push(event);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee, this);\n      }));\n      function addEvent(_x5) {\n        return _addEvent2.apply(this, arguments);\n      }\n      return addEvent;\n    }() /** @inheritdoc */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var _this9 = this;\n      return new Promise(function (resolve) {\n        // Make a copy of the events array reference and immediately clear the\n        // events member so that we do not lose new events while uploading\n        // attachment.\n        var eventsRet = _this9.events;\n        _this9.events = [];\n        resolve(JSON.stringify(eventsRet));\n      });\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.events = [];\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"getEarliestTimestamp\",\n    value: function getEarliestTimestamp() {\n      var timestamp = this.events.map(function (event) {\n        return event.timestamp;\n      }).sort()[0];\n      if (!timestamp) {\n        return null;\n      }\n      return timestampToMs(timestamp);\n    }\n  }]);\n  return EventBufferArray;\n}();\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nvar WorkerHandler = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function WorkerHandler(worker) {\n    _classCallCheck(this, WorkerHandler);\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  _createClass(WorkerHandler, [{\n    key: \"ensureReady\",\n    value: function ensureReady() {\n      var _this10 = this;\n      // Ensure we only check once\n      if (this._ensureReadyPromise) {\n        return this._ensureReadyPromise;\n      }\n      this._ensureReadyPromise = new Promise(function (resolve, reject) {\n        _this10._worker.addEventListener('message', function (_ref21) {\n          var data = _ref21.data;\n          if (data.success) {\n            resolve();\n          } else {\n            reject();\n          }\n        }, {\n          once: true\n        });\n        _this10._worker.addEventListener('error', function (error) {\n          reject(error);\n        }, {\n          once: true\n        });\n      });\n      return this._ensureReadyPromise;\n    }\n\n    /**\n     * Destroy the worker.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Destroying compression worker');\n      this._worker.terminate();\n    }\n\n    /**\n     * Post message to worker and wait for response before resolving promise.\n     */\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(method, arg) {\n      var _this11 = this;\n      var id = this._getAndIncrementId();\n      return new Promise(function (resolve, reject) {\n        var listener = function listener(_ref22) {\n          var data = _ref22.data;\n          var response = data;\n          if (response.method !== method) {\n            return;\n          }\n\n          // There can be multiple listeners for a single method, the id ensures\n          // that the response matches the caller.\n          if (response.id !== id) {\n            return;\n          }\n\n          // At this point, we'll always want to remove listener regardless of result status\n          _this11._worker.removeEventListener('message', listener);\n          if (!response.success) {\n            // TODO: Do some error handling, not sure what\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay]', response.response);\n            reject(new Error('Error in compression worker'));\n            return;\n          }\n          resolve(response.response);\n        };\n\n        // Note: we can't use `once` option because it's possible it needs to\n        // listen to multiple messages\n        _this11._worker.addEventListener('message', listener);\n        _this11._worker.postMessage({\n          id: id,\n          method: method,\n          arg: arg\n        });\n      });\n    }\n\n    /** Get the current ID and increment it for the next call. */\n  }, {\n    key: \"_getAndIncrementId\",\n    value: function _getAndIncrementId() {\n      return this._id++;\n    }\n  }]);\n  return WorkerHandler;\n}();\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nvar EventBufferCompressionWorker = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function EventBufferCompressionWorker(worker) {\n    _classCallCheck(this, EventBufferCompressionWorker);\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n  }\n\n  /** @inheritdoc */\n  _createClass(EventBufferCompressionWorker, [{\n    key: \"hasEvents\",\n    get: function get() {\n      return !!this._earliestTimestamp;\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'worker';\n    }\n\n    /**\n     * Ensure the worker is ready (or not).\n     * This will either resolve when the worker is ready, or reject if an error occured.\n     */\n  }, {\n    key: \"ensureReady\",\n    value: function ensureReady() {\n      return this._worker.ensureReady();\n    }\n\n    /**\n     * Destroy the event buffer.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._worker.destroy();\n    }\n\n    /**\n     * Add an event to the event buffer.\n     *\n     * Returns true if event was successfuly received and processed by worker.\n     */\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(event) {\n      var timestamp = timestampToMs(event.timestamp);\n      if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n        this._earliestTimestamp = timestamp;\n      }\n      return this._sendEventToWorker(event);\n    }\n\n    /**\n     * Finish the event buffer and return the compressed data.\n     */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      return this._finishRequest();\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._earliestTimestamp = null;\n      // We do not wait on this, as we assume the order of messages is consistent for the worker\n      void this._worker.postMessage('clear');\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"getEarliestTimestamp\",\n    value: function getEarliestTimestamp() {\n      return this._earliestTimestamp;\n    }\n\n    /**\n     * Send the event to the worker.\n     */\n  }, {\n    key: \"_sendEventToWorker\",\n    value: function _sendEventToWorker(event) {\n      return this._worker.postMessage('addEvent', JSON.stringify(event));\n    }\n\n    /**\n     * Finish the request and return the compressed data from the worker.\n     */\n  }, {\n    key: \"_finishRequest\",\n    value: function () {\n      var _finishRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._worker.postMessage('finish');\n            case 2:\n              response = _context3.sent;\n              this._earliestTimestamp = null;\n              return _context3.abrupt(\"return\", response);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _finishRequest() {\n        return _finishRequest2.apply(this, arguments);\n      }\n      return _finishRequest;\n    }()\n  }]);\n  return EventBufferCompressionWorker;\n}();\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nvar EventBufferProxy = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function EventBufferProxy(worker) {\n    _classCallCheck(this, EventBufferProxy);\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n  _createClass(EventBufferProxy, [{\n    key: \"type\",\n    get: function get() {\n      return this._used.type;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"hasEvents\",\n    get: function get() {\n      return this._used.hasEvents;\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._fallback.destroy();\n      this._compression.destroy();\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this._used.clear();\n    }\n\n    /** @inheritdoc */\n  }, {\n    key: \"getEarliestTimestamp\",\n    value: function getEarliestTimestamp() {\n      return this._used.getEarliestTimestamp();\n    }\n\n    /**\n     * Add an event to the event buffer.\n     *\n     * Returns true if event was successfully added.\n     */\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(event) {\n      return this._used.addEvent(event);\n    }\n\n    /** @inheritDoc */\n  }, {\n    key: \"finish\",\n    value: function () {\n      var _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.ensureWorkerIsLoaded();\n            case 2:\n              return _context4.abrupt(\"return\", this._used.finish());\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee3, this);\n      }));\n      function finish() {\n        return _finish.apply(this, arguments);\n      }\n      return finish;\n    }() /** Ensure the worker has loaded. */\n  }, {\n    key: \"ensureWorkerIsLoaded\",\n    value: function ensureWorkerIsLoaded() {\n      return this._ensureWorkerIsLoadedPromise;\n    }\n\n    /** Actually check if the worker has been loaded. */\n  }, {\n    key: \"_ensureWorkerIsLoaded\",\n    value: function () {\n      var _ensureWorkerIsLoaded2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return this._compression.ensureReady();\n            case 3:\n              _context5.next = 9;\n              break;\n            case 5:\n              _context5.prev = 5;\n              _context5.t0 = _context5[\"catch\"](0);\n              // If the worker fails to load, we fall back to the simple buffer.\n              // Nothing more to do from our side here\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Failed to load the compression worker, falling back to simple buffer');\n              return _context5.abrupt(\"return\");\n            case 9:\n              _context5.next = 11;\n              return this._switchToCompressionWorker();\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee4, this, [[0, 5]]);\n      }));\n      function _ensureWorkerIsLoaded() {\n        return _ensureWorkerIsLoaded2.apply(this, arguments);\n      }\n      return _ensureWorkerIsLoaded;\n    }() /** Switch the used buffer to the compression worker. */\n  }, {\n    key: \"_switchToCompressionWorker\",\n    value: function () {\n      var _switchToCompressionWorker2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var events, addEventPromises, _iterator8, _step8, event;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              events = this._fallback.events;\n              addEventPromises = [];\n              _iterator8 = _createForOfIteratorHelper(events);\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  event = _step8.value;\n                  addEventPromises.push(this._compression.addEvent(event));\n                }\n\n                // We switch over to the new buffer immediately - any further events will be added\n                // after the previously buffered ones\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              this._used = this._compression;\n\n              // Wait for original events to be re-added before resolving\n              _context6.prev = 5;\n              _context6.next = 8;\n              return Promise.all(addEventPromises);\n            case 8:\n              _context6.next = 13;\n              break;\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](5);\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('[Replay] Failed to add events when switching buffers.', _context6.t0);\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee5, this, [[5, 10]]);\n      }));\n      function _switchToCompressionWorker() {\n        return _switchToCompressionWorker2.apply(this, arguments);\n      }\n      return _switchToCompressionWorker;\n    }()\n  }]);\n  return EventBufferProxy;\n}();\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer(_ref23) {\n  var useCompression = _ref23.useCompression;\n  // eslint-disable-next-line no-restricted-globals\n  if (useCompression && window.Worker) {\n    try {\n      var workerUrl = e();\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Using compression worker');\n      var worker = new Worker(workerUrl);\n      return new EventBufferProxy(worker);\n    } catch (error) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Failed to create compression worker');\n      // Fall back to use simple event buffer array\n    }\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nfunction clearSession(replay) {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession() {\n  var hasSessionStorage = ('sessionStorage' in WINDOW);\n  if (!hasSessionStorage) {\n    return;\n  }\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(initialTime, expiry) {\n  var targetTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +new Date();\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(session, timeouts) {\n  var targetTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +new Date();\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, timeouts.maxSessionLife, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, timeouts.sessionIdleExpire, targetTime)\n  );\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  var hasSessionStorage = ('sessionStorage' in WINDOW);\n  if (!hasSessionStorage) {\n    return;\n  }\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  var now = Date.now();\n  var id = session.id || utils.uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  var started = session.started || now;\n  var lastActivity = session.lastActivity || now;\n  var segmentId = session.segmentId || 0;\n  var sampled = session.sampled;\n  return {\n    id: id,\n    started: started,\n    lastActivity: lastActivity,\n    segmentId: segmentId,\n    sampled: sampled,\n    shouldRefresh: true\n  };\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, allowBuffering) {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(_ref24) {\n  var sessionSampleRate = _ref24.sessionSampleRate,\n    allowBuffering = _ref24.allowBuffering,\n    _ref24$stickySession = _ref24.stickySession,\n    stickySession = _ref24$stickySession === void 0 ? false : _ref24$stickySession;\n  var sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  var session = makeSession({\n    sampled: sampled\n  });\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log(\"[Replay] Creating new session: \".concat(session.id));\n  if (stickySession) {\n    saveSession(session);\n  }\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession() {\n  var hasSessionStorage = ('sessionStorage' in WINDOW);\n  if (!hasSessionStorage) {\n    return null;\n  }\n  try {\n    // This can throw if cookies are disabled\n    var sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n    var sessionObj = JSON.parse(sessionStringFromStorage);\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Get or create a session\n */\nfunction getSession(_ref25) {\n  var timeouts = _ref25.timeouts,\n    currentSession = _ref25.currentSession,\n    stickySession = _ref25.stickySession,\n    sessionSampleRate = _ref25.sessionSampleRate,\n    allowBuffering = _ref25.allowBuffering;\n  // If session exists and is passed, use it instead of always hitting session storage\n  var session = currentSession || stickySession && fetchSession();\n  if (session) {\n    // If there is a session, check if it is valid (e.g. \"last activity\" time\n    // should be within the \"session idle time\", and \"session started\" time is\n    // within \"max session time\").\n    var _isExpired = isSessionExpired(session, timeouts);\n    if (!_isExpired) {\n      return {\n        type: 'saved',\n        session: session\n      };\n    } else if (!session.shouldRefresh) {\n      // In this case, stop\n      // This is the case if we have an error session that is completed (=triggered an error)\n      var discardedSession = makeSession({\n        sampled: false\n      });\n      return {\n        type: 'new',\n        session: discardedSession\n      };\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Session has expired');\n    }\n    // Otherwise continue to create a new session\n  }\n\n  var newSession = createSession({\n    stickySession: stickySession,\n    sessionSampleRate: sessionSampleRate,\n    allowBuffering: allowBuffering\n  });\n  return {\n    type: 'new',\n    session: newSession\n  };\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  var enforceStatusCode = isBaseTransportSend();\n  return function (event, sendResponse) {\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return;\n    }\n    var statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n\n    // Collect traceIds in _context regardless of `recordingMode`\n    // In error mode, _context gets cleared on every checkout\n    if (isTransactionEvent(event) && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {\n      replay.getContext().traceIds.add(event.contexts.trace.trace_id);\n      return;\n    }\n\n    // Everything below is just for error events\n    if (!isErrorEvent(event)) {\n      return;\n    }\n\n    // Add error to list of errorIds of replay. This is ok to do even if not\n    // sampled because context will get reset at next checkout.\n    // XXX: There is also a race condition where it's possible to capture an\n    // error to Sentry before Replay SDK has loaded, but response returns after\n    // it was loaded, and this gets called.\n    if (event.event_id) {\n      replay.getContext().errorIds.add(event.event_id);\n    }\n\n    // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n    // Need to be very careful that this does not cause an infinite loop\n    if (replay.recordingMode === 'buffer' && event.tags && event.tags.replayId) {\n      setTimeout(function () {\n        // Capture current event buffer as new replay\n        void replay.sendBufferedReplayOrFlush();\n      });\n    }\n  };\n}\nfunction isBaseTransportSend() {\n  var client = core.getCurrentHub().getClient();\n  if (!client) {\n    return false;\n  }\n  var transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n  return transport.send.__sentry__baseTransport__ || false;\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-ignore this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  // Check if any exception originates from rrweb\n  return event.exception.values.some(function (exception) {\n    if (!exception.stacktrace || !exception.stacktrace.frames || !exception.stacktrace.frames.length) {\n      return false;\n    }\n    return exception.stacktrace.frames.some(function (frame) {\n      return frame.filename && frame.filename.includes('/rrweb/src/');\n    });\n  });\n}\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `hanldleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nfunction shouldSampleForBufferEvent(replay, event) {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n\n/**\n * Returns a listener to be added to `addGlobalEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(replay) {\n  var includeAfterSendEventHandling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n  return function (event, hint) {\n    if (isReplayEvent(event)) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // We only want to handle errors & transactions, nothing else\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // When in buffer mode, we decide to sample here.\n    // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n    // And convert the buffer session to a full session\n    var isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n    // Tag errors if it has been sampled in buffer mode, or if it is session mode\n    // Only tag transactions if in session mode\n    var shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n    if (shouldTagReplayId) {\n      event.tags = _objectSpread(_objectSpread({}, event.tags), {}, {\n        replayId: replay.getSessionId()\n      });\n    }\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals && isErrorEvent(event)) {\n      var exc = getEventExceptionValues(event);\n      addInternalBreadcrumb({\n        message: \"Tagging event (\".concat(event.event_id, \") - \").concat(event.message, \" - \").concat(exc.type, \": \").concat(exc.value)\n      });\n    }\n\n    // In cases where a custom client is used that does not support the new hooks (yet),\n    // we manually call this hook method here\n    if (afterSendHandler) {\n      // Pretend the error had a 200 response so we always capture it\n      afterSendHandler(event, {\n        statusCode: 200\n      });\n    }\n    return event;\n  };\n}\nfunction addInternalBreadcrumb(arg) {\n  var category = arg.category,\n    level = arg.level,\n    message = arg.message,\n    rest = _objectWithoutProperties(arg, _excluded);\n  core.addBreadcrumb(_objectSpread({\n    category: category || 'console',\n    level: level || 'debug',\n    message: \"[debug]: \".concat(message)\n  }, rest));\n}\nfunction getEventExceptionValues(event) {\n  return _objectSpread({\n    type: 'Unknown',\n    value: 'n/a'\n  }, event.exception && event.exception.values && event.exception.values[0]);\n}\n\n/**\n * Create a \"span\" for each performance entry. The parent transaction is `this.replayEvent`.\n */\nfunction createPerformanceSpans(replay, entries) {\n  return entries.map(function (_ref26) {\n    var type = _ref26.type,\n      start = _ref26.start,\n      end = _ref26.end,\n      name = _ref26.name,\n      data = _ref26.data;\n    return addEvent(replay, {\n      type: EventType$1.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data: data\n        }\n      }\n    });\n  });\n}\nfunction handleHistory(handlerData) {\n  var from = handlerData.from,\n    to = handlerData.to;\n  var now = Date.now() / 1000;\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('history', listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return function (handlerData) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    var result = handleHistory(handlerData);\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n    replay.addUpdate(function () {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n  return _isSentryRequest(url);\n}\n\n/**\n * Checks wether a given URL belongs to the configured Sentry DSN.\n */\nfunction _isSentryRequest(url) {\n  var client = core.getCurrentHub().getClient();\n  var dsn = client && client.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(replay, result) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  if (result === null) {\n    return;\n  }\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n  replay.addUpdate(function () {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** only exported for tests */\nfunction handleFetch(handlerData) {\n  var startTimestamp = handlerData.startTimestamp,\n    endTimestamp = handlerData.endTimestamp,\n    fetchData = handlerData.fetchData,\n    response = handlerData.response;\n  if (!endTimestamp) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  var method = fetchData.method,\n    url = fetchData.url;\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method: method,\n      statusCode: response && response.status\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.\n */\nfunction handleFetchSpanListener(replay) {\n  return function (handlerData) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    var result = handleFetch(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** only exported for tests */\nfunction handleXhr(handlerData) {\n  var startTimestamp = handlerData.startTimestamp,\n    endTimestamp = handlerData.endTimestamp,\n    xhr = handlerData.xhr;\n  var sentryXhrData = xhr[utils.SENTRY_XHR_DATA_KEY];\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  var method = sentryXhrData.method,\n    url = sentryXhrData.url,\n    statusCode = sentryXhrData.status_code;\n  if (url === undefined) {\n    return null;\n  }\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method: method,\n      statusCode: statusCode\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.\n */\nfunction handleXhrSpanListener(replay) {\n  return function (handlerData) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    var result = handleXhr(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\nvar OBJ = 10;\nvar OBJ_KEY = 11;\nvar OBJ_KEY_STR = 12;\nvar OBJ_VAL = 13;\nvar OBJ_VAL_STR = 14;\nvar OBJ_VAL_COMPLETED = 15;\nvar ARR = 20;\nvar ARR_VAL = 21;\nvar ARR_VAL_STR = 22;\nvar ARR_VAL_COMPLETED = 23;\nvar ALLOWED_PRIMITIVES = ['true', 'false', 'null'];\n\n/**\n * Complete an incomplete JSON string.\n * This will ensure that the last element always has a `\"~~\"` to indicate it was truncated.\n * For example, `[1,2,` will be completed to `[1,2,\"~~\"]`\n * and `{\"aa\":\"b` will be completed to `{\"aa\":\"b~~\"}`\n */\nfunction completeJson(incompleteJson, stack) {\n  if (!stack.length) {\n    return incompleteJson;\n  }\n  var json = incompleteJson;\n\n  // Most checks are only needed for the last step in the stack\n  var lastPos = stack.length - 1;\n  var lastStep = stack[lastPos];\n  json = _fixLastStep(json, lastStep);\n\n  // Complete remaining steps - just add closing brackets\n  for (var _i6 = lastPos; _i6 >= 0; _i6--) {\n    var step = stack[_i6];\n    switch (step) {\n      case OBJ:\n        json = \"\".concat(json, \"}\");\n        break;\n      case ARR:\n        json = \"\".concat(json, \"]\");\n        break;\n    }\n  }\n  return json;\n}\nfunction _fixLastStep(json, lastStep) {\n  switch (lastStep) {\n    // Object cases\n    case OBJ:\n      return \"\".concat(json, \"\\\"~~\\\":\\\"~~\\\"\");\n    case OBJ_KEY:\n      return \"\".concat(json, \":\\\"~~\\\"\");\n    case OBJ_KEY_STR:\n      return \"\".concat(json, \"~~\\\":\\\"~~\\\"\");\n    case OBJ_VAL:\n      return _maybeFixIncompleteObjValue(json);\n    case OBJ_VAL_STR:\n      return \"\".concat(json, \"~~\\\"\");\n    case OBJ_VAL_COMPLETED:\n      return \"\".concat(json, \",\\\"~~\\\":\\\"~~\\\"\");\n\n    // Array cases\n    case ARR:\n      return \"\".concat(json, \"\\\"~~\\\"\");\n    case ARR_VAL:\n      return _maybeFixIncompleteArrValue(json);\n    case ARR_VAL_STR:\n      return \"\".concat(json, \"~~\\\"\");\n    case ARR_VAL_COMPLETED:\n      return \"\".concat(json, \",\\\"~~\\\"\");\n  }\n  return json;\n}\nfunction _maybeFixIncompleteArrValue(json) {\n  var pos = _findLastArrayDelimiter(json);\n  if (pos > -1) {\n    var part = json.slice(pos + 1);\n    if (ALLOWED_PRIMITIVES.includes(part.trim())) {\n      return \"\".concat(json, \",\\\"~~\\\"\");\n    }\n\n    // Everything else is replaced with `\"~~\"`\n    return \"\".concat(json.slice(0, pos + 1), \"\\\"~~\\\"\");\n  }\n\n  // fallback, this shouldn't happen, to be save\n  return json;\n}\nfunction _findLastArrayDelimiter(json) {\n  for (var _i7 = json.length - 1; _i7 >= 0; _i7--) {\n    var char = json[_i7];\n    if (char === ',' || char === '[') {\n      return _i7;\n    }\n  }\n  return -1;\n}\nfunction _maybeFixIncompleteObjValue(json) {\n  var startPos = json.lastIndexOf(':');\n  var part = json.slice(startPos + 1);\n  if (ALLOWED_PRIMITIVES.includes(part.trim())) {\n    return \"\".concat(json, \",\\\"~~\\\":\\\"~~\\\"\");\n  }\n\n  // Everything else is replaced with `\"~~\"`\n  // This also means we do not have incomplete numbers, e.g `[1` is replaced with `[\"~~\"]`\n  return \"\".concat(json.slice(0, startPos + 1), \"\\\"~~\\\"\");\n}\n\n/**\n * Evaluate an (incomplete) JSON string.\n */\nfunction evaluateJson(json) {\n  var stack = [];\n  for (var pos = 0; pos < json.length; pos++) {\n    _evaluateJsonPos(stack, json, pos);\n  }\n  return stack;\n}\nfunction _evaluateJsonPos(stack, json, pos) {\n  var curStep = stack[stack.length - 1];\n  var char = json[pos];\n  var whitespaceRegex = /\\s/;\n  if (whitespaceRegex.test(char)) {\n    return;\n  }\n  if (char === '\"' && !_isEscaped(json, pos)) {\n    _handleQuote(stack, curStep);\n    return;\n  }\n  switch (char) {\n    case '{':\n      _handleObj(stack, curStep);\n      break;\n    case '[':\n      _handleArr(stack, curStep);\n      break;\n    case ':':\n      _handleColon(stack, curStep);\n      break;\n    case ',':\n      _handleComma(stack, curStep);\n      break;\n    case '}':\n      _handleObjClose(stack, curStep);\n      break;\n    case ']':\n      _handleArrClose(stack, curStep);\n      break;\n  }\n}\nfunction _handleQuote(stack, curStep) {\n  // End of obj value\n  if (curStep === OBJ_VAL_STR) {\n    stack.pop();\n    stack.push(OBJ_VAL_COMPLETED);\n    return;\n  }\n\n  // End of arr value\n  if (curStep === ARR_VAL_STR) {\n    stack.pop();\n    stack.push(ARR_VAL_COMPLETED);\n    return;\n  }\n\n  // Start of obj value\n  if (curStep === OBJ_VAL) {\n    stack.push(OBJ_VAL_STR);\n    return;\n  }\n\n  // Start of arr value\n  if (curStep === ARR_VAL) {\n    stack.push(ARR_VAL_STR);\n    return;\n  }\n\n  // Start of obj key\n  if (curStep === OBJ) {\n    stack.push(OBJ_KEY_STR);\n    return;\n  }\n\n  // End of obj key\n  if (curStep === OBJ_KEY_STR) {\n    stack.pop();\n    stack.push(OBJ_KEY);\n    return;\n  }\n}\nfunction _handleObj(stack, curStep) {\n  // Initial object\n  if (!curStep) {\n    stack.push(OBJ);\n    return;\n  }\n\n  // New object as obj value\n  if (curStep === OBJ_VAL) {\n    stack.push(OBJ);\n    return;\n  }\n\n  // New object as array element\n  if (curStep === ARR_VAL) {\n    stack.push(OBJ);\n  }\n\n  // New object as first array element\n  if (curStep === ARR) {\n    stack.push(OBJ);\n    return;\n  }\n}\nfunction _handleArr(stack, curStep) {\n  // Initial array\n  if (!curStep) {\n    stack.push(ARR);\n    stack.push(ARR_VAL);\n    return;\n  }\n\n  // New array as obj value\n  if (curStep === OBJ_VAL) {\n    stack.push(ARR);\n    stack.push(ARR_VAL);\n    return;\n  }\n\n  // New array as array element\n  if (curStep === ARR_VAL) {\n    stack.push(ARR);\n    stack.push(ARR_VAL);\n  }\n\n  // New array as first array element\n  if (curStep === ARR) {\n    stack.push(ARR);\n    stack.push(ARR_VAL);\n    return;\n  }\n}\nfunction _handleColon(stack, curStep) {\n  if (curStep === OBJ_KEY) {\n    stack.pop();\n    stack.push(OBJ_VAL);\n  }\n}\nfunction _handleComma(stack, curStep) {\n  // Comma after obj value\n  if (curStep === OBJ_VAL) {\n    stack.pop();\n    return;\n  }\n  if (curStep === OBJ_VAL_COMPLETED) {\n    // Pop OBJ_VAL_COMPLETED & OBJ_VAL\n    stack.pop();\n    stack.pop();\n    return;\n  }\n\n  // Comma after arr value\n  if (curStep === ARR_VAL) {\n    // do nothing - basically we'd pop ARR_VAL but add it right back\n    return;\n  }\n  if (curStep === ARR_VAL_COMPLETED) {\n    // Pop ARR_VAL_COMPLETED\n    stack.pop();\n\n    // basically we'd pop ARR_VAL but add it right back\n    return;\n  }\n}\nfunction _handleObjClose(stack, curStep) {\n  // Empty object {}\n  if (curStep === OBJ) {\n    stack.pop();\n  }\n\n  // Object with element\n  if (curStep === OBJ_VAL) {\n    // Pop OBJ_VAL, OBJ\n    stack.pop();\n    stack.pop();\n  }\n\n  // Obj with element\n  if (curStep === OBJ_VAL_COMPLETED) {\n    // Pop OBJ_VAL_COMPLETED, OBJ_VAL, OBJ\n    stack.pop();\n    stack.pop();\n    stack.pop();\n  }\n\n  // if was obj value, complete it\n  if (stack[stack.length - 1] === OBJ_VAL) {\n    stack.push(OBJ_VAL_COMPLETED);\n  }\n\n  // if was arr value, complete it\n  if (stack[stack.length - 1] === ARR_VAL) {\n    stack.push(ARR_VAL_COMPLETED);\n  }\n}\nfunction _handleArrClose(stack, curStep) {\n  // Empty array []\n  if (curStep === ARR) {\n    stack.pop();\n  }\n\n  // Array with element\n  if (curStep === ARR_VAL) {\n    // Pop ARR_VAL, ARR\n    stack.pop();\n    stack.pop();\n  }\n\n  // Array with element\n  if (curStep === ARR_VAL_COMPLETED) {\n    // Pop ARR_VAL_COMPLETED, ARR_VAL, ARR\n    stack.pop();\n    stack.pop();\n    stack.pop();\n  }\n\n  // if was obj value, complete it\n  if (stack[stack.length - 1] === OBJ_VAL) {\n    stack.push(OBJ_VAL_COMPLETED);\n  }\n\n  // if was arr value, complete it\n  if (stack[stack.length - 1] === ARR_VAL) {\n    stack.push(ARR_VAL_COMPLETED);\n  }\n}\nfunction _isEscaped(str, pos) {\n  var previousChar = str[pos - 1];\n  return previousChar === '\\\\' && !_isEscaped(str, pos - 1);\n}\n\n/* eslint-disable max-lines */\n\n/**\n * Takes an incomplete JSON string, and returns a hopefully valid JSON string.\n * Note that this _can_ fail, so you should check the return value is valid JSON.\n */\nfunction fixJson(incompleteJson) {\n  var stack = evaluateJson(incompleteJson);\n  return completeJson(incompleteJson, stack);\n}\n\n/** Get the size of a body. */\nfunction getBodySize(body, textEncoder) {\n  if (!body) {\n    return undefined;\n  }\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n    if (body instanceof FormData) {\n      var formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n    if (body instanceof Blob) {\n      return body.size;\n    }\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e) {\n    // just return undefined\n  }\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nfunction parseContentLengthHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n  var size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (body instanceof URLSearchParams) {\n    return body.toString();\n  }\n  if (body instanceof FormData) {\n    return _serializeFormData(body);\n  }\n  return undefined;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nfunction makeNetworkReplayBreadcrumb(type, data) {\n  if (!data) {\n    return null;\n  }\n  var startTimestamp = data.startTimestamp,\n    endTimestamp = data.endTimestamp,\n    url = data.url,\n    method = data.method,\n    statusCode = data.statusCode,\n    request = data.request,\n    response = data.response;\n  var result = {\n    type: type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: utils.dropUndefinedKeys({\n      method: method,\n      statusCode: statusCode,\n      request: request,\n      response: response\n    })\n  };\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nfunction buildSkippedNetworkRequestOrResponse(bodySize) {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED']\n    }\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nfunction buildNetworkRequestOrResponse(headers, bodySize, body) {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n  if (!bodySize) {\n    return {\n      headers: headers\n    };\n  }\n  if (!body) {\n    return {\n      headers: headers,\n      size: bodySize\n    };\n  }\n  var info = {\n    headers: headers,\n    size: bodySize\n  };\n  var _normalizeNetworkBody = normalizeNetworkBody(body),\n    normalizedBody = _normalizeNetworkBody.body,\n    warnings = _normalizeNetworkBody.warnings;\n  info.body = normalizedBody;\n  if (warnings.length > 0) {\n    info._meta = {\n      warnings: warnings\n    };\n  }\n  return info;\n}\n\n/** Filter a set of headers */\nfunction getAllowedHeaders(headers, allowedHeaders) {\n  return Object.keys(headers).reduce(function (filteredHeaders, key) {\n    var normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = headers[key];\n    }\n    return filteredHeaders;\n  }, {});\n}\nfunction _serializeFormData(formData) {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-ignore passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\nfunction normalizeNetworkBody(body) {\n  if (!body || typeof body !== 'string') {\n    return {\n      body: body,\n      warnings: []\n    };\n  }\n  var exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  if (_strIsProbablyJson(body)) {\n    try {\n      var json = exceedsSizeLimit ? fixJson(body.slice(0, NETWORK_BODY_MAX_SIZE)) : body;\n      var normalizedBody = JSON.parse(json);\n      return {\n        body: normalizedBody,\n        warnings: exceedsSizeLimit ? ['JSON_TRUNCATED'] : []\n      };\n    } catch (e3) {\n      return {\n        body: exceedsSizeLimit ? \"\".concat(body.slice(0, NETWORK_BODY_MAX_SIZE), \"\\u2026\") : body,\n        warnings: exceedsSizeLimit ? ['INVALID_JSON', 'TEXT_TRUNCATED'] : ['INVALID_JSON']\n      };\n    }\n  }\n  return {\n    body: exceedsSizeLimit ? \"\".concat(body.slice(0, NETWORK_BODY_MAX_SIZE), \"\\u2026\") : body,\n    warnings: exceedsSizeLimit ? ['TEXT_TRUNCATED'] : []\n  };\n}\nfunction _strIsProbablyJson(str) {\n  var first = str[0];\n  var last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return first === '[' && last === ']' || first === '{' && last === '}';\n}\n\n/** Match an URL against a list of strings/Regex. */\nfunction urlMatches(url, urls) {\n  var fullUrl = getFullUrl(url);\n  return utils.stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nfunction getFullUrl(url) {\n  var baseURI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WINDOW.document.baseURI;\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  var fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n  var fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n  return fullUrl;\n}\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nfunction captureFetchBreadcrumbToReplay(_x6, _x7, _x8) {\n  return _captureFetchBreadcrumbToReplay.apply(this, arguments);\n}\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction _captureFetchBreadcrumbToReplay() {\n  _captureFetchBreadcrumbToReplay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(breadcrumb, hint, options) {\n    var data, result;\n    return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return _prepareFetchData(breadcrumb, hint, options);\n        case 3:\n          data = _context12.sent;\n          // Create a replay performance entry from this breadcrumb\n          result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n          addNetworkBreadcrumb(options.replay, result);\n          _context12.next = 11;\n          break;\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay] Failed to capture fetch breadcrumb', _context12.t0);\n        case 11:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee11, null, [[0, 8]]);\n  }));\n  return _captureFetchBreadcrumbToReplay.apply(this, arguments);\n}\nfunction enrichFetchBreadcrumb(breadcrumb, hint, options) {\n  var input = hint.input,\n    response = hint.response;\n  var body = _getFetchRequestArgBody(input);\n  var reqSize = getBodySize(body, options.textEncoder);\n  var resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\nfunction _prepareFetchData(_x9, _x10, _x11) {\n  return _prepareFetchData2.apply(this, arguments);\n}\nfunction _prepareFetchData2() {\n  _prepareFetchData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(breadcrumb, hint, options) {\n    var startTimestamp, endTimestamp, _breadcrumb$data2, url, method, _breadcrumb$data2$sta, statusCode, requestBodySize, responseBodySize, captureDetails, request, response;\n    return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          startTimestamp = hint.startTimestamp, endTimestamp = hint.endTimestamp;\n          _breadcrumb$data2 = breadcrumb.data, url = _breadcrumb$data2.url, method = _breadcrumb$data2.method, _breadcrumb$data2$sta = _breadcrumb$data2.status_code, statusCode = _breadcrumb$data2$sta === void 0 ? 0 : _breadcrumb$data2$sta, requestBodySize = _breadcrumb$data2.request_body_size, responseBodySize = _breadcrumb$data2.response_body_size;\n          captureDetails = urlMatches(url, options.networkDetailAllowUrls);\n          request = captureDetails ? _getRequestInfo(options, hint.input, requestBodySize) : buildSkippedNetworkRequestOrResponse(requestBodySize);\n          _context13.next = 6;\n          return _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n        case 6:\n          response = _context13.sent;\n          return _context13.abrupt(\"return\", {\n            startTimestamp: startTimestamp,\n            endTimestamp: endTimestamp,\n            url: url,\n            method: method,\n            statusCode: statusCode,\n            request: request,\n            response: response\n          });\n        case 8:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee12);\n  }));\n  return _prepareFetchData2.apply(this, arguments);\n}\nfunction _getRequestInfo(_ref27, input, requestBodySize) {\n  var networkCaptureBodies = _ref27.networkCaptureBodies,\n    networkRequestHeaders = _ref27.networkRequestHeaders;\n  var headers = getRequestHeaders(input, networkRequestHeaders);\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  var requestBody = _getFetchRequestArgBody(input);\n  var bodyStr = getBodyString(requestBody);\n  return buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n}\nfunction _getResponseInfo(_x12, _x13, _x14, _x15) {\n  return _getResponseInfo2.apply(this, arguments);\n}\nfunction _getResponseInfo2() {\n  _getResponseInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(captureDetails, _ref28, response, responseBodySize) {\n    var networkCaptureBodies, textEncoder, networkResponseHeaders, headers, res, bodyText, size;\n    return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          networkCaptureBodies = _ref28.networkCaptureBodies, textEncoder = _ref28.textEncoder, networkResponseHeaders = _ref28.networkResponseHeaders;\n          if (!(!captureDetails && responseBodySize !== undefined)) {\n            _context14.next = 3;\n            break;\n          }\n          return _context14.abrupt(\"return\", buildSkippedNetworkRequestOrResponse(responseBodySize));\n        case 3:\n          headers = getAllHeaders(response.headers, networkResponseHeaders);\n          if (!(!networkCaptureBodies && responseBodySize !== undefined)) {\n            _context14.next = 6;\n            break;\n          }\n          return _context14.abrupt(\"return\", buildNetworkRequestOrResponse(headers, responseBodySize, undefined));\n        case 6:\n          _context14.prev = 6;\n          // We have to clone this, as the body can only be read once\n          res = response.clone();\n          _context14.next = 10;\n          return _parseFetchBody(res);\n        case 10:\n          bodyText = _context14.sent;\n          size = bodyText && bodyText.length && responseBodySize === undefined ? getBodySize(bodyText, textEncoder) : responseBodySize;\n          if (captureDetails) {\n            _context14.next = 14;\n            break;\n          }\n          return _context14.abrupt(\"return\", buildSkippedNetworkRequestOrResponse(size));\n        case 14:\n          if (!networkCaptureBodies) {\n            _context14.next = 16;\n            break;\n          }\n          return _context14.abrupt(\"return\", buildNetworkRequestOrResponse(headers, size, bodyText));\n        case 16:\n          return _context14.abrupt(\"return\", buildNetworkRequestOrResponse(headers, size, undefined));\n        case 19:\n          _context14.prev = 19;\n          _context14.t0 = _context14[\"catch\"](6);\n          return _context14.abrupt(\"return\", buildNetworkRequestOrResponse(headers, responseBodySize, undefined));\n        case 22:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee13, null, [[6, 19]]);\n  }));\n  return _getResponseInfo2.apply(this, arguments);\n}\nfunction _parseFetchBody(_x16) {\n  return _parseFetchBody2.apply(this, arguments);\n}\nfunction _parseFetchBody2() {\n  _parseFetchBody2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(response) {\n    return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return response.text();\n        case 3:\n          return _context15.abrupt(\"return\", _context15.sent);\n        case 6:\n          _context15.prev = 6;\n          _context15.t0 = _context15[\"catch\"](0);\n          return _context15.abrupt(\"return\", undefined);\n        case 9:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee14, null, [[0, 6]]);\n  }));\n  return _parseFetchBody2.apply(this, arguments);\n}\nfunction _getFetchRequestArgBody() {\n  var fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || _typeof(fetchArgs[1]) !== 'object') {\n    return undefined;\n  }\n  return fetchArgs[1].body;\n}\nfunction getAllHeaders(headers, allowedHeaders) {\n  var allHeaders = {};\n  allowedHeaders.forEach(function (header) {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header);\n    }\n  });\n  return allHeaders;\n}\nfunction getRequestHeaders(fetchArgs, allowedHeaders) {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0], allowedHeaders);\n  }\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1], allowedHeaders);\n  }\n  return {};\n}\nfunction getHeadersFromOptions(input, allowedHeaders) {\n  if (!input) {\n    return {};\n  }\n  var headers = input.headers;\n  if (!headers) {\n    return {};\n  }\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n  return getAllowedHeaders(headers, allowedHeaders);\n}\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nfunction captureXhrBreadcrumbToReplay(_x17, _x18, _x19) {\n  return _captureXhrBreadcrumbToReplay.apply(this, arguments);\n}\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction _captureXhrBreadcrumbToReplay() {\n  _captureXhrBreadcrumbToReplay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(breadcrumb, hint, options) {\n    var data, result;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          try {\n            data = _prepareXhrData(breadcrumb, hint, options); // Create a replay performance entry from this breadcrumb\n            result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n            addNetworkBreadcrumb(options.replay, result);\n          } catch (error) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay] Failed to capture fetch breadcrumb', error);\n          }\n        case 1:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  }));\n  return _captureXhrBreadcrumbToReplay.apply(this, arguments);\n}\nfunction enrichXhrBreadcrumb(breadcrumb, hint, options) {\n  var xhr = hint.xhr,\n    input = hint.input;\n  var reqSize = getBodySize(input, options.textEncoder);\n  var resSize = xhr.getResponseHeader('content-length') ? parseContentLengthHeader(xhr.getResponseHeader('content-length')) : getBodySize(xhr.response, options.textEncoder);\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\nfunction _prepareXhrData(breadcrumb, hint, options) {\n  var startTimestamp = hint.startTimestamp,\n    endTimestamp = hint.endTimestamp,\n    input = hint.input,\n    xhr = hint.xhr;\n  var _breadcrumb$data = breadcrumb.data,\n    url = _breadcrumb$data.url,\n    method = _breadcrumb$data.method,\n    _breadcrumb$data$stat = _breadcrumb$data.status_code,\n    statusCode = _breadcrumb$data$stat === void 0 ? 0 : _breadcrumb$data$stat,\n    requestBodySize = _breadcrumb$data.request_body_size,\n    responseBodySize = _breadcrumb$data.response_body_size;\n  if (!url) {\n    return null;\n  }\n  if (!urlMatches(url, options.networkDetailAllowUrls)) {\n    var _request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    var _response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp: startTimestamp,\n      endTimestamp: endTimestamp,\n      url: url,\n      method: method,\n      statusCode: statusCode,\n      request: _request,\n      response: _response\n    };\n  }\n  var xhrInfo = xhr[utils.SENTRY_XHR_DATA_KEY];\n  var networkRequestHeaders = xhrInfo ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders) : {};\n  var networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n  var request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, options.networkCaptureBodies ? getBodyString(input) : undefined);\n  var response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, options.networkCaptureBodies ? hint.xhr.responseText : undefined);\n  return {\n    startTimestamp: startTimestamp,\n    endTimestamp: endTimestamp,\n    url: url,\n    method: method,\n    statusCode: statusCode,\n    request: request,\n    response: response\n  };\n}\nfunction getResponseHeaders(xhr) {\n  var headers = xhr.getAllResponseHeaders();\n  if (!headers) {\n    return {};\n  }\n  return headers.split('\\r\\n').reduce(function (acc, line) {\n    var _line$split = line.split(': '),\n      _line$split2 = _slicedToArray(_line$split, 2),\n      key = _line$split2[0],\n      value = _line$split2[1];\n    acc[key.toLowerCase()] = value;\n    return acc;\n  }, {});\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  var client = core.getCurrentHub().getClient();\n  try {\n    var textEncoder = new TextEncoder();\n    var _replay$getOptions = replay.getOptions(),\n      networkDetailAllowUrls = _replay$getOptions.networkDetailAllowUrls,\n      networkCaptureBodies = _replay$getOptions.networkCaptureBodies,\n      networkRequestHeaders = _replay$getOptions.networkRequestHeaders,\n      networkResponseHeaders = _replay$getOptions.networkResponseHeaders;\n    var options = {\n      replay: replay,\n      textEncoder: textEncoder,\n      networkDetailAllowUrls: networkDetailAllowUrls,\n      networkCaptureBodies: networkCaptureBodies,\n      networkRequestHeaders: networkRequestHeaders,\n      networkResponseHeaders: networkResponseHeaders\n    };\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', function (breadcrumb, hint) {\n        return beforeAddNetworkBreadcrumb(options, breadcrumb, hint);\n      });\n    } else {\n      // Fallback behavior\n      utils.addInstrumentationHandler('fetch', handleFetchSpanListener(replay));\n      utils.addInstrumentationHandler('xhr', handleXhrSpanListener(replay));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(options, breadcrumb, hint) {\n  if (!breadcrumb.data) {\n    return;\n  }\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint, options);\n      void captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint, options);\n      void captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('Error when enriching network breadcrumb');\n  }\n}\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\nvar _LAST_BREADCRUMB = null;\nvar handleScopeListener = function handleScopeListener(replay) {\n  return function (scope) {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    var result = handleScope(scope);\n    if (!result) {\n      return;\n    }\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/**\n * An event handler to handle scope changes.\n */\nfunction handleScope(scope) {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  var newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n  _LAST_BREADCRUMB = newBreadcrumb;\n  if (newBreadcrumb.category && (['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) || newBreadcrumb.category.startsWith('ui.'))) {\n    return null;\n  }\n  if (newBreadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(newBreadcrumb);\n  }\n  return createBreadcrumb(newBreadcrumb);\n}\n\n/** exported for tests only */\nfunction normalizeConsoleBreadcrumb(breadcrumb) {\n  var args = breadcrumb.data && breadcrumb.data.arguments;\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n  var isTruncated = false;\n\n  // Avoid giant args captures\n  var normalizedArgs = args.map(function (arg) {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return \"\".concat(arg.slice(0, CONSOLE_ARG_MAX_SIZE), \"\\u2026\");\n      }\n      return arg;\n    }\n    if (_typeof(arg) === 'object') {\n      try {\n        var normalizedArg = utils.normalize(arg, 7);\n        var stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          var fixedJson = fixJson(stringified.slice(0, CONSOLE_ARG_MAX_SIZE));\n          var json = JSON.parse(fixedJson);\n          // We only set this after JSON.parse() was successfull, so we know we didn't run into `catch`\n          isTruncated = true;\n          return json;\n        }\n        return normalizedArg;\n      } catch (e) {\n        // fall back to default\n      }\n    }\n    return arg;\n  });\n  return createBreadcrumb(_objectSpread(_objectSpread({}, breadcrumb), {}, {\n    data: _objectSpread(_objectSpread({}, breadcrumb.data), {}, {\n      arguments: normalizedArgs\n    }, isTruncated ? {\n      _meta: {\n        warnings: ['CONSOLE_ARG_TRUNCATED']\n      }\n    } : {})\n  }));\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  var scope = core.getCurrentHub().getScope();\n  var client = core.getCurrentHub().getClient();\n  if (scope) {\n    scope.addScopeListener(handleScopeListener(replay));\n  }\n  utils.addInstrumentationHandler('dom', handleDomListener(replay));\n  utils.addInstrumentationHandler('history', handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  core.addGlobalEventProcessor(handleGlobalEventListener(replay, !hasHooks(client)));\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', function (dsc) {\n      var replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        dsc.replay_id = replayId;\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client) {\n  return !!(client && client.on);\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nfunction addMemoryEntry(_x20) {\n  return _addMemoryEntry.apply(this, arguments);\n}\nfunction _addMemoryEntry() {\n  _addMemoryEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(replay) {\n    return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          return _context17.abrupt(\"return\", Promise.all(createPerformanceSpans(replay, [\n          // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n          createMemoryEntry(WINDOW.performance.memory)])));\n        case 4:\n          _context17.prev = 4;\n          _context17.t0 = _context17[\"catch\"](0);\n          return _context17.abrupt(\"return\", []);\n        case 7:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee16, null, [[0, 4]]);\n  }));\n  return _addMemoryEntry.apply(this, arguments);\n}\nfunction createMemoryEntry(memoryEntry) {\n  var jsHeapSizeLimit = memoryEntry.jsHeapSizeLimit,\n    totalJSHeapSize = memoryEntry.totalJSHeapSize,\n    usedJSHeapSize = memoryEntry.usedJSHeapSize;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  var time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit: jsHeapSizeLimit,\n        totalJSHeapSize: totalJSHeapSize,\n        usedJSHeapSize: usedJSHeapSize\n      }\n    }\n  };\n}\n\n// Map entryType -> function to normalize data for event\n// @ts-ignore TODO: entry type does not fit the create* functions entry type\nvar ENTRY_TYPES = _defineProperty({\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry\n}, 'largest-contentful-paint', createLargestContentfulPaint);\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(entries) {\n  return entries.map(createPerformanceEntry).filter(Boolean);\n}\nfunction createPerformanceEntry(entry) {\n  if (ENTRY_TYPES[entry.entryType] === undefined) {\n    return null;\n  }\n  return ENTRY_TYPES[entry.entryType](entry);\n}\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((utils.browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\nfunction createPaintEntry(entry) {\n  var duration = entry.duration,\n    entryType = entry.entryType,\n    name = entry.name,\n    startTime = entry.startTime;\n  var start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name: name,\n    start: start,\n    end: start + duration,\n    data: undefined\n  };\n}\nfunction createNavigationEntry(entry) {\n  var entryType = entry.entryType,\n    name = entry.name,\n    decodedBodySize = entry.decodedBodySize,\n    duration = entry.duration,\n    domComplete = entry.domComplete,\n    encodedBodySize = entry.encodedBodySize,\n    domContentLoadedEventStart = entry.domContentLoadedEventStart,\n    domContentLoadedEventEnd = entry.domContentLoadedEventEnd,\n    domInteractive = entry.domInteractive,\n    loadEventStart = entry.loadEventStart,\n    loadEventEnd = entry.loadEventEnd,\n    redirectCount = entry.redirectCount,\n    startTime = entry.startTime,\n    transferSize = entry.transferSize,\n    type = entry.type;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n  return {\n    type: \"\".concat(entryType, \".\").concat(type),\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name: name,\n    data: {\n      size: transferSize,\n      decodedBodySize: decodedBodySize,\n      encodedBodySize: encodedBodySize,\n      duration: duration,\n      domInteractive: domInteractive,\n      domContentLoadedEventStart: domContentLoadedEventStart,\n      domContentLoadedEventEnd: domContentLoadedEventEnd,\n      loadEventStart: loadEventStart,\n      loadEventEnd: loadEventEnd,\n      domComplete: domComplete,\n      redirectCount: redirectCount\n    }\n  };\n}\nfunction createResourceEntry(entry) {\n  var entryType = entry.entryType,\n    initiatorType = entry.initiatorType,\n    name = entry.name,\n    responseEnd = entry.responseEnd,\n    startTime = entry.startTime,\n    decodedBodySize = entry.decodedBodySize,\n    encodedBodySize = entry.encodedBodySize,\n    responseStatus = entry.responseStatus,\n    transferSize = entry.transferSize;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n  return {\n    type: \"\".concat(entryType, \".\").concat(initiatorType),\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name: name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize: decodedBodySize,\n      encodedBodySize: encodedBodySize\n    }\n  };\n}\nfunction createLargestContentfulPaint(entry) {\n  var entryType = entry.entryType,\n    startTime = entry.startTime,\n    size = entry.size;\n  var startTimeOrNavigationActivation = 0;\n  if (WINDOW.performance) {\n    var navEntry = WINDOW.performance.getEntriesByType('navigation')[0];\n\n    // See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21\n    startTimeOrNavigationActivation = navEntry && navEntry.activationStart || 0;\n  }\n\n  // value is in ms\n  var value = Math.max(startTime - startTimeOrNavigationActivation, 0);\n  // LCP doesn't have a \"duration\", it just happens at a single point in time.\n  // But the UI expects both, so use end (in seconds) for both timestamps.\n  var end = getAbsoluteTime(startTimeOrNavigationActivation) + value / 1000;\n  return {\n    type: entryType,\n    name: entryType,\n    start: end,\n    end: end,\n    data: {\n      value: value,\n      // LCP \"duration\" in ms\n      size: size,\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      nodeId: record.mirror.getId(entry.element)\n    }\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  var callbackReturnValue;\n  var timerId;\n  var maxTimerId;\n  var maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n    return callbackReturnValue;\n  }\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar EventType;\n(function (EventType) {\n  var DomContentLoaded = 0;\n  EventType[EventType[\"DomContentLoaded\"] = DomContentLoaded] = \"DomContentLoaded\";\n  var Load = 1;\n  EventType[EventType[\"Load\"] = Load] = \"Load\";\n  var FullSnapshot = 2;\n  EventType[EventType[\"FullSnapshot\"] = FullSnapshot] = \"FullSnapshot\";\n  var IncrementalSnapshot = 3;\n  EventType[EventType[\"IncrementalSnapshot\"] = IncrementalSnapshot] = \"IncrementalSnapshot\";\n  var Meta = 4;\n  EventType[EventType[\"Meta\"] = Meta] = \"Meta\";\n  var Custom = 5;\n  EventType[EventType[\"Custom\"] = Custom] = \"Custom\";\n  var Plugin = 6;\n  EventType[EventType[\"Plugin\"] = Plugin] = \"Plugin\";\n})(EventType || (EventType = {}));\n\n/**\n * This is a partial copy of rrweb's eventWithTime type which only contains the properties\n * we specifcally need in the SDK.\n */\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  var hadFirstEvent = false;\n  return function (event, _isCheckout) {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.warn('[Replay] Received replay event after session expired.');\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    var isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(function () {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // We need to clear existing events on a checkout, otherwise they are\n      // incremental event updates and should be appended\n      void addEvent(replay, event, isCheckout);\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time.\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      void addSettingsEvent(replay, isCheckout);\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && replay.session && replay.eventBuffer) {\n        var earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          replay.session.started = earliestEvent;\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      // Flush immediately so that we do not miss the first segment, otherwise\n      // it can prevent loading on the UI. This will cause an increase in short\n      // replays (e.g. opening and closing a tab quickly), but these can be\n      // filtered on the UI.\n      if (replay.recordingMode === 'session') {\n        // We want to ensure the worker is ready, as otherwise we'd always send the first event uncompressed\n        void replay.flushImmediate();\n      }\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nfunction createOptionsEvent(replay) {\n  var options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0\n      }\n    }\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay, isCheckout) {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return Promise.resolve(null);\n  }\n  return addEvent(replay, createOptionsEvent(replay), false);\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(replayEvent, recordingData, dsn, tunnel) {\n  return utils.createEnvelope(utils.createEventEnvelopeHeaders(replayEvent, utils.getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn), [[{\n    type: 'replay_event'\n  }, replayEvent], [{\n    type: 'replay_recording',\n    // If string then we need to encode to UTF8, otherwise will have\n    // wrong size. TextEncoder has similar browser support to\n    // MutationObserver, although it does not accept IE11.\n    length: typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length\n  }, recordingData]]);\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData(_ref29) {\n  var recordingData = _ref29.recordingData,\n    headers = _ref29.headers;\n  var payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  var replayHeaders = \"\".concat(JSON.stringify(headers), \"\\n\");\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = \"\".concat(replayHeaders).concat(recordingData);\n  } else {\n    var enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    var sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nfunction prepareReplayEvent(_x21) {\n  return _prepareReplayEvent.apply(this, arguments);\n}\n/**\n * Send replay attachment using `fetch()`\n */\nfunction _prepareReplayEvent() {\n  _prepareReplayEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(_ref30) {\n    var client, scope, event_id, event, integrations, preparedEvent, metadata, _ref38, name, version;\n    return _regeneratorRuntime().wrap(function _callee17$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          client = _ref30.client, scope = _ref30.scope, event_id = _ref30.replayId, event = _ref30.event;\n          integrations = _typeof(client._integrations) === 'object' && client._integrations !== null && !Array.isArray(client._integrations) ? Object.keys(client._integrations) : undefined;\n          _context18.next = 4;\n          return core.prepareEvent(client.getOptions(), event, {\n            event_id: event_id,\n            integrations: integrations\n          }, scope);\n        case 4:\n          preparedEvent = _context18.sent;\n          if (preparedEvent) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.abrupt(\"return\", null);\n        case 7:\n          // This normally happens in browser client \"_prepareEvent\"\n          // but since we do not use this private method from the client, but rather the plain import\n          // we need to do this manually.\n          preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n          // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n          metadata = client.getSdkMetadata && client.getSdkMetadata();\n          _ref38 = metadata && metadata.sdk || {}, name = _ref38.name, version = _ref38.version;\n          preparedEvent.sdk = _objectSpread(_objectSpread({}, preparedEvent.sdk), {}, {\n            name: name || 'sentry.javascript.unknown',\n            version: version || '0.0.0'\n          });\n          return _context18.abrupt(\"return\", preparedEvent);\n        case 12:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee17);\n  }));\n  return _prepareReplayEvent.apply(this, arguments);\n}\nfunction sendReplayRequest(_x22) {\n  return _sendReplayRequest.apply(this, arguments);\n}\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nfunction _sendReplayRequest() {\n  _sendReplayRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(_ref31) {\n    var recordingData, replayId, segment_id, eventContext, timestamp, session, preparedRecordingData, urls, errorIds, traceIds, initialTimestamp, hub, client, scope, transport, dsn, baseEvent, replayEvent, envelope, response, error;\n    return _regeneratorRuntime().wrap(function _callee18$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          recordingData = _ref31.recordingData, replayId = _ref31.replayId, segment_id = _ref31.segmentId, eventContext = _ref31.eventContext, timestamp = _ref31.timestamp, session = _ref31.session;\n          preparedRecordingData = prepareRecordingData({\n            recordingData: recordingData,\n            headers: {\n              segment_id: segment_id\n            }\n          });\n          urls = eventContext.urls, errorIds = eventContext.errorIds, traceIds = eventContext.traceIds, initialTimestamp = eventContext.initialTimestamp;\n          hub = core.getCurrentHub();\n          client = hub.getClient();\n          scope = hub.getScope();\n          transport = client && client.getTransport();\n          dsn = client && client.getDsn();\n          if (!(!client || !scope || !transport || !dsn || !session.sampled)) {\n            _context19.next = 10;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 10:\n          baseEvent = {\n            type: REPLAY_EVENT_NAME,\n            replay_start_timestamp: initialTimestamp / 1000,\n            timestamp: timestamp / 1000,\n            error_ids: errorIds,\n            trace_ids: traceIds,\n            urls: urls,\n            replay_id: replayId,\n            segment_id: segment_id,\n            replay_type: session.sampled\n          };\n          _context19.next = 13;\n          return prepareReplayEvent({\n            scope: scope,\n            client: client,\n            replayId: replayId,\n            event: baseEvent\n          });\n        case 13:\n          replayEvent = _context19.sent;\n          if (replayEvent) {\n            _context19.next = 18;\n            break;\n          }\n          // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n          client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('An event processor returned `null`, will not send event.');\n          return _context19.abrupt(\"return\");\n        case 18:\n          /*\n          For reference, the fully built event looks something like this:\n          {\n              \"type\": \"replay_event\",\n              \"timestamp\": 1670837008.634,\n              \"error_ids\": [\n                  \"errorId\"\n              ],\n              \"trace_ids\": [\n                  \"traceId\"\n              ],\n              \"urls\": [\n                  \"https://example.com\"\n              ],\n              \"replay_id\": \"eventId\",\n              \"segment_id\": 3,\n              \"replay_type\": \"error\",\n              \"platform\": \"javascript\",\n              \"event_id\": \"eventId\",\n              \"environment\": \"production\",\n              \"sdk\": {\n                  \"integrations\": [\n                      \"BrowserTracing\",\n                      \"Replay\"\n                  ],\n                  \"name\": \"sentry.javascript.browser\",\n                  \"version\": \"7.25.0\"\n              },\n              \"sdkProcessingMetadata\": {},\n              \"contexts\": {\n              },\n          }\n          */\n          envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n          _context19.prev = 19;\n          _context19.next = 22;\n          return transport.send(envelope);\n        case 22:\n          response = _context19.sent;\n          _context19.next = 30;\n          break;\n        case 25:\n          _context19.prev = 25;\n          _context19.t0 = _context19[\"catch\"](19);\n          error = new Error(UNABLE_TO_SEND_REPLAY);\n          try {\n            // In case browsers don't allow this property to be writable\n            // @ts-ignore This needs lib es2022 and newer\n            error.cause = _context19.t0;\n          } catch (e) {\n            // nothing to do\n          }\n          throw error;\n        case 30:\n          if (response) {\n            _context19.next = 32;\n            break;\n          }\n          return _context19.abrupt(\"return\", response);\n        case 32:\n          if (!(typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300))) {\n            _context19.next = 34;\n            break;\n          }\n          throw new TransportStatusCodeError(response.statusCode);\n        case 34:\n          return _context19.abrupt(\"return\", response);\n        case 35:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee18, null, [[19, 25]]);\n  }));\n  return _sendReplayRequest.apply(this, arguments);\n}\nvar TransportStatusCodeError = /*#__PURE__*/function (_Error) {\n  \"use strict\";\n\n  _inherits(TransportStatusCodeError, _Error);\n  var _super = _createSuper(TransportStatusCodeError);\n  function TransportStatusCodeError(statusCode) {\n    _classCallCheck(this, TransportStatusCodeError);\n    return _super.call(this, \"Transport returned status code \".concat(statusCode));\n  }\n  return _createClass(TransportStatusCodeError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Finalize and send the current replay event to Sentry\n */\nfunction sendReplay(_x23) {\n  return _sendReplay.apply(this, arguments);\n}\n/* eslint-disable max-lines */\n// TODO: We might want to split this file up\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nfunction _sendReplay() {\n  _sendReplay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(replayData) {\n    var retryConfig,\n      recordingData,\n      options,\n      error,\n      _args20 = arguments;\n    return _regeneratorRuntime().wrap(function _callee20$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          retryConfig = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {\n            count: 0,\n            interval: RETRY_BASE_INTERVAL\n          };\n          recordingData = replayData.recordingData, options = replayData.options; // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n          if (recordingData.length) {\n            _context21.next = 4;\n            break;\n          }\n          return _context21.abrupt(\"return\");\n        case 4:\n          _context21.prev = 4;\n          _context21.next = 7;\n          return sendReplayRequest(replayData);\n        case 7:\n          return _context21.abrupt(\"return\", true);\n        case 10:\n          _context21.prev = 10;\n          _context21.t0 = _context21[\"catch\"](4);\n          if (!(_context21.t0 instanceof TransportStatusCodeError)) {\n            _context21.next = 14;\n            break;\n          }\n          throw _context21.t0;\n        case 14:\n          // Capture error for every failed replay\n          core.setContext('Replays', {\n            _retryCount: retryConfig.count\n          });\n          if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && options._experiments && options._experiments.captureExceptions) {\n            core.captureException(_context21.t0);\n          }\n\n          // If an error happened here, it's likely that uploading the attachment\n          // failed, we'll can retry with the same events payload\n          if (!(retryConfig.count >= RETRY_MAX_COUNT)) {\n            _context21.next = 20;\n            break;\n          }\n          error = new Error(\"\".concat(UNABLE_TO_SEND_REPLAY, \" - max retries exceeded\"));\n          try {\n            // In case browsers don't allow this property to be writable\n            // @ts-ignore This needs lib es2022 and newer\n            error.cause = _context21.t0;\n          } catch (e) {\n            // nothing to do\n          }\n          throw error;\n        case 20:\n          // will retry in intervals of 5, 10, 30\n          retryConfig.interval *= ++retryConfig.count;\n          _context21.next = 23;\n          return new Promise(function (resolve, reject) {\n            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n              return _regeneratorRuntime().wrap(function _callee19$(_context20) {\n                while (1) switch (_context20.prev = _context20.next) {\n                  case 0:\n                    _context20.prev = 0;\n                    _context20.next = 3;\n                    return sendReplay(replayData, retryConfig);\n                  case 3:\n                    resolve(true);\n                    _context20.next = 9;\n                    break;\n                  case 6:\n                    _context20.prev = 6;\n                    _context20.t0 = _context20[\"catch\"](0);\n                    reject(_context20.t0);\n                  case 9:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }, _callee19, null, [[0, 6]]);\n            })), retryConfig.interval);\n          });\n        case 23:\n          return _context21.abrupt(\"return\", _context21.sent);\n        case 24:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee20, null, [[4, 10]]);\n  }));\n  return _sendReplay.apply(this, arguments);\n}\nvar ReplayContainer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ReplayContainer(_ref32) {\n    var _this12 = this;\n    var options = _ref32.options,\n      recordingOptions = _ref32.recordingOptions;\n    _classCallCheck(this, ReplayContainer);\n    ReplayContainer.prototype.__init.call(this);\n    ReplayContainer.prototype.__init2.call(this);\n    ReplayContainer.prototype.__init3.call(this);\n    ReplayContainer.prototype.__init4.call(this);\n    ReplayContainer.prototype.__init5.call(this);\n    ReplayContainer.prototype.__init6.call(this);\n    ReplayContainer.prototype.__init7.call(this);\n    ReplayContainer.prototype.__init8.call(this);\n    ReplayContainer.prototype.__init9.call(this);\n    ReplayContainer.prototype.__init10.call(this);\n    ReplayContainer.prototype.__init11.call(this);\n    ReplayContainer.prototype.__init12.call(this);\n    ReplayContainer.prototype.__init13.call(this);\n    ReplayContainer.prototype.__init14.call(this);\n    ReplayContainer.prototype.__init15.call(this);\n    ReplayContainer.prototype.__init16.call(this);\n    ReplayContainer.prototype.__init17.call(this);\n    ReplayContainer.prototype.__init18.call(this);\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n    this._debouncedFlush = debounce(function () {\n      return _this12._flush();\n    }, this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay\n    });\n  }\n\n  /** Get the event context. */\n  _createClass(ReplayContainer, [{\n    key: \"__init\",\n    value: function __init() {\n      this.eventBuffer = null;\n    }\n\n    /**\n     * List of PerformanceEntry from PerformanceObserver\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this.performanceEvents = [];\n    }\n\n    /**\n     * Recording can happen in one of three modes:\n     *   - session: Record the whole session, sending it continuously\n     *   - buffer: Always keep the last 60s of recording, requires:\n     *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n     *     - or calling `flush()` to send the replay\n     */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.recordingMode = 'session';\n    }\n\n    /**\n     * These are here so we can overwrite them in tests etc.\n     * @hidden\n     */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this.timeouts = {\n        sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n        sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,\n        maxSessionLife: MAX_SESSION_LIFE\n      };\n    }\n\n    /**\n     * Options to pass to `rrweb.record()`\n     */\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this._performanceObserver = null;\n    }\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this._flushLock = null;\n    }\n\n    /**\n     * Timestamp of the last user activity. This lives across sessions.\n     */\n  }, {\n    key: \"__init7\",\n    value: function __init7() {\n      this._lastActivity = Date.now();\n    }\n\n    /**\n     * Is the integration currently active?\n     */\n  }, {\n    key: \"__init8\",\n    value: function __init8() {\n      this._isEnabled = false;\n    }\n\n    /**\n     * Paused is a state where:\n     * - DOM Recording is not listening at all\n     * - Nothing will be added to event buffer (e.g. core SDK events)\n     */\n  }, {\n    key: \"__init9\",\n    value: function __init9() {\n      this._isPaused = false;\n    }\n\n    /**\n     * Have we attached listeners to the core SDK?\n     * Note we have to track this as there is no way to remove instrumentation handlers.\n     */\n  }, {\n    key: \"__init10\",\n    value: function __init10() {\n      this._hasInitializedCoreListeners = false;\n    }\n\n    /**\n     * Function to stop recording\n     */\n  }, {\n    key: \"__init11\",\n    value: function __init11() {\n      this._stopRecording = null;\n    }\n  }, {\n    key: \"__init12\",\n    value: function __init12() {\n      this._context = {\n        errorIds: new Set(),\n        traceIds: new Set(),\n        urls: [],\n        initialTimestamp: Date.now(),\n        initialUrl: ''\n      };\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this._context;\n    }\n\n    /** If recording is currently enabled. */\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this._isEnabled;\n    }\n\n    /** If recording is currently paused. */\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return this._isPaused;\n    }\n\n    /** Get the replay integration options. */\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      return this._options;\n    }\n\n    /**\n     * Initializes the plugin based on sampling configuration. Should not be\n     * called outside of constructor.\n     */\n  }, {\n    key: \"initializeSampling\",\n    value: function initializeSampling() {\n      var _this$_options = this._options,\n        errorSampleRate = _this$_options.errorSampleRate,\n        sessionSampleRate = _this$_options.sessionSampleRate;\n\n      // If neither sample rate is > 0, then do nothing - user will need to call one of\n      // `start()` or `startBuffering` themselves.\n      if (errorSampleRate <= 0 && sessionSampleRate <= 0) {\n        return;\n      }\n\n      // Otherwise if there is _any_ sample rate set, try to load an existing\n      // session, or create a new one.\n      var isSessionSampled = this._loadAndCheckSession();\n      if (!isSessionSampled) {\n        // This should only occur if `errorSampleRate` is 0 and was unsampled for\n        // session-based replay. In this case there is nothing to do.\n        return;\n      }\n      if (!this.session) {\n        // This should not happen, something wrong has occurred\n        this._handleException(new Error('Unable to initialize and create session'));\n        return;\n      }\n      if (this.session.sampled && this.session.sampled !== 'session') {\n        // If not sampled as session-based, then recording mode will be `buffer`\n        // Note that we don't explicitly check if `sampled === 'buffer'` because we\n        // could have sessions from Session storage that are still `error` from\n        // prior SDK version.\n        this.recordingMode = 'buffer';\n      }\n      this._initializeRecording();\n    }\n\n    /**\n     * Start a replay regardless of sampling rate. Calling this will always\n     * create a new session. Will throw an error if replay is already in progress.\n     *\n     * Creates or loads a session, attaches listeners to varying events (DOM,\n     * _performanceObserver, Recording, Sentry SDK, etc)\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this._isEnabled && this.recordingMode === 'session') {\n        throw new Error('Replay recording is already in progress');\n      }\n      if (this._isEnabled && this.recordingMode === 'buffer') {\n        throw new Error('Replay buffering is in progress, call `flush()` to save the replay');\n      }\n      var previousSessionId = this.session && this.session.id;\n      var _getSession = getSession({\n          timeouts: this.timeouts,\n          stickySession: Boolean(this._options.stickySession),\n          currentSession: this.session,\n          // This is intentional: create a new session-based replay when calling `start()`\n          sessionSampleRate: 1,\n          allowBuffering: false\n        }),\n        session = _getSession.session;\n      session.previousSessionId = previousSessionId;\n      this.session = session;\n      this._initializeRecording();\n    }\n\n    /**\n     * Start replay buffering. Buffers until `flush()` is called or, if\n     * `replaysOnErrorSampleRate` > 0, an error occurs.\n     */\n  }, {\n    key: \"startBuffering\",\n    value: function startBuffering() {\n      if (this._isEnabled) {\n        throw new Error('Replay recording is already in progress');\n      }\n      var previousSessionId = this.session && this.session.id;\n      var _getSession2 = getSession({\n          timeouts: this.timeouts,\n          stickySession: Boolean(this._options.stickySession),\n          currentSession: this.session,\n          sessionSampleRate: 0,\n          allowBuffering: true\n        }),\n        session = _getSession2.session;\n      session.previousSessionId = previousSessionId;\n      this.session = session;\n      this.recordingMode = 'buffer';\n      this._initializeRecording();\n    }\n\n    /**\n     * Start recording.\n     *\n     * Note that this will cause a new DOM checkout\n     */\n  }, {\n    key: \"startRecording\",\n    value: function startRecording() {\n      try {\n        this._stopRecording = record(_objectSpread(_objectSpread(_objectSpread({}, this._recordingOptions), this.recordingMode === 'buffer' && {\n          checkoutEveryNms: BUFFER_CHECKOUT_TIME\n        }), {}, {\n          emit: getHandleRecordingEmit(this),\n          onMutation: this._onMutationHandler\n        }));\n      } catch (err) {\n        this._handleException(err);\n      }\n    }\n\n    /**\n     * Stops the recording, if it was running.\n     *\n     * Returns true if it was previously stopped, or is now stopped,\n     * otherwise false.\n     */\n  }, {\n    key: \"stopRecording\",\n    value: function stopRecording() {\n      try {\n        if (this._stopRecording) {\n          this._stopRecording();\n          this._stopRecording = undefined;\n        }\n        return true;\n      } catch (err) {\n        this._handleException(err);\n        return false;\n      }\n    }\n\n    /**\n     * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n     * does not support a teardown\n     */\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(reason) {\n        var msg, log;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (this._isEnabled) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 2:\n              _context7.prev = 2;\n              if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n                msg = \"[Replay] Stopping Replay\".concat(reason ? \" triggered by \".concat(reason) : ''); // When `traceInternals` is enabled, we want to log this to the console\n                // Else, use the regular debug output\n                // eslint-disable-next-line\n                log = this.getOptions()._experiments.traceInternals ? console.warn : utils.logger.log;\n                log(msg);\n              }\n\n              // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n              // enter into an infinite loop when `stop()` is called while flushing.\n              this._isEnabled = false;\n              this._removeListeners();\n              this.stopRecording();\n              this._debouncedFlush.cancel();\n              // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n              // `_isEnabled` state of the plugin since it was disabled above.\n              _context7.next = 10;\n              return this._flush({\n                force: true\n              });\n            case 10:\n              // After flush, destroy event buffer\n              this.eventBuffer && this.eventBuffer.destroy();\n              this.eventBuffer = null;\n\n              // Clear session from session storage, note this means if a new session\n              // is started after, it will not have `previousSessionId`\n              clearSession(this);\n              _context7.next = 18;\n              break;\n            case 15:\n              _context7.prev = 15;\n              _context7.t0 = _context7[\"catch\"](2);\n              this._handleException(_context7.t0);\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee6, this, [[2, 15]]);\n      }));\n      function stop(_x24) {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n    /**\n     * Pause some replay functionality. See comments for `_isPaused`.\n     * This differs from stop as this only stops DOM recording, it is\n     * not as thorough of a shutdown as `stop()`.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._isPaused = true;\n      this.stopRecording();\n    }\n\n    /**\n     * Resumes recording, see notes for `pause().\n     *\n     * Note that calling `startRecording()` here will cause a\n     * new DOM checkout.`\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this._loadAndCheckSession()) {\n        return;\n      }\n      this._isPaused = false;\n      this.startRecording();\n    }\n\n    /**\n     * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n     * Unless `continueRecording` is false, the replay will continue to record and\n     * behave as a \"session\"-based replay.\n     *\n     * Otherwise, queue up a flush.\n     */\n  }, {\n    key: \"sendBufferedReplayOrFlush\",\n    value: function () {\n      var _sendBufferedReplayOrFlush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _ref33,\n          _ref33$continueRecord,\n          continueRecording,\n          hasStoppedRecording,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref33 = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {}, _ref33$continueRecord = _ref33.continueRecording, continueRecording = _ref33$continueRecord === void 0 ? true : _ref33$continueRecord;\n              if (!(this.recordingMode === 'session')) {\n                _context8.next = 3;\n                break;\n              }\n              return _context8.abrupt(\"return\", this.flushImmediate());\n            case 3:\n              _context8.next = 5;\n              return this.flushImmediate();\n            case 5:\n              hasStoppedRecording = this.stopRecording();\n              if (!(!continueRecording || !hasStoppedRecording)) {\n                _context8.next = 8;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 8:\n              // Re-start recording, but in \"session\" recording mode\n\n              // Reset all \"capture on error\" configuration before\n              // starting a new recording\n              this.recordingMode = 'session';\n\n              // Once this session ends, we do not want to refresh it\n              if (this.session) {\n                this.session.shouldRefresh = false;\n                this._maybeSaveSession();\n              }\n              this.startRecording();\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee7, this);\n      }));\n      function sendBufferedReplayOrFlush() {\n        return _sendBufferedReplayOrFlush.apply(this, arguments);\n      }\n      return sendBufferedReplayOrFlush;\n    }()\n    /**\n     * We want to batch uploads of replay events. Save events only if\n     * `<flushMinDelay>` milliseconds have elapsed since the last event\n     * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n     *\n     * Accepts a callback to perform side-effects and returns true to stop batch\n     * processing and hand back control to caller.\n     */\n  }, {\n    key: \"addUpdate\",\n    value: function addUpdate(cb) {\n      // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n      var cbResult = cb();\n\n      // If this option is turned on then we will only want to call `flush`\n      // explicitly\n      if (this.recordingMode === 'buffer') {\n        return;\n      }\n\n      // If callback is true, we do not want to continue with flushing -- the\n      // caller will need to handle it.\n      if (cbResult === true) {\n        return;\n      }\n\n      // addUpdate is called quite frequently - use _debouncedFlush so that it\n      // respects the flush delays and does not flush immediately\n      this._debouncedFlush();\n    }\n\n    /**\n     * Updates the user activity timestamp and resumes recording. This should be\n     * called in an event handler for a user action that we consider as the user\n     * being \"active\" (e.g. a mouse click).\n     */\n  }, {\n    key: \"triggerUserActivity\",\n    value: function triggerUserActivity() {\n      this._updateUserActivity();\n\n      // This case means that recording was once stopped due to inactivity.\n      // Ensure that recording is resumed.\n      if (!this._stopRecording) {\n        // Create a new session, otherwise when the user action is flushed, it\n        // will get rejected due to an expired session.\n        if (!this._loadAndCheckSession()) {\n          return;\n        }\n\n        // Note: This will cause a new DOM checkout\n        this.resume();\n        return;\n      }\n\n      // Otherwise... recording was never suspended, continue as normalish\n      this.checkAndHandleExpiredSession();\n      this._updateSessionActivity();\n    }\n\n    /**\n     *\n     * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n     * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n     * cases of mulitple flushes happening closely together.\n     */\n  }, {\n    key: \"flushImmediate\",\n    value: function flushImmediate() {\n      this._debouncedFlush();\n      // `.flush` is provided by the debounced function, analogously to lodash.debounce\n      return this._debouncedFlush.flush();\n    }\n\n    /** Get the current sesion (=replay) ID */\n  }, {\n    key: \"getSessionId\",\n    value: function getSessionId() {\n      return this.session && this.session.id;\n    }\n\n    /**\n     * Checks if recording should be stopped due to user inactivity. Otherwise\n     * check if session is expired and create a new session if so. Triggers a new\n     * full snapshot on new session.\n     *\n     * Returns true if session is not expired, false otherwise.\n     * @hidden\n     */\n  }, {\n    key: \"checkAndHandleExpiredSession\",\n    value: function checkAndHandleExpiredSession() {\n      var oldSessionId = this.getSessionId();\n\n      // Prevent starting a new session if the last user activity is older than\n      // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n      // session+recording. This creates noisy replays that do not have much\n      // content in them.\n      if (this._lastActivity && isExpired(this._lastActivity, this.timeouts.sessionIdlePause) && this.session && this.session.sampled === 'session') {\n        // Pause recording only for session-based replays. Otherwise, resuming\n        // will create a new replay and will conflict with users who only choose\n        // to record error-based replays only. (e.g. the resumed replay will not\n        // contain a reference to an error)\n        this.pause();\n        return;\n      }\n\n      // --- There is recent user activity --- //\n      // This will create a new session if expired, based on expiry length\n      if (!this._loadAndCheckSession()) {\n        return;\n      }\n\n      // Session was expired if session ids do not match\n      var expired = oldSessionId !== this.getSessionId();\n      if (!expired) {\n        return true;\n      }\n\n      // Session is expired, trigger a full snapshot (which will create a new session)\n      this._triggerFullSnapshot();\n      return false;\n    }\n\n    /**\n     * Capture some initial state that can change throughout the lifespan of the\n     * replay. This is required because otherwise they would be captured at the\n     * first flush.\n     */\n  }, {\n    key: \"setInitialState\",\n    value: function setInitialState() {\n      var urlPath = \"\".concat(WINDOW.location.pathname).concat(WINDOW.location.hash).concat(WINDOW.location.search);\n      var url = \"\".concat(WINDOW.location.origin).concat(urlPath);\n      this.performanceEvents = [];\n\n      // Reset _context as well\n      this._clearContext();\n      this._context.initialUrl = url;\n      this._context.initialTimestamp = Date.now();\n      this._context.urls.push(url);\n    }\n\n    /**\n     * Initialize and start all listeners to varying events (DOM,\n     * Performance Observer, Recording, Sentry SDK, etc)\n     */\n  }, {\n    key: \"_initializeRecording\",\n    value: function _initializeRecording() {\n      this.setInitialState();\n\n      // this method is generally called on page load or manually - in both cases\n      // we should treat it as an activity\n      this._updateSessionActivity();\n      this.eventBuffer = createEventBuffer({\n        useCompression: this._options.useCompression\n      });\n      this._removeListeners();\n      this._addListeners();\n\n      // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n      this._isEnabled = true;\n      this.startRecording();\n    }\n\n    /** A wrapper to conditionally capture exceptions. */\n  }, {\n    key: \"_handleException\",\n    value: function _handleException(error) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay]', error);\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._options._experiments && this._options._experiments.captureExceptions) {\n        core.captureException(error);\n      }\n    }\n\n    /**\n     * Loads (or refreshes) the current session.\n     * Returns false if session is not recorded.\n     */\n  }, {\n    key: \"_loadAndCheckSession\",\n    value: function _loadAndCheckSession() {\n      var _getSession3 = getSession({\n          timeouts: this.timeouts,\n          stickySession: Boolean(this._options.stickySession),\n          currentSession: this.session,\n          sessionSampleRate: this._options.sessionSampleRate,\n          allowBuffering: this._options.errorSampleRate > 0\n        }),\n        type = _getSession3.type,\n        session = _getSession3.session;\n\n      // If session was newly created (i.e. was not loaded from storage), then\n      // enable flag to create the root replay\n      if (type === 'new') {\n        this.setInitialState();\n      }\n      var currentSessionId = this.getSessionId();\n      if (session.id !== currentSessionId) {\n        session.previousSessionId = currentSessionId;\n      }\n      this.session = session;\n      if (!this.session.sampled) {\n        void this.stop('session unsampled');\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Adds listeners to record events for the replay\n     */\n  }, {\n    key: \"_addListeners\",\n    value: function _addListeners() {\n      try {\n        WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n        WINDOW.addEventListener('blur', this._handleWindowBlur);\n        WINDOW.addEventListener('focus', this._handleWindowFocus);\n        WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n\n        // There is no way to remove these listeners, so ensure they are only added once\n        if (!this._hasInitializedCoreListeners) {\n          addGlobalListeners(this);\n          this._hasInitializedCoreListeners = true;\n        }\n      } catch (err) {\n        this._handleException(err);\n      }\n\n      // PerformanceObserver //\n      if (!('PerformanceObserver' in WINDOW)) {\n        return;\n      }\n      this._performanceObserver = setupPerformanceObserver(this);\n    }\n\n    /**\n     * Cleans up listeners that were created in `_addListeners`\n     */\n  }, {\n    key: \"_removeListeners\",\n    value: function _removeListeners() {\n      try {\n        WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n        WINDOW.removeEventListener('blur', this._handleWindowBlur);\n        WINDOW.removeEventListener('focus', this._handleWindowFocus);\n        WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n        if (this._performanceObserver) {\n          this._performanceObserver.disconnect();\n          this._performanceObserver = null;\n        }\n      } catch (err) {\n        this._handleException(err);\n      }\n    }\n\n    /**\n     * Handle when visibility of the page content changes. Opening a new tab will\n     * cause the state to change to hidden because of content of current page will\n     * be hidden. Likewise, moving a different window to cover the contents of the\n     * page will also trigger a change to a hidden state.\n     */\n  }, {\n    key: \"__init13\",\n    value: function __init13() {\n      var _this13 = this;\n      this._handleVisibilityChange = function () {\n        if (WINDOW.document.visibilityState === 'visible') {\n          _this13._doChangeToForegroundTasks();\n        } else {\n          _this13._doChangeToBackgroundTasks();\n        }\n      };\n    }\n\n    /**\n     * Handle when page is blurred\n     */\n  }, {\n    key: \"__init14\",\n    value: function __init14() {\n      var _this14 = this;\n      this._handleWindowBlur = function () {\n        var breadcrumb = createBreadcrumb({\n          category: 'ui.blur'\n        });\n\n        // Do not count blur as a user action -- it's part of the process of them\n        // leaving the page\n        _this14._doChangeToBackgroundTasks(breadcrumb);\n      };\n    }\n\n    /**\n     * Handle when page is focused\n     */\n  }, {\n    key: \"__init15\",\n    value: function __init15() {\n      var _this15 = this;\n      this._handleWindowFocus = function () {\n        var breadcrumb = createBreadcrumb({\n          category: 'ui.focus'\n        });\n\n        // Do not count focus as a user action -- instead wait until they focus and\n        // interactive with page\n        _this15._doChangeToForegroundTasks(breadcrumb);\n      };\n    }\n\n    /** Ensure page remains active when a key is pressed. */\n  }, {\n    key: \"__init16\",\n    value: function __init16() {\n      var _this16 = this;\n      this._handleKeyboardEvent = function (event) {\n        handleKeyboardEvent(_this16, event);\n      };\n    }\n\n    /**\n     * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n     */\n  }, {\n    key: \"_doChangeToBackgroundTasks\",\n    value: function _doChangeToBackgroundTasks(breadcrumb) {\n      if (!this.session) {\n        return;\n      }\n      var expired = isSessionExpired(this.session, this.timeouts);\n      if (breadcrumb && !expired) {\n        this._createCustomBreadcrumb(breadcrumb);\n      }\n\n      // Send replay when the page/tab becomes hidden. There is no reason to send\n      // replay if it becomes visible, since no actions we care about were done\n      // while it was hidden\n      this._conditionalFlush();\n    }\n\n    /**\n     * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n     */\n  }, {\n    key: \"_doChangeToForegroundTasks\",\n    value: function _doChangeToForegroundTasks(breadcrumb) {\n      if (!this.session) {\n        return;\n      }\n      var isSessionActive = this.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n        // ms, we will re-use the existing session, otherwise create a new\n        // session\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Document has become active, but session has expired');\n        return;\n      }\n      if (breadcrumb) {\n        this._createCustomBreadcrumb(breadcrumb);\n      }\n    }\n\n    /**\n     * Trigger rrweb to take a full snapshot which will cause this plugin to\n     * create a new Replay event.\n     */\n  }, {\n    key: \"_triggerFullSnapshot\",\n    value: function _triggerFullSnapshot() {\n      var checkout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      try {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('[Replay] Taking full rrweb snapshot');\n        record.takeFullSnapshot(checkout);\n      } catch (err) {\n        this._handleException(err);\n      }\n    }\n\n    /**\n     * Update user activity (across session lifespans)\n     */\n  }, {\n    key: \"_updateUserActivity\",\n    value: function _updateUserActivity() {\n      var _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      this._lastActivity = _lastActivity;\n    }\n\n    /**\n     * Updates the session's last activity timestamp\n     */\n  }, {\n    key: \"_updateSessionActivity\",\n    value: function _updateSessionActivity() {\n      var _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      if (this.session) {\n        this.session.lastActivity = _lastActivity;\n        this._maybeSaveSession();\n      }\n    }\n\n    /**\n     * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n     */\n  }, {\n    key: \"_createCustomBreadcrumb\",\n    value: function _createCustomBreadcrumb(breadcrumb) {\n      var _this17 = this;\n      this.addUpdate(function () {\n        void addEvent(_this17, {\n          type: EventType$1.Custom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb\n          }\n        });\n      });\n    }\n\n    /**\n     * Observed performance events are added to `this.performanceEvents`. These\n     * are included in the replay event before it is finished and sent to Sentry.\n     */\n  }, {\n    key: \"_addPerformanceEntries\",\n    value: function _addPerformanceEntries() {\n      // Copy and reset entries before processing\n      var entries = _toConsumableArray(this.performanceEvents);\n      this.performanceEvents = [];\n      return Promise.all(createPerformanceSpans(this, createPerformanceEntries(entries)));\n    }\n\n    /**\n     * Only flush if `this.recordingMode === 'session'`\n     */\n  }, {\n    key: \"_conditionalFlush\",\n    value: function _conditionalFlush() {\n      if (this.recordingMode === 'buffer') {\n        return;\n      }\n      void this.flushImmediate();\n    }\n\n    /**\n     * Clear _context\n     */\n  }, {\n    key: \"_clearContext\",\n    value: function _clearContext() {\n      // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n      this._context.errorIds.clear();\n      this._context.traceIds.clear();\n      this._context.urls = [];\n    }\n\n    /** Update the initial timestamp based on the buffer content. */\n  }, {\n    key: \"_updateInitialTimestampFromEventBuffer\",\n    value: function _updateInitialTimestampFromEventBuffer() {\n      var session = this.session,\n        eventBuffer = this.eventBuffer;\n      if (!session || !eventBuffer) {\n        return;\n      }\n\n      // we only ever update this on the initial segment\n      if (session.segmentId) {\n        return;\n      }\n      var earliestEvent = eventBuffer.getEarliestTimestamp();\n      if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n        this._context.initialTimestamp = earliestEvent;\n      }\n    }\n\n    /**\n     * Return and clear _context\n     */\n  }, {\n    key: \"_popEventContext\",\n    value: function _popEventContext() {\n      var _context = {\n        initialTimestamp: this._context.initialTimestamp,\n        initialUrl: this._context.initialUrl,\n        errorIds: Array.from(this._context.errorIds),\n        traceIds: Array.from(this._context.traceIds),\n        urls: this._context.urls\n      };\n      this._clearContext();\n      return _context;\n    }\n\n    /**\n     * Flushes replay event buffer to Sentry.\n     *\n     * Performance events are only added right before flushing - this is\n     * due to the buffered performance observer events.\n     *\n     * Should never be called directly, only by `flush`\n     */\n  }, {\n    key: \"_runFlush\",\n    value: function () {\n      var _runFlush2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var recordingData, replayId, eventContext, segmentId, client;\n        return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!this.session || !this.eventBuffer)) {\n                _context9.next = 3;\n                break;\n              }\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay] No session or eventBuffer found to flush.');\n              return _context9.abrupt(\"return\");\n            case 3:\n              _context9.next = 5;\n              return this._addPerformanceEntries();\n            case 5:\n              if (!(!this.eventBuffer || !this.eventBuffer.hasEvents)) {\n                _context9.next = 7;\n                break;\n              }\n              return _context9.abrupt(\"return\");\n            case 7:\n              _context9.next = 9;\n              return addMemoryEntry(this);\n            case 9:\n              if (this.eventBuffer) {\n                _context9.next = 11;\n                break;\n              }\n              return _context9.abrupt(\"return\");\n            case 11:\n              _context9.prev = 11;\n              // This uses the data from the eventBuffer, so we need to call this before `finish()\n              this._updateInitialTimestampFromEventBuffer();\n\n              // Note this empties the event buffer regardless of outcome of sending replay\n              _context9.next = 15;\n              return this.eventBuffer.finish();\n            case 15:\n              recordingData = _context9.sent;\n              // NOTE: Copy values from instance members, as it's possible they could\n              // change before the flush finishes.\n              replayId = this.session.id;\n              eventContext = this._popEventContext(); // Always increment segmentId regardless of outcome of sending replay\n              segmentId = this.session.segmentId++;\n              this._maybeSaveSession();\n              _context9.next = 22;\n              return sendReplay({\n                replayId: replayId,\n                recordingData: recordingData,\n                segmentId: segmentId,\n                eventContext: eventContext,\n                session: this.session,\n                options: this.getOptions(),\n                timestamp: Date.now()\n              });\n            case 22:\n              _context9.next = 30;\n              break;\n            case 24:\n              _context9.prev = 24;\n              _context9.t0 = _context9[\"catch\"](11);\n              this._handleException(_context9.t0);\n\n              // This means we retried 3 times and all of them failed,\n              // or we ran into a problem we don't want to retry, like rate limiting.\n              // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n              void this.stop('sendReplay');\n              client = core.getCurrentHub().getClient();\n              if (client) {\n                client.recordDroppedEvent('send_error', 'replay');\n              }\n            case 30:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee8, this, [[11, 24]]);\n      }));\n      function _runFlush() {\n        return _runFlush2.apply(this, arguments);\n      }\n      return _runFlush;\n    }()\n    /**\n     * Flush recording data to Sentry. Creates a lock so that only a single flush\n     * can be active at a time. Do not call this directly.\n     */\n  }, {\n    key: \"__init17\",\n    value: function __init17() {\n      var _this18 = this;\n      this._flush = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _ref35,\n          _ref35$force,\n          force,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref35 = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {}, _ref35$force = _ref35.force, force = _ref35$force === void 0 ? false : _ref35$force;\n              if (!(!_this18._isEnabled && !force)) {\n                _context10.next = 3;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 3:\n              if (_this18.checkAndHandleExpiredSession()) {\n                _context10.next = 6;\n                break;\n              }\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay] Attempting to finish replay event after session expired.');\n              return _context10.abrupt(\"return\");\n            case 6:\n              if (_this18.session) {\n                _context10.next = 9;\n                break;\n              }\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error('[Replay] No session found to flush.');\n              return _context10.abrupt(\"return\");\n            case 9:\n              // A flush is about to happen, cancel any queued flushes\n              _this18._debouncedFlush.cancel();\n\n              // this._flushLock acts as a lock so that future calls to `_flush()`\n              // will be blocked until this promise resolves\n              if (_this18._flushLock) {\n                _context10.next = 16;\n                break;\n              }\n              _this18._flushLock = _this18._runFlush();\n              _context10.next = 14;\n              return _this18._flushLock;\n            case 14:\n              _this18._flushLock = null;\n              return _context10.abrupt(\"return\");\n            case 16:\n              _context10.prev = 16;\n              _context10.next = 19;\n              return _this18._flushLock;\n            case 19:\n              _context10.next = 24;\n              break;\n            case 21:\n              _context10.prev = 21;\n              _context10.t0 = _context10[\"catch\"](16);\n              (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.error(_context10.t0);\n            case 24:\n              _context10.prev = 24;\n              _this18._debouncedFlush();\n              return _context10.finish(24);\n            case 27:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee9, null, [[16, 21, 24, 27]]);\n      }));\n    }\n\n    /** Save the session, if it is sticky */\n  }, {\n    key: \"_maybeSaveSession\",\n    value: function _maybeSaveSession() {\n      if (this.session && this._options.stickySession) {\n        saveSession(this.session);\n      }\n    }\n\n    /** Handler for rrweb.record.onMutation */\n  }, {\n    key: \"__init18\",\n    value: function __init18() {\n      var _this19 = this;\n      this._onMutationHandler = function (mutations) {\n        var count = mutations.length;\n        var mutationLimit = _this19._options._experiments.mutationLimit || 0;\n        var mutationBreadcrumbLimit = _this19._options._experiments.mutationBreadcrumbLimit || 1000;\n        var overMutationLimit = mutationLimit && count > mutationLimit;\n\n        // Create a breadcrumb if a lot of mutations happen at the same time\n        // We can show this in the UI as an information with potential performance improvements\n        if (count > mutationBreadcrumbLimit || overMutationLimit) {\n          var breadcrumb = createBreadcrumb({\n            category: 'replay.mutations',\n            data: {\n              count: count\n            }\n          });\n          _this19._createCustomBreadcrumb(breadcrumb);\n        }\n        if (overMutationLimit) {\n          // We want to skip doing an incremental snapshot if there are too many mutations\n          // Instead, we do a full snapshot\n          _this19._triggerFullSnapshot(false);\n          return false;\n        }\n\n        // `true` means we use the regular mutation handling by rrweb\n        return true;\n      };\n    }\n  }]);\n  return ReplayContainer;\n}();\nfunction getOption(selectors, defaultSelectors, deprecatedClassOption, deprecatedSelectorOption) {\n  var deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n  var allSelectors = [].concat(_toConsumableArray(selectors), _toConsumableArray(deprecatedSelectors), _toConsumableArray(defaultSelectors));\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(\".\".concat(deprecatedClassOption));\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.');\n  }\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions(_ref36) {\n  var mask = _ref36.mask,\n    unmask = _ref36.unmask,\n    block = _ref36.block,\n    unblock = _ref36.unblock,\n    ignore = _ref36.ignore,\n    blockClass = _ref36.blockClass,\n    blockSelector = _ref36.blockSelector,\n    maskTextClass = _ref36.maskTextClass,\n    maskTextSelector = _ref36.maskTextSelector,\n    ignoreClass = _ref36.ignoreClass;\n  var defaultBlockedElements = ['base[href=\"/\"]'];\n  var maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  var unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n  var options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n    maskInputSelector: maskSelector,\n    unmaskInputSelector: unmaskSelector,\n    blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]'].concat(defaultBlockedElements), blockClass, blockSelector),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass)\n  };\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n  return options;\n}\n\n/**\n * Returns true if we are in the browser.\n */\nfunction isBrowser() {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!utils.isNodeEnv() || isElectronNodeRenderer());\n}\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer() {\n  return typeof process !== 'undefined' && process.type === 'renderer';\n}\nvar MEDIA_SELECTORS = 'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\nvar DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\nvar _initialized = false;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n */\nvar Replay = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n  function Replay() {\n    var _ref37 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref37$flushMinDelay = _ref37.flushMinDelay,\n      flushMinDelay = _ref37$flushMinDelay === void 0 ? DEFAULT_FLUSH_MIN_DELAY : _ref37$flushMinDelay,\n      _ref37$flushMaxDelay = _ref37.flushMaxDelay,\n      flushMaxDelay = _ref37$flushMaxDelay === void 0 ? DEFAULT_FLUSH_MAX_DELAY : _ref37$flushMaxDelay,\n      _ref37$stickySession = _ref37.stickySession,\n      stickySession = _ref37$stickySession === void 0 ? true : _ref37$stickySession,\n      _ref37$useCompression = _ref37.useCompression,\n      useCompression = _ref37$useCompression === void 0 ? true : _ref37$useCompression,\n      _ref37$_experiments = _ref37._experiments,\n      _experiments = _ref37$_experiments === void 0 ? {} : _ref37$_experiments,\n      sessionSampleRate = _ref37.sessionSampleRate,\n      errorSampleRate = _ref37.errorSampleRate,\n      _ref37$maskAllText = _ref37.maskAllText,\n      maskAllText = _ref37$maskAllText === void 0 ? true : _ref37$maskAllText,\n      _ref37$maskAllInputs = _ref37.maskAllInputs,\n      maskAllInputs = _ref37$maskAllInputs === void 0 ? true : _ref37$maskAllInputs,\n      _ref37$blockAllMedia = _ref37.blockAllMedia,\n      blockAllMedia = _ref37$blockAllMedia === void 0 ? true : _ref37$blockAllMedia,\n      _ref37$networkDetailA = _ref37.networkDetailAllowUrls,\n      networkDetailAllowUrls = _ref37$networkDetailA === void 0 ? [] : _ref37$networkDetailA,\n      _ref37$networkCapture = _ref37.networkCaptureBodies,\n      networkCaptureBodies = _ref37$networkCapture === void 0 ? true : _ref37$networkCapture,\n      _ref37$networkRequest = _ref37.networkRequestHeaders,\n      networkRequestHeaders = _ref37$networkRequest === void 0 ? [] : _ref37$networkRequest,\n      _ref37$networkRespons = _ref37.networkResponseHeaders,\n      networkResponseHeaders = _ref37$networkRespons === void 0 ? [] : _ref37$networkRespons,\n      _ref37$mask = _ref37.mask,\n      mask = _ref37$mask === void 0 ? [] : _ref37$mask,\n      _ref37$unmask = _ref37.unmask,\n      unmask = _ref37$unmask === void 0 ? [] : _ref37$unmask,\n      _ref37$block = _ref37.block,\n      block = _ref37$block === void 0 ? [] : _ref37$block,\n      _ref37$unblock = _ref37.unblock,\n      unblock = _ref37$unblock === void 0 ? [] : _ref37$unblock,\n      _ref37$ignore = _ref37.ignore,\n      ignore = _ref37$ignore === void 0 ? [] : _ref37$ignore,\n      maskFn = _ref37.maskFn,\n      blockClass = _ref37.blockClass,\n      blockSelector = _ref37.blockSelector,\n      maskInputOptions = _ref37.maskInputOptions,\n      maskTextClass = _ref37.maskTextClass,\n      maskTextSelector = _ref37.maskTextSelector,\n      ignoreClass = _ref37.ignoreClass;\n    _classCallCheck(this, Replay);\n    Replay.prototype.__init.call(this);\n    this._recordingOptions = _objectSpread(_objectSpread({\n      maskAllInputs: maskAllInputs,\n      maskAllText: maskAllText,\n      maskInputOptions: _objectSpread(_objectSpread({}, maskInputOptions || {}), {}, {\n        password: true\n      }),\n      maskTextFn: maskFn,\n      maskInputFn: maskFn\n    }, getPrivacyOptions({\n      mask: mask,\n      unmask: unmask,\n      block: block,\n      unblock: unblock,\n      ignore: ignore,\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      ignoreClass: ignoreClass\n    })), {}, {\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true\n    });\n    this._initialOptions = {\n      flushMinDelay: flushMinDelay,\n      flushMaxDelay: flushMaxDelay,\n      stickySession: stickySession,\n      sessionSampleRate: sessionSampleRate,\n      errorSampleRate: errorSampleRate,\n      useCompression: useCompression,\n      blockAllMedia: blockAllMedia,\n      maskAllInputs: maskAllInputs,\n      maskAllText: maskAllText,\n      networkDetailAllowUrls: networkDetailAllowUrls,\n      networkCaptureBodies: networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      _experiments: _experiments\n    };\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\"[Replay] You are passing `sessionSampleRate` to the Replay integration.\\nThis option is deprecated and will be removed soon.\\nInstead, configure `replaysSessionSampleRate` directly in the SDK init options, e.g.:\\nSentry.init({ replaysSessionSampleRate: \".concat(sessionSampleRate, \" })\"));\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\"[Replay] You are passing `errorSampleRate` to the Replay integration.\\nThis option is deprecated and will be removed soon.\\nInstead, configure `replaysOnErrorSampleRate` directly in the SDK init options, e.g.:\\nSentry.init({ replaysOnErrorSampleRate: \".concat(errorSampleRate, \" })\"));\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector ? MEDIA_SELECTORS : \"\".concat(this._recordingOptions.blockSelector, \",\").concat(MEDIA_SELECTORS);\n    }\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  _createClass(Replay, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Replay.id;\n    }\n  }, {\n    key: \"_isInitialized\",\n    get: function get() {\n      return _initialized;\n    }\n\n    /** Update _isInitialized */,\n    set: function set(value) {\n      _initialized = value;\n    }\n\n    /**\n     * Setup and initialize replay container\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      var _this20 = this;\n      if (!isBrowser()) {\n        return;\n      }\n      this._setup();\n\n      // Once upon a time, we tried to create a transaction in `setupOnce` and it would\n      // potentially create a transaction before some native SDK integrations have run\n      // and applied their own global event processor. An example is:\n      // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n      //\n      // So we call `this._initialize()` in next event loop as a workaround to wait for other\n      // global event processors to finish. This is no longer needed, but keeping it\n      // here to avoid any future issues.\n      setTimeout(function () {\n        return _this20._initialize();\n      });\n    }\n\n    /**\n     * Start a replay regardless of sampling rate. Calling this will always\n     * create a new session. Will throw an error if replay is already in progress.\n     *\n     * Creates or loads a session, attaches listeners to varying events (DOM,\n     * PerformanceObserver, Recording, Sentry SDK, etc)\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this._replay) {\n        return;\n      }\n      this._replay.start();\n    }\n\n    /**\n     * Start replay buffering. Buffers until `flush()` is called or, if\n     * `replaysOnErrorSampleRate` > 0, until an error occurs.\n     */\n  }, {\n    key: \"startBuffering\",\n    value: function startBuffering() {\n      if (!this._replay) {\n        return;\n      }\n      this._replay.startBuffering();\n    }\n\n    /**\n     * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n     * does not support a teardown\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._replay) {\n        return Promise.resolve();\n      }\n      return this._replay.stop();\n    }\n\n    /**\n     * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n     * Unless `continueRecording` is false, the replay will continue to record and\n     * behave as a \"session\"-based replay.\n     *\n     * Otherwise, queue up a flush.\n     */\n  }, {\n    key: \"flush\",\n    value: function flush(options) {\n      if (!this._replay || !this._replay.isEnabled()) {\n        return Promise.resolve();\n      }\n      return this._replay.sendBufferedReplayOrFlush(options);\n    }\n\n    /**\n     * Get the current session ID.\n     */\n  }, {\n    key: \"getReplayId\",\n    value: function getReplayId() {\n      if (!this._replay || !this._replay.isEnabled()) {\n        return;\n      }\n      return this._replay.getSessionId();\n    }\n    /**\n     * Initializes replay.\n     */\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      if (!this._replay) {\n        return;\n      }\n      this._replay.initializeSampling();\n    }\n\n    /** Setup the integration. */\n  }, {\n    key: \"_setup\",\n    value: function _setup() {\n      // Client is not available in constructor, so we need to wait until setupOnce\n      var finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n      this._replay = new ReplayContainer({\n        options: finalOptions,\n        recordingOptions: this._recordingOptions\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Replay';\n    }\n  }]);\n  return Replay;\n}();\nReplay.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions) {\n  var client = core.getCurrentHub().getClient();\n  var opt = client && client.getOptions();\n  var finalOptions = _objectSpread({\n    sessionSampleRate: 0,\n    errorSampleRate: 0\n  }, utils.dropUndefinedKeys(initialOptions));\n  if (!opt) {\n    // eslint-disable-next-line no-console\n    console.warn('SDK client is not available.');\n    return finalOptions;\n  }\n  if (initialOptions.sessionSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  initialOptions.errorSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  opt.replaysSessionSampleRate == null && opt.replaysOnErrorSampleRate == null) {\n    // eslint-disable-next-line no-console\n    console.warn('Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.');\n  }\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n  return finalOptions;\n}\nfunction _getMergedNetworkHeaders(headers) {\n  return [].concat(DEFAULT_NETWORK_HEADERS, _toConsumableArray(headers.map(function (header) {\n    return header.toLowerCase();\n  })));\n}\nexports.Replay = Replay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/replay/cjs/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/baggage.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/baggage.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.object.entries.js */ \"./node_modules/core-js/modules/es.object.entries.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar logger = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/utils/cjs/logger.js\");\nvar BAGGAGE_HEADER_NAME = 'baggage';\nvar SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\nvar SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nvar MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n  if (!is.isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  var baggageObject = {};\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce(function (acc, curr) {\n      var currBaggageObject = baggageHeaderToObject(curr);\n      return _objectSpread(_objectSpread({}, acc), currBaggageObject);\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  var dynamicSamplingContext = Object.entries(baggageObject).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      var nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  var sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce(function (acc, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      dscKey = _ref4[0],\n      dscValue = _ref4[1];\n    if (dscValue) {\n      acc[\"\".concat(SENTRY_BAGGAGE_KEY_PREFIX).concat(dscKey)] = dscValue;\n    }\n    return acc;\n  }, {});\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader.split(',').map(function (baggageEntry) {\n    return baggageEntry.split('=').map(function (keyOrValue) {\n      return decodeURIComponent(keyOrValue.trim());\n    });\n  }).reduce(function (acc, _ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      value = _ref6[1];\n    acc[key] = value;\n    return acc;\n  }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n  return Object.entries(object).reduce(function (baggageHeader, _ref7, currentIndex) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n      objectKey = _ref8[0],\n      objectValue = _ref8[1];\n    var baggageEntry = \"\".concat(encodeURIComponent(objectKey), \"=\").concat(encodeURIComponent(objectValue));\n    var newBaggageHeader = currentIndex === 0 ? baggageEntry : \"\".concat(baggageHeader, \",\").concat(baggageEntry);\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.logger.warn(\"Not adding key: \".concat(objectKey, \" with val: \").concat(objectValue, \" to baggage header due to exceeding baggage size limits.\"));\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\nexports.BAGGAGE_HEADER_NAME = BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/baggage.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/browser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = worldwide.getGlobalObject();\nvar DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr;\n    var keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    var maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(function (keyAttr) {\n    return elem.getAttribute(keyAttr);\n  }).map(function (keyAttr) {\n    return [keyAttr, elem.getAttribute(keyAttr)];\n  }) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(function (keyAttrPair) {\n      out.push(\"[\".concat(keyAttrPair[0], \"=\\\"\").concat(keyAttrPair[1], \"\\\"]\"));\n    });\n  } else {\n    if (elem.id) {\n      out.push(\"#\".concat(elem.id));\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && is.isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(\".\".concat(classes[i]));\n      }\n    }\n  }\n  var allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(\"[\".concat(key, \"=\\\"\").concat(attr, \"\\\"]\"));\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\nexports.getDomElement = getDomElement;\nexports.getLocationHref = getLocationHref;\nexports.htmlTreeAsString = htmlTreeAsString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/browser.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncNullishCoalesce.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncNullishCoalesce.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _nullishCoalesce = __webpack_require__(/*! ./_nullishCoalesce.js */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/_nullishCoalesce.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nfunction _asyncNullishCoalesce(_x, _x2) {\n  return _asyncNullishCoalesce2.apply(this, arguments);\n} // Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\nfunction _asyncNullishCoalesce2() {\n  _asyncNullishCoalesce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(lhs, rhsFn) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", _nullishCoalesce._nullishCoalesce(lhs, rhsFn));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _asyncNullishCoalesce2.apply(this, arguments);\n}\nexports._asyncNullishCoalesce = _asyncNullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkEsU0FhQUEsc0JBQUFDLEVBQUEsRUFBQUMsR0FBQTtFQUFBLE9BQUFDLHNCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBLEVBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLFNBQUFGLHVCQUFBO0VBQUFBLHNCQUFBLEdBQUFHLGlCQUFBLGVBQUFDLG1CQUFBLEdBQUFDLElBQUEsQ0FYQSxTQUFBQyxRQUFBQyxHQUFBLEVBQUFDLEtBQUE7SUFBQSxPQUFBSixtQkFBQSxHQUFBSyxJQUFBLFVBQUFDLFNBQUFDLFFBQUE7TUFBQSxrQkFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtRQUFBO1VBQUEsT0FBQUYsUUFBQSxDQUFBRyxNQUFBLFdBQ0FDLGdCQUFBLENBQUFBLGdCQUFBLENBQUFSLEdBQUEsRUFBQUMsS0FBQTtRQUFBO1FBQUE7VUFBQSxPQUFBRyxRQUFBLENBQUFLLElBQUE7TUFBQTtJQUFBLEdBQUFWLE9BQUE7RUFBQSxDQUNBO0VBQUEsT0FBQU4sc0JBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLnRzPzViZjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbmltcG9ydCB7IF9udWxsaXNoQ29hbGVzY2UgfSBmcm9tICcuL19udWxsaXNoQ29hbGVzY2UnO1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKSwgd2hlbiB1c2VkIGluIHNpdHVhdGlvbnMgd2hlcmUgYXQgbGVhc3Qgb25lIG9mIHRoZSB2YWx1ZXMgaXMgdGhlXG4gKiByZXN1bHQgb2YgYW4gYXN5bmMgb3BlcmF0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgUkhTIGlzIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGl0J3MgYSBjb21wdXRlZCB2YWx1ZSwgdGhhdCBldmFsdWF0aW9uIHdvbid0IGhhcHBlbiB1bmxlc3MgdGhlXG4gKiBMSFMgZXZhbHVhdGVzIHRvIGEgbnVsbGlzaCB2YWx1ZSwgdG8gbWltaWMgdGhlIG9wZXJhdG9yJ3Mgc2hvcnQtY2lyY3VpdGluZyBiZWhhdmlvci5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKlxuICogQHBhcmFtIGxocyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIGxlZnQgb2YgdGhlIGA/P2BcbiAqIEBwYXJhbSByaHNGbiBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIHJpZ2h0IG9mIHRoZSBgPz9gXG4gKiBAcmV0dXJucyBUaGUgTEhTIHZhbHVlLCB1bmxlc3MgaXQncyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGluIHdoaWNoIGNhc2UsIHRoZSBSSFMgdmFsdWVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9hc3luY051bGxpc2hDb2FsZXNjZShsaHM6IHVua25vd24sIHJoc0ZuOiAoKSA9PiB1bmtub3duKTogUHJvbWlzZTx1bmtub3duPiB7XG4gIHJldHVybiBfbnVsbGlzaENvYWxlc2NlKGxocywgcmhzRm4pO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb246XG4vLyBhc3luYyBmdW5jdGlvbiBfYXN5bmNOdWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuLy8gICBpZiAobGhzICE9IG51bGwpIHtcbi8vICAgICByZXR1cm4gbGhzO1xuLy8gICB9IGVsc2Uge1xuLy8gICAgIHJldHVybiBhd2FpdCByaHNGbigpO1xuLy8gICB9XG4vLyB9XG4iXSwibmFtZXMiOlsiX2FzeW5jTnVsbGlzaENvYWxlc2NlIiwiX3giLCJfeDIiLCJfYXN5bmNOdWxsaXNoQ29hbGVzY2UyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsImxocyIsInJoc0ZuIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImFicnVwdCIsIl9udWxsaXNoQ29hbGVzY2UiLCJzdG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncNullishCoalesce.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChain.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChain.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, for situations in which at least one part of the expression is async.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _asyncOptionalChain(_x) {\n  return _asyncOptionalChain2.apply(this, arguments);\n} // Sucrase version:\n// async function _asyncOptionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = await fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = await fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\nfunction _asyncOptionalChain2() {\n  _asyncOptionalChain2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ops) {\n    var lastAccessLHS, value, i, op, fn;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          lastAccessLHS = undefined;\n          value = ops[0];\n          i = 1;\n        case 3:\n          if (!(i < ops.length)) {\n            _context.next = 23;\n            break;\n          }\n          op = ops[i];\n          fn = ops[i + 1];\n          i += 2;\n          // by checking for loose equality to `null`, we catch both `null` and `undefined`\n          if (!((op === 'optionalAccess' || op === 'optionalCall') && value == null)) {\n            _context.next = 9;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 9:\n          if (!(op === 'access' || op === 'optionalAccess')) {\n            _context.next = 16;\n            break;\n          }\n          lastAccessLHS = value;\n          _context.next = 13;\n          return fn(value);\n        case 13:\n          value = _context.sent;\n          _context.next = 21;\n          break;\n        case 16:\n          if (!(op === 'call' || op === 'optionalCall')) {\n            _context.next = 21;\n            break;\n          }\n          _context.next = 19;\n          return fn(function () {\n            var _value;\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return (_value = value).call.apply(_value, [lastAccessLHS].concat(args));\n          });\n        case 19:\n          value = _context.sent;\n          lastAccessLHS = undefined;\n        case 21:\n          _context.next = 3;\n          break;\n        case 23:\n          return _context.abrupt(\"return\", value);\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _asyncOptionalChain2.apply(this, arguments);\n}\nexports._asyncOptionalChain = _asyncOptionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBLFNBVUFBLG9CQUFBQyxFQUFBO0VBQUEsT0FBQUMsb0JBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUEsRUF3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQSxTQUFBRixxQkFBQTtFQUFBQSxvQkFBQSxHQUFBRyxpQkFBQSxlQUFBQyxtQkFBQSxHQUFBQyxJQUFBLENBN0NBLFNBQUFDLFFBQUFDLEdBQUE7SUFBQSxJQUFBQyxhQUFBLEVBQUFDLEtBQUEsRUFBQUMsQ0FBQSxFQUFBQyxFQUFBLEVBQUFDLEVBQUE7SUFBQSxPQUFBUixtQkFBQSxHQUFBUyxJQUFBLFVBQUFDLFNBQUFDLFFBQUE7TUFBQSxrQkFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtRQUFBO1VBQ0FULGFBQUEsR0FBQVUsU0FBQTtVQUNBVCxLQUFBLEdBQUFGLEdBQUE7VUFDQUcsQ0FBQTtRQUFBO1VBQUEsTUFDQUEsQ0FBQSxHQUFBSCxHQUFBLENBQUFZLE1BQUE7WUFBQUosUUFBQSxDQUFBRSxJQUFBO1lBQUE7VUFBQTtVQUNBTixFQUFBLEdBQUFKLEdBQUEsQ0FBQUcsQ0FBQTtVQUNBRSxFQUFBLEdBQUFMLEdBQUEsQ0FBQUcsQ0FBQTtVQUNBQSxDQUFBO1VBQ0E7VUFBQSxNQUNBLENBQUFDLEVBQUEseUJBQUFBLEVBQUEsd0JBQUFGLEtBQUE7WUFBQU0sUUFBQSxDQUFBRSxJQUFBO1lBQUE7VUFBQTtVQUFBLE9BQUFGLFFBQUEsQ0FBQUssTUFBQTtRQUFBO1VBQUEsTUFJQVQsRUFBQSxpQkFBQUEsRUFBQTtZQUFBSSxRQUFBLENBQUFFLElBQUE7WUFBQTtVQUFBO1VBQ0FULGFBQUEsR0FBQUMsS0FBQTtVQUFBTSxRQUFBLENBQUFFLElBQUE7VUFBQSxPQUNBTCxFQUFBLENBQUFILEtBQUE7UUFBQTtVQUFBQSxLQUFBLEdBQUFNLFFBQUEsQ0FBQU0sSUFBQTtVQUFBTixRQUFBLENBQUFFLElBQUE7VUFBQTtRQUFBO1VBQUEsTUFDQU4sRUFBQSxlQUFBQSxFQUFBO1lBQUFJLFFBQUEsQ0FBQUUsSUFBQTtZQUFBO1VBQUE7VUFBQUYsUUFBQSxDQUFBRSxJQUFBO1VBQUEsT0FDQUwsRUFBQTtZQUFBLElBQUFVLE1BQUE7WUFBQSxTQUFBQyxJQUFBLEdBQUFyQixTQUFBLENBQUFpQixNQUFBLEVBQUFLLElBQUEsT0FBQUMsS0FBQSxDQUFBRixJQUFBLEdBQUFHLElBQUEsTUFBQUEsSUFBQSxHQUFBSCxJQUFBLEVBQUFHLElBQUE7Y0FBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUF4QixTQUFBLENBQUF3QixJQUFBO1lBQUE7WUFBQSxRQUFBSixNQUFBLEdBQUFiLEtBQUEsRUFBQWtCLElBQUEsQ0FBQTFCLEtBQUEsQ0FBQXFCLE1BQUEsR0FBQWQsYUFBQSxFQUFBb0IsTUFBQSxDQUFBSixJQUFBO1VBQUE7UUFBQTtVQUFBZixLQUFBLEdBQUFNLFFBQUEsQ0FBQU0sSUFBQTtVQUNBYixhQUFBLEdBQUFVLFNBQUE7UUFBQTtVQUFBSCxRQUFBLENBQUFFLElBQUE7VUFBQTtRQUFBO1VBQUEsT0FBQUYsUUFBQSxDQUFBSyxNQUFBLFdBR0FYLEtBQUE7UUFBQTtRQUFBO1VBQUEsT0FBQU0sUUFBQSxDQUFBYyxJQUFBO01BQUE7SUFBQSxHQUFBdkIsT0FBQTtFQUFBLENBQ0E7RUFBQSxPQUFBTixvQkFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9idWlsZFBvbHlmaWxscy9fYXN5bmNPcHRpb25hbENoYWluLnRzP2VkYzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbmltcG9ydCB0eXBlIHsgR2VuZXJpY0Z1bmN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLCBmb3Igc2l0dWF0aW9ucyBpbiB3aGljaCBhdCBsZWFzdCBvbmUgcGFydCBvZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3luYy5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2FzeW5jT3B0aW9uYWxDaGFpbihvcHM6IHVua25vd25bXSk6IFByb21pc2U8dW5rbm93bj4ge1xuICBsZXQgbGFzdEFjY2Vzc0xIUzogdW5rbm93biA9IHVuZGVmaW5lZDtcbiAgbGV0IHZhbHVlID0gb3BzWzBdO1xuICBsZXQgaSA9IDE7XG4gIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuICAgIGNvbnN0IG9wID0gb3BzW2ldIGFzIHN0cmluZztcbiAgICBjb25zdCBmbiA9IG9wc1tpICsgMV0gYXMgKGludGVybWVkaWF0ZVZhbHVlOiB1bmtub3duKSA9PiBQcm9taXNlPHVua25vd24+O1xuICAgIGkgKz0gMjtcbiAgICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgLy8gcmVhbGx5IHdlJ3JlIG1lYW5pbmcgdG8gcmV0dXJuIGB1bmRlZmluZWRgIGFzIGFuIGFjdHVhbCB2YWx1ZSBoZXJlLCBidXQgaXQgc2F2ZXMgYnl0ZXMgbm90IHRvIHdyaXRlIGl0XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbiAgICAgIHZhbHVlID0gYXdhaXQgZm4odmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbiAgICAgIHZhbHVlID0gYXdhaXQgZm4oKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gKHZhbHVlIGFzIEdlbmVyaWNGdW5jdGlvbikuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGFzeW5jIGZ1bmN0aW9uIF9hc3luY09wdGlvbmFsQ2hhaW4ob3BzKSB7XG4vLyAgIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICBsZXQgdmFsdWUgPSBvcHNbMF07XG4vLyAgIGxldCBpID0gMTtcbi8vICAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4vLyAgICAgY29uc3Qgb3AgPSBvcHNbaV07XG4vLyAgICAgY29uc3QgZm4gPSBvcHNbaSArIDFdO1xuLy8gICAgIGkgKz0gMjtcbi8vICAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuLy8gICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuLy8gICAgICAgdmFsdWUgPSBhd2FpdCBmbih2YWx1ZSk7XG4vLyAgICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuLy8gICAgICAgdmFsdWUgPSBhd2FpdCBmbigoLi4uYXJncykgPT4gdmFsdWUuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICByZXR1cm4gdmFsdWU7XG4vLyB9XG4iXSwibmFtZXMiOlsiX2FzeW5jT3B0aW9uYWxDaGFpbiIsIl94IiwiX2FzeW5jT3B0aW9uYWxDaGFpbjIiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwib3BzIiwibGFzdEFjY2Vzc0xIUyIsInZhbHVlIiwiaSIsIm9wIiwiZm4iLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiYWJydXB0Iiwic2VudCIsIl92YWx1ZSIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY2FsbCIsImNvbmNhdCIsInN0b3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChain.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChainDelete.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChainDelete.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.async-iterator.js */ \"./node_modules/core-js/modules/es.symbol.async-iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-string-tag.js */ \"./node_modules/core-js/modules/es.symbol.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.json.to-string-tag.js */ \"./node_modules/core-js/modules/es.json.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.math.to-string-tag.js */ \"./node_modules/core-js/modules/es.math.to-string-tag.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _asyncOptionalChain = __webpack_require__(/*! ./_asyncOptionalChain.js */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nfunction _asyncOptionalChainDelete(_x) {\n  return _asyncOptionalChainDelete2.apply(this, arguments);\n} // Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\nfunction _asyncOptionalChainDelete2() {\n  _asyncOptionalChainDelete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ops) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _asyncOptionalChain._asyncOptionalChain(ops);\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result == null ? true : result);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _asyncOptionalChainDelete2.apply(this, arguments);\n}\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQSxTQVlBQSwwQkFBQUMsRUFBQTtFQUFBLE9BQUFDLDBCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBLEVBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLFNBQUFGLDJCQUFBO0VBQUFBLDBCQUFBLEdBQUFHLGlCQUFBLGVBQUFDLG1CQUFBLEdBQUFDLElBQUEsQ0FaQSxTQUFBQyxRQUFBQyxHQUFBO0lBQUEsSUFBQUMsTUFBQTtJQUFBLE9BQUFKLG1CQUFBLEdBQUFLLElBQUEsVUFBQUMsU0FBQUMsUUFBQTtNQUFBLGtCQUFBQSxRQUFBLENBQUFDLElBQUEsR0FBQUQsUUFBQSxDQUFBRSxJQUFBO1FBQUE7VUFBQUYsUUFBQSxDQUFBRSxJQUFBO1VBQUEsT0FDQUMsbUJBQUEsQ0FBQUEsbUJBQUEsQ0FBQVAsR0FBQTtRQUFBO1VBQUFDLE1BQUEsR0FBQUcsUUFBQSxDQUFBSSxJQUFBO1VBQUEsT0FBQUosUUFBQSxDQUFBSyxNQUFBLFdBSUFSLE1BQUEsa0JBQUFBLE1BQUE7UUFBQTtRQUFBO1VBQUEsT0FBQUcsUUFBQSxDQUFBTSxJQUFBO01BQUE7SUFBQSxHQUFBWCxPQUFBO0VBQUEsQ0FDQTtFQUFBLE9BQUFOLDBCQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2J1aWxkUG9seWZpbGxzL19hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUudHM/YzkzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS90cmVlLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWZcbi8vXG4vLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCB2YXJpb3VzIGNvbnRyaWJ1dG9ycyAoc2VlIEFVVEhPUlMpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuaW1wb3J0IHsgX2FzeW5jT3B0aW9uYWxDaGFpbiB9IGZyb20gJy4vX2FzeW5jT3B0aW9uYWxDaGFpbic7XG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLCBpbiBjYXNlcyB3aGVyZSB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gaXMgdG8gYmUgZGVsZXRlZC5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBkZWxldGVgIG9wZXJhdG9yOiBgdHJ1ZWAsIHVubGVzcyB0aGUgZGVsZXRpb24gdGFyZ2V0IGlzIGFuIG93biwgbm9uLWNvbmZpZ3VyYWJsZVxuICogcHJvcGVydHkgKG9uZSB3aGljaCBjYW4ndCBiZSBkZWxldGVkIG9yIHR1cm5lZCBpbnRvIGFuIGFjY2Vzc29yLCBhbmQgd2hvc2UgZW51bWVyYWJpbGl0eSBjYW4ndCBiZSBjaGFuZ2VkKSwgaW4gd2hpY2hcbiAqIGNhc2UgYGZhbHNlYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUob3BzOiB1bmtub3duW10pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IF9hc3luY09wdGlvbmFsQ2hhaW4ob3BzKSkgYXMgUHJvbWlzZTxib29sZWFuIHwgbnVsbD47XG4gIC8vIElmIGByZXN1bHRgIGlzIGBudWxsYCwgaXQgbWVhbnMgd2UgZGlkbid0IGdldCB0byB0aGUgZW5kIG9mIHRoZSBjaGFpbiBhbmQgc28gbm90aGluZyB3YXMgZGVsZXRlZCAoaW4gd2hpY2ggY2FzZSxcbiAgLy8gcmV0dXJuIGB0cnVlYCBzaW5jZSB0aGF0J3Mgd2hhdCBgZGVsZXRlYCBkb2VzIHdoZW4gaXQgbm8tb3BzKS4gSWYgaXQncyBub24tbnVsbCwgd2Uga25vdyB0aGUgZGVsZXRlIGhhcHBlbmVkLCBpblxuICAvLyB3aGljaCBjYXNlIHdlIHJldHVybiB3aGF0ZXZlciB0aGUgYGRlbGV0ZWAgcmV0dXJuZWQsIHdoaWNoIHdpbGwgYmUgYSBib29sZWFuLlxuICByZXR1cm4gcmVzdWx0ID09IG51bGwgPyB0cnVlIDogKHJlc3VsdCBhcyBQcm9taXNlPGJvb2xlYW4+KTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gYXN5bmMgZnVuY3Rpb24gYXN5bmNPcHRpb25hbENoYWluRGVsZXRlKG9wcykge1xuLy8gICBjb25zdCByZXN1bHQgPSBhd2FpdCBBU1lOQ19PUFRJT05BTF9DSEFJTl9OQU1FKG9wcyk7XG4vLyAgIHJldHVybiByZXN1bHQgPT0gbnVsbCA/IHRydWUgOiByZXN1bHQ7XG4vLyB9XG4iXSwibmFtZXMiOlsiX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZSIsIl94IiwiX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZTIiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwib3BzIiwicmVzdWx0Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIl9hc3luY09wdGlvbmFsQ2hhaW4iLCJzZW50IiwiYWJydXB0Iiwic3RvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChainDelete.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_createNamedExportFrom.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_createNamedExportFrom.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Copy a property from the given object into `exports`, under the given name.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param obj The object containing the property to copy.\n * @param localName The name under which to export the property\n * @param importedName The name under which the property lives in `obj`\n */\nfunction _createNamedExportFrom(obj, localName, importedName) {\n  exports[localName] = obj[importedName];\n}\n\n// Sucrase version:\n// function _createNamedExportFrom(obj, localName, importedName) {\n//   Object.defineProperty(exports, localName, {enumerable: true, get: () => obj[importedName]});\n// }\n\nexports._createNamedExportFrom = _createNamedExportFrom;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2NyZWF0ZU5hbWVkRXhwb3J0RnJvbS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLHVCQUFBQyxHQUFBLEVBQUFDLFNBQUEsRUFBQUMsWUFBQTtFQUNBQyxPQUFBLENBQUFGLFNBQUEsSUFBQUQsR0FBQSxDQUFBRSxZQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX2NyZWF0ZU5hbWVkRXhwb3J0RnJvbS50cz9iZGZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5pbXBvcnQgdHlwZSB7IEdlbmVyaWNPYmplY3QgfSBmcm9tICcuL3R5cGVzJztcblxuZGVjbGFyZSBjb25zdCBleHBvcnRzOiBHZW5lcmljT2JqZWN0O1xuXG4vKipcbiAqIENvcHkgYSBwcm9wZXJ0eSBmcm9tIHRoZSBnaXZlbiBvYmplY3QgaW50byBgZXhwb3J0c2AsIHVuZGVyIHRoZSBnaXZlbiBuYW1lLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqXG4gKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydHkgdG8gY29weS5cbiAqIEBwYXJhbSBsb2NhbE5hbWUgVGhlIG5hbWUgdW5kZXIgd2hpY2ggdG8gZXhwb3J0IHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIGltcG9ydGVkTmFtZSBUaGUgbmFtZSB1bmRlciB3aGljaCB0aGUgcHJvcGVydHkgbGl2ZXMgaW4gYG9iamBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVOYW1lZEV4cG9ydEZyb20ob2JqOiBHZW5lcmljT2JqZWN0LCBsb2NhbE5hbWU6IHN0cmluZywgaW1wb3J0ZWROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgZXhwb3J0c1tsb2NhbE5hbWVdID0gb2JqW2ltcG9ydGVkTmFtZV07XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGZ1bmN0aW9uIF9jcmVhdGVOYW1lZEV4cG9ydEZyb20ob2JqLCBsb2NhbE5hbWUsIGltcG9ydGVkTmFtZSkge1xuLy8gICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbG9jYWxOYW1lLCB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiAoKSA9PiBvYmpbaW1wb3J0ZWROYW1lXX0pO1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9jcmVhdGVOYW1lZEV4cG9ydEZyb20iLCJvYmoiLCJsb2NhbE5hbWUiLCJpbXBvcnRlZE5hbWUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_createNamedExportFrom.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_createStarExport.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_createStarExport.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Copy properties from an object into `exports`.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param obj The object containing the properties to copy.\n */\nfunction _createStarExport(obj) {\n  Object.keys(obj).filter(function (key) {\n    return key !== 'default' && key !== '__esModule' && !(key in exports);\n  }).forEach(function (key) {\n    return exports[key] = obj[key];\n  });\n}\n\n// Sucrase version:\n// function _createStarExport(obj) {\n//   Object.keys(obj)\n//     .filter(key => key !== 'default' && key !== '__esModule')\n//     .forEach(key => {\n//       if (exports.hasOwnProperty(key)) {\n//         return;\n//       }\n//       Object.defineProperty(exports, key, { enumerable: true, get: () => obj[key] });\n//     });\n// }\n\nexports._createStarExport = _createStarExport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2NyZWF0ZVN0YXJFeHBvcnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUE0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxrQkFBQUMsR0FBQTtFQUNBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUYsR0FBQSxFQUNBRyxNQUFBLFdBQUFDLEdBQUE7SUFBQSxPQUFBQSxHQUFBLGtCQUFBQSxHQUFBLHVCQUFBQSxHQUFBLElBQUFDLE9BQUE7RUFBQSxHQUNBQyxPQUFBLFdBQUFGLEdBQUE7SUFBQSxPQUFBQyxPQUFBLENBQUFELEdBQUEsSUFBQUosR0FBQSxDQUFBSSxHQUFBO0VBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2J1aWxkUG9seWZpbGxzL19jcmVhdGVTdGFyRXhwb3J0LnRzP2RkMjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbmltcG9ydCB0eXBlIHsgR2VuZXJpY09iamVjdCB9IGZyb20gJy4vdHlwZXMnO1xuXG5kZWNsYXJlIGNvbnN0IGV4cG9ydHM6IEdlbmVyaWNPYmplY3Q7XG5cbi8qKlxuICogQ29weSBwcm9wZXJ0aWVzIGZyb20gYW4gb2JqZWN0IGludG8gYGV4cG9ydHNgLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqXG4gKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgcHJvcGVydGllcyB0byBjb3B5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NyZWF0ZVN0YXJFeHBvcnQob2JqOiBHZW5lcmljT2JqZWN0KTogdm9pZCB7XG4gIE9iamVjdC5rZXlzKG9iailcbiAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICdkZWZhdWx0JyAmJiBrZXkgIT09ICdfX2VzTW9kdWxlJyAmJiAhKGtleSBpbiBleHBvcnRzKSlcbiAgICAuZm9yRWFjaChrZXkgPT4gKGV4cG9ydHNba2V5XSA9IG9ialtrZXldKSk7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGZ1bmN0aW9uIF9jcmVhdGVTdGFyRXhwb3J0KG9iaikge1xuLy8gICBPYmplY3Qua2V5cyhvYmopXG4vLyAgICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnZGVmYXVsdCcgJiYga2V5ICE9PSAnX19lc01vZHVsZScpXG4vLyAgICAgLmZvckVhY2goa2V5ID0+IHtcbi8vICAgICAgIGlmIChleHBvcnRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbi8vICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgfVxuLy8gICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6ICgpID0+IG9ialtrZXldIH0pO1xuLy8gICAgIH0pO1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9jcmVhdGVTdGFyRXhwb3J0Iiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImtleSIsImV4cG9ydHMiLCJmb3JFYWNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_createStarExport.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopDefault.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_interopDefault.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Unwraps a module if it has been wrapped in an object under the key `default`.\n *\n * Adapted from Rollup (https://github.com/rollup/rollup)\n *\n * @param requireResult The result of calling `require` on a module\n * @returns The full module, unwrapped if necessary.\n */\nfunction _interopDefault$1(requireResult) {\n  return requireResult.__esModule ? requireResult.default : requireResult;\n}\n\n// Rollup version:\n// function _interopDefault(e) {\n//   return e && e.__esModule ? e['default'] : e;\n// }\n\nexports._interopDefault = _interopDefault$1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BEZWZhdWx0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLGlCQUFBQyxDQUFBQyxhQUFBO0VBQ0EsT0FBQUEsYUFBQSxDQUFBQyxVQUFBLEdBQUFELGFBQUEsQ0FBQUUsT0FBQSxHQUFBRixhQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BEZWZhdWx0LnRzPzc5M2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvdHJlZS9jMmNkYTQyNGU2OTY4NjY3MWJhMDEwZDYyOGMwZjcwYzQzYTU2M2Y4XG4vLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTcgW3RoZXNlIHBlb3BsZV0oaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWRcbi8vIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uXG4vLyB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kIC8gb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuLy8gYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9uc1xuLy8gb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1Rcbi8vIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuLy8gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuLy8gV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFXG4vLyBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHR5cGUgeyBSZXF1aXJlUmVzdWx0IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogVW53cmFwcyBhIG1vZHVsZSBpZiBpdCBoYXMgYmVlbiB3cmFwcGVkIGluIGFuIG9iamVjdCB1bmRlciB0aGUga2V5IGBkZWZhdWx0YC5cbiAqXG4gKiBBZGFwdGVkIGZyb20gUm9sbHVwIChodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cClcbiAqXG4gKiBAcGFyYW0gcmVxdWlyZVJlc3VsdCBUaGUgcmVzdWx0IG9mIGNhbGxpbmcgYHJlcXVpcmVgIG9uIGEgbW9kdWxlXG4gKiBAcmV0dXJucyBUaGUgZnVsbCBtb2R1bGUsIHVud3JhcHBlZCBpZiBuZWNlc3NhcnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQocmVxdWlyZVJlc3VsdDogUmVxdWlyZVJlc3VsdCk6IFJlcXVpcmVSZXN1bHQge1xuICByZXR1cm4gcmVxdWlyZVJlc3VsdC5fX2VzTW9kdWxlID8gKHJlcXVpcmVSZXN1bHQuZGVmYXVsdCBhcyBSZXF1aXJlUmVzdWx0KSA6IHJlcXVpcmVSZXN1bHQ7XG59XG5cbi8vIFJvbGx1cCB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0KGUpIHtcbi8vICAgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZVsnZGVmYXVsdCddIDogZTtcbi8vIH1cbiJdLCJuYW1lcyI6WyJfaW50ZXJvcERlZmF1bHQkMSIsIl9pbnRlcm9wRGVmYXVsdCIsInJlcXVpcmVSZXN1bHQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_interopDefault.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespace.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespace.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Adds a self-referential `default` property to CJS modules which aren't the result of transpilation from ESM modules.\n *\n * Adapted from Rollup (https://github.com/rollup/rollup)\n *\n * @param requireResult The result of calling `require` on a module\n * @returns Either `requireResult` or a copy of `requireResult` with an added self-referential `default` property\n */\nfunction _interopNamespace$1(requireResult) {\n  return requireResult.__esModule ? requireResult : _objectSpread(_objectSpread({}, requireResult), {}, {\n    default: requireResult\n  });\n}\n\n// Rollup version (with `output.externalLiveBindings` and `output.freeze` both set to false)\n// function _interopNamespace(e) {\n//   if (e && e.__esModule) return e;\n//   var n = Object.create(null);\n//   if (e) {\n//     for (var k in e) {\n//       n[k] = e[k];\n//     }\n//   }\n//   n[\"default\"] = e;\n//   return n;\n// }\n\nexports._interopNamespace = _interopNamespace$1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BOYW1lc3BhY2UuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsbUJBQUFDLENBQUFDLGFBQUE7RUFDQSxPQUFBQSxhQUFBLENBQUFDLFVBQUEsR0FBQUQsYUFBQSxHQUFBRSxhQUFBLENBQUFBLGFBQUEsS0FBQUYsYUFBQTtJQUFBRyxPQUFBLEVBQUFIO0VBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BOYW1lc3BhY2UudHM/YjkwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC90cmVlL2MyY2RhNDI0ZTY5Njg2NjcxYmEwMTBkNjI4YzBmNzBjNDNhNTYzZjhcbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxNyBbdGhlc2UgcGVvcGxlXShodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9ncmFwaHMvY29udHJpYnV0b3JzKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZFxuLy8gZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb25cbi8vIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQgLyBvciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4vLyBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zXG4vLyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVFxuLy8gTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4vLyBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4vLyBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkVcbi8vIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgdHlwZSB7IFJlcXVpcmVSZXN1bHQgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBBZGRzIGEgc2VsZi1yZWZlcmVudGlhbCBgZGVmYXVsdGAgcHJvcGVydHkgdG8gQ0pTIG1vZHVsZXMgd2hpY2ggYXJlbid0IHRoZSByZXN1bHQgb2YgdHJhbnNwaWxhdGlvbiBmcm9tIEVTTSBtb2R1bGVzLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBSb2xsdXAgKGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwKVxuICpcbiAqIEBwYXJhbSByZXF1aXJlUmVzdWx0IFRoZSByZXN1bHQgb2YgY2FsbGluZyBgcmVxdWlyZWAgb24gYSBtb2R1bGVcbiAqIEByZXR1cm5zIEVpdGhlciBgcmVxdWlyZVJlc3VsdGAgb3IgYSBjb3B5IG9mIGByZXF1aXJlUmVzdWx0YCB3aXRoIGFuIGFkZGVkIHNlbGYtcmVmZXJlbnRpYWwgYGRlZmF1bHRgIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShyZXF1aXJlUmVzdWx0OiBSZXF1aXJlUmVzdWx0KTogUmVxdWlyZVJlc3VsdCB7XG4gIHJldHVybiByZXF1aXJlUmVzdWx0Ll9fZXNNb2R1bGUgPyByZXF1aXJlUmVzdWx0IDogeyAuLi5yZXF1aXJlUmVzdWx0LCBkZWZhdWx0OiByZXF1aXJlUmVzdWx0IH07XG59XG5cbi8vIFJvbGx1cCB2ZXJzaW9uICh3aXRoIGBvdXRwdXQuZXh0ZXJuYWxMaXZlQmluZGluZ3NgIGFuZCBgb3V0cHV0LmZyZWV6ZWAgYm90aCBzZXQgdG8gZmFsc2UpXG4vLyBmdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZShlKSB7XG4vLyAgIGlmIChlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XG4vLyAgIHZhciBuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8vICAgaWYgKGUpIHtcbi8vICAgICBmb3IgKHZhciBrIGluIGUpIHtcbi8vICAgICAgIG5ba10gPSBlW2tdO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICBuW1wiZGVmYXVsdFwiXSA9IGU7XG4vLyAgIHJldHVybiBuO1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9pbnRlcm9wTmFtZXNwYWNlJDEiLCJfaW50ZXJvcE5hbWVzcGFjZSIsInJlcXVpcmVSZXN1bHQiLCJfX2VzTW9kdWxlIiwiX29iamVjdFNwcmVhZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespaceDefaultOnly.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespaceDefaultOnly.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Wrap a module in an object, as the value under the key `default`.\n *\n * Adapted from Rollup (https://github.com/rollup/rollup)\n *\n * @param requireResult The result of calling `require` on a module\n * @returns An object containing the key-value pair (`default`, `requireResult`)\n */\nfunction _interopNamespaceDefaultOnly$1(requireResult) {\n  return {\n    __proto__: null,\n    default: requireResult\n  };\n}\n\n// Rollup version\n// function _interopNamespaceDefaultOnly(e) {\n//   return {\n//     __proto__: null,\n//     'default': e\n//   };\n// }\n\nexports._interopNamespaceDefaultOnly = _interopNamespaceDefaultOnly$1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BOYW1lc3BhY2VEZWZhdWx0T25seS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSw4QkFBQUMsQ0FBQUMsYUFBQTtFQUNBO0lBQ0FDLFNBQUE7SUFDQUMsT0FBQSxFQUFBRjtFQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BOYW1lc3BhY2VEZWZhdWx0T25seS50cz8zN2YzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL3RyZWUvYzJjZGE0MjRlNjk2ODY2NzFiYTAxMGQ2MjhjMGY3MGM0M2E1NjNmOFxuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE3IFt0aGVzZSBwZW9wbGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2dyYXBocy9jb250cmlidXRvcnMpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkXG4vLyBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuLy8gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZCAvIG9yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbi8vIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnNcbi8vIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UXG4vLyBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbi8vIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbi8vIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRVxuLy8gT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB0eXBlIHsgUmVxdWlyZVJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFdyYXAgYSBtb2R1bGUgaW4gYW4gb2JqZWN0LCBhcyB0aGUgdmFsdWUgdW5kZXIgdGhlIGtleSBgZGVmYXVsdGAuXG4gKlxuICogQWRhcHRlZCBmcm9tIFJvbGx1cCAoaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXApXG4gKlxuICogQHBhcmFtIHJlcXVpcmVSZXN1bHQgVGhlIHJlc3VsdCBvZiBjYWxsaW5nIGByZXF1aXJlYCBvbiBhIG1vZHVsZVxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleS12YWx1ZSBwYWlyIChgZGVmYXVsdGAsIGByZXF1aXJlUmVzdWx0YClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdE9ubHkocmVxdWlyZVJlc3VsdDogUmVxdWlyZVJlc3VsdCk6IFJlcXVpcmVSZXN1bHQge1xuICByZXR1cm4ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBkZWZhdWx0OiByZXF1aXJlUmVzdWx0LFxuICB9O1xufVxuXG4vLyBSb2xsdXAgdmVyc2lvblxuLy8gZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2VEZWZhdWx0T25seShlKSB7XG4vLyAgIHJldHVybiB7XG4vLyAgICAgX19wcm90b19fOiBudWxsLFxuLy8gICAgICdkZWZhdWx0JzogZVxuLy8gICB9O1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdE9ubHkkMSIsIl9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdE9ubHkiLCJyZXF1aXJlUmVzdWx0IiwiX19wcm90b19fIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespaceDefaultOnly.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireDefault.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireDefault.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Wraps modules which aren't the result of transpiling an ESM module in an object under the key `default`\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param requireResult The result of calling `require` on a module\n * @returns `requireResult` or `requireResult` wrapped in an object, keyed as `default`\n */\nfunction _interopRequireDefault(requireResult) {\n  return requireResult.__esModule ? requireResult : {\n    default: requireResult\n  };\n}\n\n// Sucrase version\n// function _interopRequireDefault(obj) {\n//   return obj && obj.__esModule ? obj : { default: obj };\n// }\n\nexports._interopRequireDefault = _interopRequireDefault;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSx1QkFBQUMsYUFBQTtFQUNBLE9BQUFBLGFBQUEsQ0FBQUMsVUFBQSxHQUFBRCxhQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2J1aWxkUG9seWZpbGxzL19pbnRlcm9wUmVxdWlyZURlZmF1bHQudHM/MGZmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS90cmVlLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWZcbi8vXG4vLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCB2YXJpb3VzIGNvbnRyaWJ1dG9ycyAoc2VlIEFVVEhPUlMpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuaW1wb3J0IHR5cGUgeyBSZXF1aXJlUmVzdWx0IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogV3JhcHMgbW9kdWxlcyB3aGljaCBhcmVuJ3QgdGhlIHJlc3VsdCBvZiB0cmFuc3BpbGluZyBhbiBFU00gbW9kdWxlIGluIGFuIG9iamVjdCB1bmRlciB0aGUga2V5IGBkZWZhdWx0YFxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqXG4gKiBAcGFyYW0gcmVxdWlyZVJlc3VsdCBUaGUgcmVzdWx0IG9mIGNhbGxpbmcgYHJlcXVpcmVgIG9uIGEgbW9kdWxlXG4gKiBAcmV0dXJucyBgcmVxdWlyZVJlc3VsdGAgb3IgYHJlcXVpcmVSZXN1bHRgIHdyYXBwZWQgaW4gYW4gb2JqZWN0LCBrZXllZCBhcyBgZGVmYXVsdGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZVJlc3VsdDogUmVxdWlyZVJlc3VsdCk6IFJlcXVpcmVSZXN1bHQge1xuICByZXR1cm4gcmVxdWlyZVJlc3VsdC5fX2VzTW9kdWxlID8gcmVxdWlyZVJlc3VsdCA6IHsgZGVmYXVsdDogcmVxdWlyZVJlc3VsdCB9O1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb25cbi8vIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4vLyAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlUmVzdWx0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireDefault.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireWildcard.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireWildcard.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Adds a `default` property to CJS modules which aren't the result of transpilation from ESM modules.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param requireResult The result of calling `require` on a module\n * @returns Either `requireResult` or a copy of `requireResult` with an added self-referential `default` property\n */\nfunction _interopRequireWildcard(requireResult) {\n  return requireResult.__esModule ? requireResult : _objectSpread(_objectSpread({}, requireResult), {}, {\n    default: requireResult\n  });\n}\n\n// Sucrase version\n// function _interopRequireWildcard(obj) {\n//   if (obj && obj.__esModule) {\n//     return obj;\n//   } else {\n//     var newObj = {};\n//     if (obj != null) {\n//       for (var key in obj) {\n//         if (Object.prototype.hasOwnProperty.call(obj, key)) {\n//           newObj[key] = obj[key];\n//         }\n//       }\n//     }\n//     newObj.default = obj;\n//     return newObj;\n//   }\n// }\n\nexports._interopRequireWildcard = _interopRequireWildcard;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsd0JBQUFDLGFBQUE7RUFDQSxPQUFBQSxhQUFBLENBQUFDLFVBQUEsR0FBQUQsYUFBQSxHQUFBRSxhQUFBLENBQUFBLGFBQUEsS0FBQUYsYUFBQTtJQUFBRyxPQUFBLEVBQUFIO0VBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL2J1aWxkUG9seWZpbGxzL19pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLnRzP2ZjYTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbmltcG9ydCB0eXBlIHsgUmVxdWlyZVJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEFkZHMgYSBgZGVmYXVsdGAgcHJvcGVydHkgdG8gQ0pTIG1vZHVsZXMgd2hpY2ggYXJlbid0IHRoZSByZXN1bHQgb2YgdHJhbnNwaWxhdGlvbiBmcm9tIEVTTSBtb2R1bGVzLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqXG4gKiBAcGFyYW0gcmVxdWlyZVJlc3VsdCBUaGUgcmVzdWx0IG9mIGNhbGxpbmcgYHJlcXVpcmVgIG9uIGEgbW9kdWxlXG4gKiBAcmV0dXJucyBFaXRoZXIgYHJlcXVpcmVSZXN1bHRgIG9yIGEgY29weSBvZiBgcmVxdWlyZVJlc3VsdGAgd2l0aCBhbiBhZGRlZCBzZWxmLXJlZmVyZW50aWFsIGBkZWZhdWx0YCBwcm9wZXJ0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZVJlc3VsdDogUmVxdWlyZVJlc3VsdCk6IFJlcXVpcmVSZXN1bHQge1xuICByZXR1cm4gcmVxdWlyZVJlc3VsdC5fX2VzTW9kdWxlID8gcmVxdWlyZVJlc3VsdCA6IHsgLi4ucmVxdWlyZVJlc3VsdCwgZGVmYXVsdDogcmVxdWlyZVJlc3VsdCB9O1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb25cbi8vIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuLy8gICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4vLyAgICAgcmV0dXJuIG9iajtcbi8vICAgfSBlbHNlIHtcbi8vICAgICB2YXIgbmV3T2JqID0ge307XG4vLyAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4vLyAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4vLyAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4vLyAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgfVxuLy8gICAgIH1cbi8vICAgICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbi8vICAgICByZXR1cm4gbmV3T2JqO1xuLy8gICB9XG4vLyB9XG4iXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlUmVzdWx0IiwiX19lc01vZHVsZSIsIl9vYmplY3RTcHJlYWQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireWildcard.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_nullishCoalesce.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_nullishCoalesce.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nfunction _nullishCoalesce(lhs, rhsFn) {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n\nexports._nullishCoalesce = _nullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxpQkFBQUMsR0FBQSxFQUFBQyxLQUFBO0VBQ0E7RUFDQSxPQUFBRCxHQUFBLFdBQUFBLEdBQUEsR0FBQUMsS0FBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS50cz8yYmU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIFJIUyBpcyB3cmFwcGVkIGluIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBpdCdzIGEgY29tcHV0ZWQgdmFsdWUsIHRoYXQgZXZhbHVhdGlvbiB3b24ndCBoYXBwZW4gdW5sZXNzIHRoZVxuICogTEhTIGV2YWx1YXRlcyB0byBhIG51bGxpc2ggdmFsdWUsIHRvIG1pbWljIHRoZSBvcGVyYXRvcidzIHNob3J0LWNpcmN1aXRpbmcgYmVoYXZpb3IuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICpcbiAqIEBwYXJhbSBsaHMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIHRoZSBgPz9gXG4gKiBAcGFyYW0gcmhzRm4gQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSByaWdodCBvZiB0aGUgYD8/YFxuICogQHJldHVybnMgVGhlIExIUyB2YWx1ZSwgdW5sZXNzIGl0J3MgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBpbiB3aGljaCBjYXNlLCB0aGUgUkhTIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfbnVsbGlzaENvYWxlc2NlKGxoczogdW5rbm93biwgcmhzRm46ICgpID0+IHVua25vd24pOiB1bmtub3duIHtcbiAgLy8gYnkgY2hlY2tpbmcgZm9yIGxvb3NlIGVxdWFsaXR5IHRvIGBudWxsYCwgd2UgY2F0Y2ggYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gIHJldHVybiBsaHMgIT0gbnVsbCA/IGxocyA6IHJoc0ZuKCk7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGZ1bmN0aW9uIF9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuLy8gICBpZiAobGhzICE9IG51bGwpIHtcbi8vICAgICByZXR1cm4gbGhzO1xuLy8gICB9IGVsc2Uge1xuLy8gICAgIHJldHVybiByaHNGbigpO1xuLy8gICB9XG4vLyB9XG4iXSwibmFtZXMiOlsiX251bGxpc2hDb2FsZXNjZSIsImxocyIsInJoc0ZuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_nullishCoalesce.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChain.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChain.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _optionalChain(ops) {\n  var lastAccessLHS = undefined;\n  var value = ops[0];\n  var i = 1;\n  while (i < ops.length) {\n    var op = ops[i];\n    var fn = ops[i + 1];\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        var _value;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return (_value = value).call.apply(_value, [lastAccessLHS].concat(args));\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexports._optionalChain = _optionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxlQUFBQyxHQUFBO0VBQ0EsSUFBQUMsYUFBQSxHQUFBQyxTQUFBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBSCxHQUFBO0VBQ0EsSUFBQUksQ0FBQTtFQUNBLE9BQUFBLENBQUEsR0FBQUosR0FBQSxDQUFBSyxNQUFBO0lBQ0EsSUFBQUMsRUFBQSxHQUFBTixHQUFBLENBQUFJLENBQUE7SUFDQSxJQUFBRyxFQUFBLEdBQUFQLEdBQUEsQ0FBQUksQ0FBQTtJQUNBQSxDQUFBO0lBQ0E7SUFDQSxLQUFBRSxFQUFBLHlCQUFBQSxFQUFBLHdCQUFBSCxLQUFBO01BQ0E7TUFDQTtJQUNBO0lBQ0EsSUFBQUcsRUFBQSxpQkFBQUEsRUFBQTtNQUNBTCxhQUFBLEdBQUFFLEtBQUE7TUFDQUEsS0FBQSxHQUFBSSxFQUFBLENBQUFKLEtBQUE7SUFDQSxXQUFBRyxFQUFBLGVBQUFBLEVBQUE7TUFDQUgsS0FBQSxHQUFBSSxFQUFBO1FBQUEsSUFBQUMsTUFBQTtRQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBTCxNQUFBLEVBQUFNLElBQUEsT0FBQUMsS0FBQSxDQUFBSCxJQUFBLEdBQUFJLElBQUEsTUFBQUEsSUFBQSxHQUFBSixJQUFBLEVBQUFJLElBQUE7VUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFILFNBQUEsQ0FBQUcsSUFBQTtRQUFBO1FBQUEsUUFBQUwsTUFBQSxHQUFBTCxLQUFBLEVBQUFXLElBQUEsQ0FBQUMsS0FBQSxDQUFBUCxNQUFBLEdBQUFQLGFBQUEsRUFBQWUsTUFBQSxDQUFBTCxJQUFBO01BQUE7TUFDQVYsYUFBQSxHQUFBQyxTQUFBO0lBQ0E7RUFDQTtFQUNBLE9BQUFDLEtBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbi50cz8wOTEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5pbXBvcnQgdHlwZSB7IEdlbmVyaWNGdW5jdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucy5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4ob3BzOiB1bmtub3duW10pOiB1bmtub3duIHtcbiAgbGV0IGxhc3RBY2Nlc3NMSFM6IHVua25vd24gPSB1bmRlZmluZWQ7XG4gIGxldCB2YWx1ZSA9IG9wc1swXTtcbiAgbGV0IGkgPSAxO1xuICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbiAgICBjb25zdCBvcCA9IG9wc1tpXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgZm4gPSBvcHNbaSArIDFdIGFzIChpbnRlcm1lZGlhdGVWYWx1ZTogdW5rbm93bikgPT4gdW5rbm93bjtcbiAgICBpICs9IDI7XG4gICAgLy8gYnkgY2hlY2tpbmcgZm9yIGxvb3NlIGVxdWFsaXR5IHRvIGBudWxsYCwgd2UgY2F0Y2ggYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgIC8vIHJlYWxseSB3ZSdyZSBtZWFuaW5nIHRvIHJldHVybiBgdW5kZWZpbmVkYCBhcyBhbiBhY3R1YWwgdmFsdWUgaGVyZSwgYnV0IGl0IHNhdmVzIGJ5dGVzIG5vdCB0byB3cml0ZSBpdFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4gICAgICB2YWx1ZSA9IGZuKCguLi5hcmdzOiB1bmtub3duW10pID0+ICh2YWx1ZSBhcyBHZW5lcmljRnVuY3Rpb24pLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb25cbi8vIGZ1bmN0aW9uIF9vcHRpb25hbENoYWluKG9wcykge1xuLy8gICBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgbGV0IHZhbHVlID0gb3BzWzBdO1xuLy8gICBsZXQgaSA9IDE7XG4vLyAgIHdoaWxlIChpIDwgb3BzLmxlbmd0aCkge1xuLy8gICAgIGNvbnN0IG9wID0gb3BzW2ldO1xuLy8gICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXTtcbi8vICAgICBpICs9IDI7XG4vLyAgICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbi8vICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICAgIGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTtcbi8vICAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuLy8gICAgIH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHtcbi8vICAgICAgIHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpO1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgIH1cbi8vICAgcmV0dXJuIHZhbHVlO1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluIiwib3BzIiwibGFzdEFjY2Vzc0xIUyIsInVuZGVmaW5lZCIsInZhbHVlIiwiaSIsImxlbmd0aCIsIm9wIiwiZm4iLCJfdmFsdWUiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNhbGwiLCJhcHBseSIsImNvbmNhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChainDelete.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChainDelete.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _optionalChain = __webpack_require__(/*! ./_optionalChain.js */ \"./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nfunction _optionalChainDelete(ops) {\n  var result = _optionalChain._optionalChain(ops);\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// function _optionalChainDelete(ops) {\n//   const result = _optionalChain(ops);\n//   // by checking for loose equality to `null`, we catch both `null` and `undefined`\n//   return result == null ? true : result;\n// }\n\nexports._optionalChainDelete = _optionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW5EZWxldGUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEscUJBQUFDLEdBQUE7RUFDQSxJQUFBQyxNQUFBLEdBQUFDLGNBQUEsQ0FBQUEsY0FBQSxDQUFBRixHQUFBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsT0FBQUMsTUFBQSxrQkFBQUEsTUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uLy4uL3NyYy9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbkRlbGV0ZS50cz9hYmFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5pbXBvcnQgeyBfb3B0aW9uYWxDaGFpbiB9IGZyb20gJy4vX29wdGlvbmFsQ2hhaW4nO1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucywgaW4gY2FzZXMgd2hlcmUgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGlzIHRvIGJlIGRlbGV0ZWQuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKSBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL2Jsb2IvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5Zi9zcmMvdHJhbnNmb3JtZXJzL09wdGlvbmFsQ2hhaW5pbmdOdWxsaXNoVHJhbnNmb3JtZXIudHMjTDE1XG4gKlxuICogQHBhcmFtIG9wcyBBcnJheSByZXN1bHQgb2YgZXhwcmVzc2lvbiBjb252ZXJzaW9uXG4gKiBAcmV0dXJucyBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZGVsZXRlYCBvcGVyYXRvcjogYHRydWVgLCB1bmxlc3MgdGhlIGRlbGV0aW9uIHRhcmdldCBpcyBhbiBvd24sIG5vbi1jb25maWd1cmFibGVcbiAqIHByb3BlcnR5IChvbmUgd2hpY2ggY2FuJ3QgYmUgZGVsZXRlZCBvciB0dXJuZWQgaW50byBhbiBhY2Nlc3NvciwgYW5kIHdob3NlIGVudW1lcmFiaWxpdHkgY2FuJ3QgYmUgY2hhbmdlZCksIGluIHdoaWNoXG4gKiBjYXNlIGBmYWxzZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbkRlbGV0ZShvcHM6IHVua25vd25bXSk6IGJvb2xlYW4ge1xuICBjb25zdCByZXN1bHQgPSBfb3B0aW9uYWxDaGFpbihvcHMpIGFzIGJvb2xlYW4gfCBudWxsO1xuICAvLyBJZiBgcmVzdWx0YCBpcyBgbnVsbGAsIGl0IG1lYW5zIHdlIGRpZG4ndCBnZXQgdG8gdGhlIGVuZCBvZiB0aGUgY2hhaW4gYW5kIHNvIG5vdGhpbmcgd2FzIGRlbGV0ZWQgKGluIHdoaWNoIGNhc2UsXG4gIC8vIHJldHVybiBgdHJ1ZWAgc2luY2UgdGhhdCdzIHdoYXQgYGRlbGV0ZWAgZG9lcyB3aGVuIGl0IG5vLW9wcykuIElmIGl0J3Mgbm9uLW51bGwsIHdlIGtub3cgdGhlIGRlbGV0ZSBoYXBwZW5lZCwgaW5cbiAgLy8gd2hpY2ggY2FzZSB3ZSByZXR1cm4gd2hhdGV2ZXIgdGhlIGBkZWxldGVgIHJldHVybmVkLCB3aGljaCB3aWxsIGJlIGEgYm9vbGVhbi5cbiAgcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gdHJ1ZSA6IHJlc3VsdDtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW5EZWxldGUob3BzKSB7XG4vLyAgIGNvbnN0IHJlc3VsdCA9IF9vcHRpb25hbENoYWluKG9wcyk7XG4vLyAgIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuLy8gICByZXR1cm4gcmVzdWx0ID09IG51bGwgPyB0cnVlIDogcmVzdWx0O1xuLy8gfVxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluRGVsZXRlIiwib3BzIiwicmVzdWx0IiwiX29wdGlvbmFsQ2hhaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChainDelete.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/buildPolyfills/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/buildPolyfills/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _asyncNullishCoalesce = __webpack_require__(/*! ./_asyncNullishCoalesce.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncNullishCoalesce.js");
var _asyncOptionalChain = __webpack_require__(/*! ./_asyncOptionalChain.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChain.js");
var _asyncOptionalChainDelete = __webpack_require__(/*! ./_asyncOptionalChainDelete.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_asyncOptionalChainDelete.js");
var _createNamedExportFrom = __webpack_require__(/*! ./_createNamedExportFrom.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_createNamedExportFrom.js");
var _createStarExport = __webpack_require__(/*! ./_createStarExport.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_createStarExport.js");
var _interopDefault$1 = __webpack_require__(/*! ./_interopDefault.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopDefault.js");
var _interopNamespace$1 = __webpack_require__(/*! ./_interopNamespace.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespace.js");
var _interopNamespaceDefaultOnly$1 = __webpack_require__(/*! ./_interopNamespaceDefaultOnly.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopNamespaceDefaultOnly.js");
var _interopRequireDefault = __webpack_require__(/*! ./_interopRequireDefault.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireDefault.js");
var _interopRequireWildcard = __webpack_require__(/*! ./_interopRequireWildcard.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_interopRequireWildcard.js");
var _nullishCoalesce = __webpack_require__(/*! ./_nullishCoalesce.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_nullishCoalesce.js");
var _optionalChain = __webpack_require__(/*! ./_optionalChain.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChain.js");
var _optionalChainDelete = __webpack_require__(/*! ./_optionalChainDelete.js */ "./node_modules/@sentry/utils/cjs/buildPolyfills/_optionalChainDelete.js");
exports._asyncNullishCoalesce = _asyncNullishCoalesce._asyncNullishCoalesce;
exports._asyncOptionalChain = _asyncOptionalChain._asyncOptionalChain;
exports._asyncOptionalChainDelete = _asyncOptionalChainDelete._asyncOptionalChainDelete;
exports._createNamedExportFrom = _createNamedExportFrom._createNamedExportFrom;
exports._createStarExport = _createStarExport._createStarExport;
exports._interopDefault = _interopDefault$1._interopDefault;
exports._interopNamespace = _interopNamespace$1._interopNamespace;
exports._interopNamespaceDefaultOnly = _interopNamespaceDefaultOnly$1._interopNamespaceDefaultOnly;
exports._interopRequireDefault = _interopRequireDefault._interopRequireDefault;
exports._interopRequireWildcard = _interopRequireWildcard._interopRequireWildcard;
exports._nullishCoalesce = _nullishCoalesce._nullishCoalesce;
exports._optionalChain = _optionalChain._optionalChain;
exports._optionalChainDelete = _optionalChainDelete._optionalChainDelete;

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/clientreport.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/clientreport.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar envelope = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@sentry/utils/cjs/envelope.js\");\nvar time = __webpack_require__(/*! ./time.js */ \"./node_modules/@sentry/utils/cjs/time.js\");\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(discarded_events, dsn, timestamp) {\n  var clientReportItem = [{\n    type: 'client_report'\n  }, {\n    timestamp: timestamp || time.dateTimestampInSeconds(),\n    discarded_events: discarded_events\n  }];\n  return envelope.createEnvelope(dsn ? {\n    dsn: dsn\n  } : {}, [clientReportItem]);\n}\nexports.createClientReportEnvelope = createClientReportEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvY2xpZW50cmVwb3J0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSwyQkFDQUMsZ0JBQUEsRUFDQUMsR0FBQSxFQUNBQyxTQUFBLEVBQ0E7RUFDQSxJQUFBQyxnQkFBQSxJQUNBO0lBQUFDLElBQUE7RUFBQSxHQUNBO0lBQ0FGLFNBQUEsRUFBQUEsU0FBQSxJQUFBRyxJQUFBLENBQUFDLHNCQUFBO0lBQ0FOLGdCQUFBLEVBQUFBO0VBQ0EsRUFDQTtFQUNBLE9BQUFPLFFBQUEsQ0FBQUMsY0FBQSxDQUFBUCxHQUFBO0lBQUFBLEdBQUEsRUFBQUE7RUFBQSxTQUFBRSxnQkFBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vc3JjL2NsaWVudHJlcG9ydC50cz8yYjZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50UmVwb3J0LCBDbGllbnRSZXBvcnRFbnZlbG9wZSwgQ2xpZW50UmVwb3J0SXRlbSB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBjcmVhdGVFbnZlbG9wZSB9IGZyb20gJy4vZW52ZWxvcGUnO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4vdGltZSc7XG5cbi8qKlxuICogQ3JlYXRlcyBjbGllbnQgcmVwb3J0IGVudmVsb3BlXG4gKiBAcGFyYW0gZGlzY2FyZGVkX2V2ZW50cyBBbiBhcnJheSBvZiBkaXNjYXJkIGV2ZW50c1xuICogQHBhcmFtIGRzbiBBIERTTiB0aGF0IGNhbiBiZSBzZXQgb24gdGhlIGhlYWRlci4gT3B0aW9uYWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZShcbiAgZGlzY2FyZGVkX2V2ZW50czogQ2xpZW50UmVwb3J0WydkaXNjYXJkZWRfZXZlbnRzJ10sXG4gIGRzbj86IHN0cmluZyxcbiAgdGltZXN0YW1wPzogbnVtYmVyLFxuKTogQ2xpZW50UmVwb3J0RW52ZWxvcGUge1xuICBjb25zdCBjbGllbnRSZXBvcnRJdGVtOiBDbGllbnRSZXBvcnRJdGVtID0gW1xuICAgIHsgdHlwZTogJ2NsaWVudF9yZXBvcnQnIH0sXG4gICAge1xuICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAgfHwgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpLFxuICAgICAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgICB9LFxuICBdO1xuICByZXR1cm4gY3JlYXRlRW52ZWxvcGU8Q2xpZW50UmVwb3J0RW52ZWxvcGU+KGRzbiA/IHsgZHNuIH0gOiB7fSwgW2NsaWVudFJlcG9ydEl0ZW1dKTtcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZSIsImRpc2NhcmRlZF9ldmVudHMiLCJkc24iLCJ0aW1lc3RhbXAiLCJjbGllbnRSZXBvcnRJdGVtIiwidHlwZSIsInRpbWUiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwiZW52ZWxvcGUiLCJjcmVhdGVFbnZlbG9wZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/clientreport.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/dsn.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/dsn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar error = __webpack_require__(/*! ./error.js */ \"./node_modules/@sentry/utils/cjs/error.js\");\n\n/** Regular expression used to parse a Dsn. */\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn) {\n  var withPassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var host = dsn.host,\n    path = dsn.path,\n    pass = dsn.pass,\n    port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol,\n    publicKey = dsn.publicKey;\n  return \"\".concat(protocol, \"://\").concat(publicKey).concat(withPassword && pass ? \":\".concat(pass) : '') + \"@\".concat(host).concat(port ? \":\".concat(port) : '', \"/\").concat(path ? \"\".concat(path, \"/\") : path).concat(projectId);\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents\n */\nfunction dsnFromString(str) {\n  var match = DSN_REGEX.exec(str);\n  if (!match) {\n    throw new error.SentryError(\"Invalid Sentry Dsn: \".concat(str));\n  }\n  var _match$slice = match.slice(1),\n    _match$slice2 = _slicedToArray(_match$slice, 6),\n    protocol = _match$slice2[0],\n    publicKey = _match$slice2[1],\n    _match$slice2$ = _match$slice2[2],\n    pass = _match$slice2$ === void 0 ? '' : _match$slice2$,\n    host = _match$slice2[3],\n    _match$slice2$2 = _match$slice2[4],\n    port = _match$slice2$2 === void 0 ? '' : _match$slice2$2,\n    lastPath = _match$slice2[5];\n  var path = '';\n  var projectId = lastPath;\n  var split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    var projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host: host,\n    pass: pass,\n    path: path,\n    projectId: projectId,\n    port: port,\n    protocol: protocol,\n    publicKey: publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!(typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n    return;\n  }\n  var port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol;\n  var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(function (component) {\n    if (!dsn[component]) {\n      throw new error.SentryError(\"Invalid Sentry Dsn: \".concat(component, \" missing\"));\n    }\n  });\n  if (!projectId.match(/^\\d+$/)) {\n    throw new error.SentryError(\"Invalid Sentry Dsn: Invalid projectId \".concat(projectId));\n  }\n  if (!isValidProtocol(protocol)) {\n    throw new error.SentryError(\"Invalid Sentry Dsn: Invalid protocol \".concat(protocol));\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new error.SentryError(\"Invalid Sentry Dsn: Invalid port \".concat(port));\n  }\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nfunction makeDsn(from) {\n  var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}\nexports.dsnFromString = dsnFromString;\nexports.dsnToString = dsnToString;\nexports.makeDsn = makeDsn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/dsn.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/env.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/env.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nfunction getSDKSource() {\n  // @ts-ignore \"npm\" is injected by rollup during build process\n  return \"npm\";\n}\nexports.getSDKSource = getSDKSource;\nexports.isBrowserBundle = isBrowserBundle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvZW52LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxnQkFBQTtFQUNBLGNBQUFDLHlCQUFBLHNCQUFBQSx5QkFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLGFBQUE7RUFDQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvZW52LnRzPzNhYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBsb2dnZXJgIGFuZCBwcmV2ZW50aW5nIG5vZGUtcmVsYXRlZCBjb2RlIGZyb20gYXBwZWFyaW5nIGluIGJyb3dzZXIgYnVuZGxlcy5cbiAqXG4gKiBBdHRlbnRpb246XG4gKiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvIGRlZmluZSBjb25zdGFudHMvZmxhZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdHJlZS1zaGFraW5nIGNvbmR1Y3RlZCBieVxuICogdXNlcnMuIFRoZXNlIGZsYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG5kZWNsYXJlIGNvbnN0IF9fU0VOVFJZX0JST1dTRVJfQlVORExFX186IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIFNka1NvdXJjZSA9ICducG0nIHwgJ2NkbicgfCAnbG9hZGVyJztcblxuLyoqXG4gKiBGaWd1cmVzIG91dCBpZiB3ZSdyZSBidWlsZGluZyBhIGJyb3dzZXIgYnVuZGxlLlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBpcyBhIGJyb3dzZXIgYnVuZGxlIGJ1aWxkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyQnVuZGxlKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIF9fU0VOVFJZX0JST1dTRVJfQlVORExFX18gIT09ICd1bmRlZmluZWQnICYmICEhX19TRU5UUllfQlJPV1NFUl9CVU5ETEVfXztcbn1cblxuLyoqXG4gKiBHZXQgc291cmNlIG9mIFNESy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNES1NvdXJjZSgpOiBTZGtTb3VyY2Uge1xuICAvLyBAdHMtaWdub3JlIF9fU0VOVFJZX1NES19TT1VSQ0VfXyBpcyBpbmplY3RlZCBieSByb2xsdXAgZHVyaW5nIGJ1aWxkIHByb2Nlc3NcbiAgcmV0dXJuIF9fU0VOVFJZX1NES19TT1VSQ0VfXztcbn1cbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/env.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/envelope.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/envelope.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array-buffer.slice.js */ \"./node_modules/core-js/modules/es.array-buffer.slice.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint8-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.copy-within.js */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.every.js */ \"./node_modules/core-js/modules/es.typed-array.every.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.fill.js */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.filter.js */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find.js */ \"./node_modules/core-js/modules/es.typed-array.find.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find-index.js */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.for-each.js */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.includes.js */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.index-of.js */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.iterator.js */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.join.js */ \"./node_modules/core-js/modules/es.typed-array.join.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.last-index-of.js */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.map.js */ \"./node_modules/core-js/modules/es.typed-array.map.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce.js */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce-right.js */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reverse.js */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.set.js */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.slice.js */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.some.js */ \"./node_modules/core-js/modules/es.typed-array.some.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.sort.js */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.subarray.js */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar dsn = __webpack_require__(/*! ./dsn.js */ \"./node_modules/@sentry/utils/cjs/dsn.js\");\nvar normalize = __webpack_require__(/*! ./normalize.js */ \"./node_modules/@sentry/utils/cjs/normalize.js\");\nvar object = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/utils/cjs/object.js\");\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers) {\n  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [headers, items];\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  var _envelope = _slicedToArray(envelope, 2),\n    headers = _envelope[0],\n    items = _envelope[1];\n  return [headers, [].concat(_toConsumableArray(items), [newItem])];\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(envelope, callback) {\n  var envelopeItems = envelope[1];\n  var _iterator = _createForOfIteratorHelper(envelopeItems),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var envelopeItem = _step.value;\n      var envelopeItemType = envelopeItem[0].type;\n      var result = callback(envelopeItem, envelopeItemType);\n      if (result) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, function (_, type) {\n    return types.includes(type);\n  });\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input, textEncoder) {\n  var utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope, textEncoder) {\n  var _envelope2 = _slicedToArray(envelope, 2),\n    envHeaders = _envelope2[0],\n    items = _envelope2[1];\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  var parts = JSON.stringify(envHeaders);\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n  var _iterator2 = _createForOfIteratorHelper(items),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      var _item = _slicedToArray(item, 2),\n        itemHeaders = _item[0],\n        payload = _item[1];\n      append(\"\\n\".concat(JSON.stringify(itemHeaders), \"\\n\"));\n      if (typeof payload === 'string' || payload instanceof Uint8Array) {\n        append(payload);\n      } else {\n        var stringifiedPayload = void 0;\n        try {\n          stringifiedPayload = JSON.stringify(payload);\n        } catch (e) {\n          // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n          // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n          // performance impact but in this case a performance hit is better than throwing.\n          stringifiedPayload = JSON.stringify(normalize.normalize(payload));\n        }\n        append(stringifiedPayload);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n  var totalLength = buffers.reduce(function (acc, buf) {\n    return acc + buf.length;\n  }, 0);\n  var merged = new Uint8Array(totalLength);\n  var offset = 0;\n  var _iterator3 = _createForOfIteratorHelper(buffers),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var buffer = _step3.value;\n      merged.set(buffer, offset);\n      offset += buffer.length;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env, textEncoder, textDecoder) {\n  var buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n  function readBinary(length) {\n    var bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n  function readJson() {\n    var i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n    return JSON.parse(textDecoder.decode(readBinary(i)));\n  }\n  var envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var items = [];\n  while (buffer.length) {\n    var itemHeader = readJson();\n    var binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment, textEncoder) {\n  var buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n  return [object.dropUndefinedKeys({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\nvar ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor'\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  var _metadataOrEvent$sdk = metadataOrEvent.sdk,\n    name = _metadataOrEvent$sdk.name,\n    version = _metadataOrEvent$sdk.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn$1) {\n  var dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return _objectSpread(_objectSpread(_objectSpread({\n    event_id: event.event_id,\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!tunnel && {\n    dsn: dsn.dsnToString(dsn$1)\n  }), dynamicSamplingContext && {\n    trace: object.dropUndefinedKeys(_objectSpread({}, dynamicSamplingContext))\n  });\n}\nexports.addItemToEnvelope = addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;\nexports.createEnvelope = createEnvelope;\nexports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;\nexports.envelopeContainsItemType = envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = parseEnvelope;\nexports.serializeEnvelope = serializeEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/envelope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/error.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/error.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.reflect.construct.js */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.map.js */ \"./node_modules/core-js/modules/es.map.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** An error emitted by Sentry SDKs and related utilities. */\nvar SentryError = /*#__PURE__*/function (_Error) {\n  \"use strict\";\n\n  _inherits(SentryError, _Error);\n  var _super = _createSuper(SentryError);\n  /** Display name of this error instance. */\n\n  function SentryError(message) {\n    var _this;\n    var logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'warn';\n    _classCallCheck(this, SentryError);\n    _this = _super.call(this, message);\n    _this.message = message;\n    _this.name = (this instanceof SentryError ? this.constructor : void 0).prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof SentryError ? this.constructor : void 0).prototype);\n    _this.logLevel = logLevel;\n    return _this;\n  }\n  return _createClass(SentryError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.SentryError = SentryError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvZXJyb3IuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFBQSxJQUNBQSxXQUFBLDBCQUFBQyxNQUFBO0VBQUE7O0VBQUFDLFNBQUEsQ0FBQUYsV0FBQSxFQUFBQyxNQUFBO0VBQUEsSUFBQUUsTUFBQSxHQUFBQyxZQUFBLENBQUFKLFdBQUE7RUFDQTs7RUFLQSxTQUFBQSxZQUFBSyxPQUFBO0lBQUEsSUFBQUMsS0FBQTtJQUFBLElBQUFDLFFBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBO0lBQUFHLGVBQUEsT0FBQVgsV0FBQTtJQUNBTSxLQUFBLEdBQUFILE1BQUEsQ0FBQVMsSUFBQSxPQUFBUCxPQUFBO0lBQUFDLEtBQUEsQ0FBQUQsT0FBQSxHQUFBQSxPQUFBO0lBRUFDLEtBQUEsQ0FBQU8sSUFBQSxvQkFBQWIsV0FBQSxRQUFBYyxXQUFBLFdBQUFDLFNBQUEsQ0FBQUQsV0FBQSxDQUFBRCxJQUFBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FHLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxzQkFBQSxDQUFBWixLQUFBLG9CQUFBTixXQUFBLFFBQUFjLFdBQUEsV0FBQUMsU0FBQTtJQUNBVCxLQUFBLENBQUFDLFFBQUEsR0FBQUEsUUFBQTtJQUFBLE9BQUFELEtBQUE7RUFDQTtFQUFBLE9BQUFhLFlBQUEsQ0FBQW5CLFdBQUE7QUFBQSxnQkFBQW9CLGdCQUFBLENBZkFDLEtBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvZXJyb3IudHM/Y2ZlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbnNvbGVMZXZlbCB9IGZyb20gJy4vbG9nZ2VyJztcblxuLyoqIEFuIGVycm9yIGVtaXR0ZWQgYnkgU2VudHJ5IFNES3MgYW5kIHJlbGF0ZWQgdXRpbGl0aWVzLiAqL1xuZXhwb3J0IGNsYXNzIFNlbnRyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogRGlzcGxheSBuYW1lIG9mIHRoaXMgZXJyb3IgaW5zdGFuY2UuICovXG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIGxvZ0xldmVsOiBDb25zb2xlTGV2ZWw7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcsIGxvZ0xldmVsOiBDb25zb2xlTGV2ZWwgPSAnd2FybicpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIHRoaXMubmFtZSA9IG5ldy50YXJnZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgLy8gVGhpcyBzZXRzIHRoZSBwcm90b3R5cGUgdG8gYmUgYEVycm9yYCwgbm90IGBTZW50cnlFcnJvcmAuIEl0J3MgdW5jbGVhciB3aHkgd2UgZG8gdGhpcywgYnV0IGNvbW1lbnRpbmcgdGhpcyBsaW5lXG4gICAgLy8gb3V0IGNhdXNlcyB2YXJpb3VzIChzZWVtaW5nbHkgdG90YWxseSB1bnJlbGF0ZWQpIHBsYXl3cmlnaHQgdGVzdHMgY29uc2lzdGVudGx5IHRpbWUgb3V0LiBGWUksIHRoaXMgbWFrZXNcbiAgICAvLyBpbnN0YW5jZXMgb2YgYFNlbnRyeUVycm9yYCBmYWlsIGBvYmogaW5zdGFuY2VvZiBTZW50cnlFcnJvcmAgY2hlY2tzLlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICB9XG59XG4iXSwibmFtZXMiOlsiU2VudHJ5RXJyb3IiLCJfRXJyb3IiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJfY3JlYXRlU3VwZXIiLCJtZXNzYWdlIiwiX3RoaXMiLCJsb2dMZXZlbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9jbGFzc0NhbGxDaGVjayIsImNhbGwiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfY3JlYXRlQ2xhc3MiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/error.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.array.fill.js */ "./node_modules/core-js/modules/es.array.fill.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var browser = __webpack_require__(/*! ./browser.js */ "./node_modules/@sentry/utils/cjs/browser.js");
var dsn = __webpack_require__(/*! ./dsn.js */ "./node_modules/@sentry/utils/cjs/dsn.js");
var error = __webpack_require__(/*! ./error.js */ "./node_modules/@sentry/utils/cjs/error.js");
var worldwide = __webpack_require__(/*! ./worldwide.js */ "./node_modules/@sentry/utils/cjs/worldwide.js");
var instrument = __webpack_require__(/*! ./instrument.js */ "./node_modules/@sentry/utils/cjs/instrument.js");
var is = __webpack_require__(/*! ./is.js */ "./node_modules/@sentry/utils/cjs/is.js");
var logger = __webpack_require__(/*! ./logger.js */ "./node_modules/@sentry/utils/cjs/logger.js");
var memo = __webpack_require__(/*! ./memo.js */ "./node_modules/@sentry/utils/cjs/memo.js");
var misc = __webpack_require__(/*! ./misc.js */ "./node_modules/@sentry/utils/cjs/misc.js");
var node = __webpack_require__(/*! ./node.js */ "./node_modules/@sentry/utils/cjs/node.js");
var normalize = __webpack_require__(/*! ./normalize.js */ "./node_modules/@sentry/utils/cjs/normalize.js");
var object = __webpack_require__(/*! ./object.js */ "./node_modules/@sentry/utils/cjs/object.js");
var path = __webpack_require__(/*! ./path.js */ "./node_modules/@sentry/utils/cjs/path.js");
var promisebuffer = __webpack_require__(/*! ./promisebuffer.js */ "./node_modules/@sentry/utils/cjs/promisebuffer.js");
var requestdata = __webpack_require__(/*! ./requestdata.js */ "./node_modules/@sentry/utils/cjs/requestdata.js");
var severity = __webpack_require__(/*! ./severity.js */ "./node_modules/@sentry/utils/cjs/severity.js");
var stacktrace = __webpack_require__(/*! ./stacktrace.js */ "./node_modules/@sentry/utils/cjs/stacktrace.js");
var string = __webpack_require__(/*! ./string.js */ "./node_modules/@sentry/utils/cjs/string.js");
var supports = __webpack_require__(/*! ./supports.js */ "./node_modules/@sentry/utils/cjs/supports.js");
var syncpromise = __webpack_require__(/*! ./syncpromise.js */ "./node_modules/@sentry/utils/cjs/syncpromise.js");
var time = __webpack_require__(/*! ./time.js */ "./node_modules/@sentry/utils/cjs/time.js");
var tracing = __webpack_require__(/*! ./tracing.js */ "./node_modules/@sentry/utils/cjs/tracing.js");
var env = __webpack_require__(/*! ./env.js */ "./node_modules/@sentry/utils/cjs/env.js");
var envelope = __webpack_require__(/*! ./envelope.js */ "./node_modules/@sentry/utils/cjs/envelope.js");
var clientreport = __webpack_require__(/*! ./clientreport.js */ "./node_modules/@sentry/utils/cjs/clientreport.js");
var ratelimit = __webpack_require__(/*! ./ratelimit.js */ "./node_modules/@sentry/utils/cjs/ratelimit.js");
var baggage = __webpack_require__(/*! ./baggage.js */ "./node_modules/@sentry/utils/cjs/baggage.js");
var url = __webpack_require__(/*! ./url.js */ "./node_modules/@sentry/utils/cjs/url.js");
var userIntegrations = __webpack_require__(/*! ./userIntegrations.js */ "./node_modules/@sentry/utils/cjs/userIntegrations.js");
var escapeStringForRegex = __webpack_require__(/*! ./vendor/escapeStringForRegex.js */ "./node_modules/@sentry/utils/cjs/vendor/escapeStringForRegex.js");
var supportsHistory = __webpack_require__(/*! ./vendor/supportsHistory.js */ "./node_modules/@sentry/utils/cjs/vendor/supportsHistory.js");
exports.getDomElement = browser.getDomElement;
exports.getLocationHref = browser.getLocationHref;
exports.htmlTreeAsString = browser.htmlTreeAsString;
exports.dsnFromString = dsn.dsnFromString;
exports.dsnToString = dsn.dsnToString;
exports.makeDsn = dsn.makeDsn;
exports.SentryError = error.SentryError;
exports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;
exports.getGlobalObject = worldwide.getGlobalObject;
exports.getGlobalSingleton = worldwide.getGlobalSingleton;
exports.SENTRY_XHR_DATA_KEY = instrument.SENTRY_XHR_DATA_KEY;
exports.addInstrumentationHandler = instrument.addInstrumentationHandler;
exports.parseFetchArgs = instrument.parseFetchArgs;
exports.isDOMError = is.isDOMError;
exports.isDOMException = is.isDOMException;
exports.isElement = is.isElement;
exports.isError = is.isError;
exports.isErrorEvent = is.isErrorEvent;
exports.isEvent = is.isEvent;
exports.isInstanceOf = is.isInstanceOf;
exports.isNaN = is.isNaN;
exports.isPlainObject = is.isPlainObject;
exports.isPrimitive = is.isPrimitive;
exports.isRegExp = is.isRegExp;
exports.isString = is.isString;
exports.isSyntheticEvent = is.isSyntheticEvent;
exports.isThenable = is.isThenable;
exports.CONSOLE_LEVELS = logger.CONSOLE_LEVELS;
exports.consoleSandbox = logger.consoleSandbox;
Object.defineProperty(exports, "logger", ({
  enumerable: true,
  get: function get() {
    return logger.logger;
  }
}));
exports.memoBuilder = memo.memoBuilder;
exports.addContextToFrame = misc.addContextToFrame;
exports.addExceptionMechanism = misc.addExceptionMechanism;
exports.addExceptionTypeValue = misc.addExceptionTypeValue;
exports.arrayify = misc.arrayify;
exports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;
exports.getEventDescription = misc.getEventDescription;
exports.parseSemver = misc.parseSemver;
exports.uuid4 = misc.uuid4;
exports.dynamicRequire = node.dynamicRequire;
exports.isNodeEnv = node.isNodeEnv;
exports.loadModule = node.loadModule;
exports.normalize = normalize.normalize;
exports.normalizeToSize = normalize.normalizeToSize;
exports.walk = normalize.walk;
exports.addNonEnumerableProperty = object.addNonEnumerableProperty;
exports.convertToPlainObject = object.convertToPlainObject;
exports.dropUndefinedKeys = object.dropUndefinedKeys;
exports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;
exports.fill = object.fill;
exports.getOriginalFunction = object.getOriginalFunction;
exports.markFunctionWrapped = object.markFunctionWrapped;
exports.objectify = object.objectify;
exports.urlEncode = object.urlEncode;
exports.basename = path.basename;
exports.dirname = path.dirname;
exports.isAbsolute = path.isAbsolute;
exports.join = path.join;
exports.normalizePath = path.normalizePath;
exports.relative = path.relative;
exports.resolve = path.resolve;
exports.makePromiseBuffer = promisebuffer.makePromiseBuffer;
exports.addRequestDataToEvent = requestdata.addRequestDataToEvent;
exports.addRequestDataToTransaction = requestdata.addRequestDataToTransaction;
exports.extractPathForTransaction = requestdata.extractPathForTransaction;
exports.extractRequestData = requestdata.extractRequestData;
exports.severityFromString = severity.severityFromString;
exports.severityLevelFromString = severity.severityLevelFromString;
exports.validSeverityLevels = severity.validSeverityLevels;
exports.createStackParser = stacktrace.createStackParser;
exports.getFunctionName = stacktrace.getFunctionName;
exports.nodeStackLineParser = stacktrace.nodeStackLineParser;
exports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;
exports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;
exports.isMatchingPattern = string.isMatchingPattern;
exports.safeJoin = string.safeJoin;
exports.snipLine = string.snipLine;
exports.stringMatchesSomePattern = string.stringMatchesSomePattern;
exports.truncate = string.truncate;
exports.isNativeFetch = supports.isNativeFetch;
exports.supportsDOMError = supports.supportsDOMError;
exports.supportsDOMException = supports.supportsDOMException;
exports.supportsErrorEvent = supports.supportsErrorEvent;
exports.supportsFetch = supports.supportsFetch;
exports.supportsNativeFetch = supports.supportsNativeFetch;
exports.supportsReferrerPolicy = supports.supportsReferrerPolicy;
exports.supportsReportingObserver = supports.supportsReportingObserver;
exports.SyncPromise = syncpromise.SyncPromise;
exports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;
exports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;
Object.defineProperty(exports, "_browserPerformanceTimeOriginMode", ({
  enumerable: true,
  get: function get() {
    return time._browserPerformanceTimeOriginMode;
  }
}));
exports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;
exports.dateTimestampInSeconds = time.dateTimestampInSeconds;
exports.timestampInSeconds = time.timestampInSeconds;
exports.timestampWithMs = time.timestampWithMs;
exports.usingPerformanceAPI = time.usingPerformanceAPI;
exports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;
exports.extractTraceparentData = tracing.extractTraceparentData;
exports.getSDKSource = env.getSDKSource;
exports.isBrowserBundle = env.isBrowserBundle;
exports.addItemToEnvelope = envelope.addItemToEnvelope;
exports.createAttachmentEnvelopeItem = envelope.createAttachmentEnvelopeItem;
exports.createEnvelope = envelope.createEnvelope;
exports.createEventEnvelopeHeaders = envelope.createEventEnvelopeHeaders;
exports.envelopeContainsItemType = envelope.envelopeContainsItemType;
exports.envelopeItemTypeToDataCategory = envelope.envelopeItemTypeToDataCategory;
exports.forEachEnvelopeItem = envelope.forEachEnvelopeItem;
exports.getSdkMetadataForEnvelopeHeader = envelope.getSdkMetadataForEnvelopeHeader;
exports.parseEnvelope = envelope.parseEnvelope;
exports.serializeEnvelope = envelope.serializeEnvelope;
exports.createClientReportEnvelope = clientreport.createClientReportEnvelope;
exports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;
exports.disabledUntil = ratelimit.disabledUntil;
exports.isRateLimited = ratelimit.isRateLimited;
exports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;
exports.updateRateLimits = ratelimit.updateRateLimits;
exports.BAGGAGE_HEADER_NAME = baggage.BAGGAGE_HEADER_NAME;
exports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;
exports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;
exports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;
exports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;
exports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;
exports.getNumberOfUrlSegments = url.getNumberOfUrlSegments;
exports.getSanitizedUrlString = url.getSanitizedUrlString;
exports.parseUrl = url.parseUrl;
exports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;
exports.addOrUpdateIntegration = userIntegrations.addOrUpdateIntegration;
exports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;
exports.supportsHistory = supportsHistory.supportsHistory;

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/instrument.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/instrument.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar logger = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/utils/cjs/logger.js\");\nvar object = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/utils/cjs/object.js\");\nvar stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"./node_modules/@sentry/utils/cjs/stacktrace.js\");\nvar supports = __webpack_require__(/*! ./supports.js */ \"./node_modules/@sentry/utils/cjs/supports.js\");\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\nvar supportsHistory = __webpack_require__(/*! ./vendor/supportsHistory.js */ \"./node_modules/@sentry/utils/cjs/vendor/supportsHistory.js\");\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = worldwide.getGlobalObject();\nvar SENTRY_XHR_DATA_KEY = '__sentry_xhr_v2__';\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nvar handlers = {};\nvar instrumented = {};\n\n/** Instruments given API */\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n  instrumented[type] = true;\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addInstrumentationHandler(type, callback) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type, data) {\n  if (!type || !handlers[type]) {\n    return;\n  }\n  var _iterator = _createForOfIteratorHelper(handlers[type] || []),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var handler = _step.value;\n      try {\n        handler(data);\n      } catch (e) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.logger.error(\"Error while triggering instrumentation handler.\\nType: \".concat(type, \"\\nName: \").concat(stacktrace.getFunctionName(handler), \"\\nError:\"), e);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole() {\n  if (!('console' in WINDOW)) {\n    return;\n  }\n  logger.CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in WINDOW.console)) {\n      return;\n    }\n    object.fill(WINDOW.console, level, function (originalConsoleMethod) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        triggerHandlers('console', {\n          args: args,\n          level: level\n        });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(WINDOW.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch() {\n  if (!supports.supportsNativeFetch()) {\n    return;\n  }\n  object.fill(WINDOW, 'fetch', function (originalFetch) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var _parseFetchArgs = parseFetchArgs(args),\n        method = _parseFetchArgs.method,\n        url = _parseFetchArgs.url;\n      var handlerData = {\n        args: args,\n        fetchData: {\n          method: method,\n          url: url\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', _objectSpread({}, handlerData));\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(WINDOW, args).then(function (response) {\n        triggerHandlers('fetch', _objectSpread(_objectSpread({}, handlerData), {}, {\n          endTimestamp: Date.now(),\n          response: response\n        }));\n        return response;\n      }, function (error) {\n        triggerHandlers('fetch', _objectSpread(_objectSpread({}, handlerData), {}, {\n          endTimestamp: Date.now(),\n          error: error\n        }));\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\nfunction hasProp(obj, prop) {\n  return !!obj && _typeof(obj) === 'object' && !!obj[prop];\n}\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n  if (!resource) {\n    return '';\n  }\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n  if (resource.toString) {\n    return resource.toString();\n  }\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return {\n      method: 'GET',\n      url: ''\n    };\n  }\n  if (fetchArgs.length === 2) {\n    var _fetchArgs = _slicedToArray(fetchArgs, 2),\n      url = _fetchArgs[0],\n      options = _fetchArgs[1];\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET'\n    };\n  }\n  var arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET'\n  };\n}\n\n/** JSDoc */\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in WINDOW)) {\n    return;\n  }\n  var xhrproto = XMLHttpRequest.prototype;\n  object.fill(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      var _this = this;\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      var url = args[1];\n      var xhrInfo = this[SENTRY_XHR_DATA_KEY] = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: is.isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n        request_headers: {}\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (is.isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n      var onreadystatechangeHandler = function onreadystatechangeHandler() {\n        // For whatever reason, this is not the same instance here as from the outer method\n        var xhrInfo = _this[SENTRY_XHR_DATA_KEY];\n        if (!xhrInfo) {\n          return;\n        }\n        if (_this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = _this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n          triggerHandlers('xhr', {\n            args: args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: _this\n          });\n        }\n      };\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        object.fill(this, 'onreadystatechange', function (original) {\n          return function () {\n            onreadystatechangeHandler();\n            for (var _len4 = arguments.length, readyStateArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              readyStateArgs[_key4] = arguments[_key4];\n            }\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      object.fill(this, 'setRequestHeader', function (original) {\n        return function () {\n          for (var _len5 = arguments.length, setRequestHeaderArgs = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            setRequestHeaderArgs[_key5] = arguments[_key5];\n          }\n          var header = setRequestHeaderArgs[0],\n            value = setRequestHeaderArgs[1];\n          var xhrInfo = this[SENTRY_XHR_DATA_KEY];\n          if (xhrInfo) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n      return originalOpen.apply(this, args);\n    };\n  });\n  object.fill(xhrproto, 'send', function (originalSend) {\n    return function () {\n      var sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      if (sentryXhrData && args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n      triggerHandlers('xhr', {\n        args: args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\nvar lastHref;\n\n/** JSDoc */\nfunction instrumentHistory() {\n  if (!supportsHistory.supportsHistory()) {\n    return;\n  }\n  var oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function () {\n    var to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    var from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from: from,\n      to: to\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      var url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        var from = lastHref;\n        var to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from: from,\n          to: to\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n  object.fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  object.fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\nvar debounceDuration = 1000;\nvar debounceTimerID;\nvar lastCapturedEvent;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous, current) {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event) {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n  try {\n    var target = event.target;\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler) {\n  var globalListener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (event) {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n    var name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(function () {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\n/** JSDoc */\nfunction instrumentDOM() {\n  if (!('document' in WINDOW)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  var triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach(function (target) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var proto = WINDOW[target] && WINDOW[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    object.fill(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var _handlers = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = _handlers[type] = _handlers[type] || {\n              refCount: 0\n            };\n            if (!handlerForType.handler) {\n              var handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n    object.fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var _handlers2 = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = _handlers2[type];\n            if (handlerForType) {\n              handlerForType.refCount--;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete _handlers2[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(_handlers2).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\nvar _oldOnErrorHandler = null;\n/** JSDoc */\nfunction instrumentError() {\n  _oldOnErrorHandler = WINDOW.onerror;\n  WINDOW.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column: column,\n      error: error,\n      line: line,\n      msg: msg,\n      url: url\n    });\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n  WINDOW.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\nvar _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n  WINDOW.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n    return true;\n  };\n  WINDOW.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\nexports.SENTRY_XHR_DATA_KEY = SENTRY_XHR_DATA_KEY;\nexports.addInstrumentationHandler = addInstrumentationHandler;\nexports.parseFetchArgs = parseFetchArgs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/instrument.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/is.js":
/*!**********************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/is.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nvar objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === \"[object \".concat(className, \"]\");\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || _typeof(wat) !== 'object' && typeof wat !== 'function';\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isNaN(wat) {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\nexports.isDOMError = isDOMError;\nexports.isDOMException = isDOMException;\nexports.isElement = isElement;\nexports.isError = isError;\nexports.isErrorEvent = isErrorEvent;\nexports.isEvent = isEvent;\nexports.isInstanceOf = isInstanceOf;\nexports.isNaN = isNaN;\nexports.isPlainObject = isPlainObject;\nexports.isPrimitive = isPrimitive;\nexports.isRegExp = isRegExp;\nexports.isString = isString;\nexports.isSyntheticEvent = isSyntheticEvent;\nexports.isThenable = isThenable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/is.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/logger.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\nvar CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return callback();\n  }\n  var originalConsole = worldwide.GLOBAL_OBJ.console;\n  var wrappedLevels = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(function (level) {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalWrappedFunc;\n    }\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n      originalConsole[level] = wrappedLevels[level];\n    });\n  }\n}\nfunction makeLogger() {\n  var enabled = false;\n  var logger = {\n    enable: function enable() {\n      enabled = true;\n    },\n    disable: function disable() {\n      enabled = false;\n    }\n  };\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    CONSOLE_LEVELS.forEach(function (name) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (enabled) {\n          consoleSandbox(function () {\n            var _worldwide$GLOBAL_OBJ;\n            (_worldwide$GLOBAL_OBJ = worldwide.GLOBAL_OBJ.console)[name].apply(_worldwide$GLOBAL_OBJ, [\"\".concat(PREFIX, \"[\").concat(name, \"]:\")].concat(args));\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        return undefined;\n      };\n    });\n  }\n  return logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nexports.logger = void 0;\nif (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n  exports.logger = worldwide.getGlobalSingleton('logger', makeLogger);\n} else {\n  exports.logger = makeLogger();\n}\nexports.CONSOLE_LEVELS = CONSOLE_LEVELS;\nexports.consoleSandbox = consoleSandbox;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvbG9nZ2VyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBO0FBQ0EsSUFBQUEsTUFBQTtBQUVBLElBQUFDLGNBQUE7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUMsZUFBQUMsUUFBQTtFQUNBLG1CQUFBQyxTQUFBLENBQUFDLFVBQUE7SUFDQSxPQUFBRixRQUFBO0VBQ0E7RUFFQSxJQUFBRyxlQUFBLEdBQUFGLFNBQUEsQ0FBQUMsVUFBQSxDQUFBRSxPQUFBO0VBQ0EsSUFBQUMsYUFBQTs7RUFFQTtFQUNBUCxjQUFBLENBQUFRLE9BQUEsV0FBQUMsS0FBQTtJQUNBO0lBQ0EsSUFBQUMsbUJBQUEsR0FDQUwsZUFBQSxDQUFBSSxLQUFBLEtBQUFKLGVBQUEsQ0FBQUksS0FBQSxFQUFBRSxtQkFBQTtJQUNBLElBQUFGLEtBQUEsSUFBQUosZUFBQSxJQUFBSyxtQkFBQTtNQUNBSCxhQUFBLENBQUFFLEtBQUEsSUFBQUosZUFBQSxDQUFBSSxLQUFBO01BQ0FKLGVBQUEsQ0FBQUksS0FBQSxJQUFBQyxtQkFBQTtJQUNBO0VBQ0E7RUFFQTtJQUNBLE9BQUFSLFFBQUE7RUFDQTtJQUNBO0lBQ0FVLE1BQUEsQ0FBQUMsSUFBQSxDQUFBTixhQUFBLEVBQUFDLE9BQUEsV0FBQUMsS0FBQTtNQUNBSixlQUFBLENBQUFJLEtBQUEsSUFBQUYsYUFBQSxDQUFBRSxLQUFBO0lBQ0E7RUFDQTtBQUNBO0FBRUEsU0FBQUssV0FBQTtFQUNBLElBQUFDLE9BQUE7RUFDQSxJQUFBQyxNQUFBO0lBQ0FDLE1BQUEsV0FBQUEsT0FBQTtNQUNBRixPQUFBO0lBQ0E7SUFDQUcsT0FBQSxXQUFBQSxRQUFBO01BQ0FILE9BQUE7SUFDQTtFQUNBO0VBRUEsV0FBQUksZ0JBQUEsb0JBQUFBLGdCQUFBO0lBQ0FuQixjQUFBLENBQUFRLE9BQUEsV0FBQVksSUFBQTtNQUNBO01BQ0FKLE1BQUEsQ0FBQUksSUFBQTtRQUFBLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFDLElBQUEsT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7VUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtRQUFBO1FBQ0EsSUFBQVgsT0FBQTtVQUNBZCxjQUFBO1lBQUEsSUFBQTBCLHFCQUFBO1lBQ0EsQ0FBQUEscUJBQUEsR0FBQXhCLFNBQUEsQ0FBQUMsVUFBQSxDQUFBRSxPQUFBLEVBQUFjLElBQUEsRUFBQVEsS0FBQSxDQUFBRCxxQkFBQSxNQUFBRSxNQUFBLENBQUE5QixNQUFBLE9BQUE4QixNQUFBLENBQUFULElBQUEsU0FBQVMsTUFBQSxDQUFBTCxJQUFBO1VBQ0E7UUFDQTtNQUNBO0lBQ0E7RUFDQTtJQUNBeEIsY0FBQSxDQUFBUSxPQUFBLFdBQUFZLElBQUE7TUFDQUosTUFBQSxDQUFBSSxJQUFBO1FBQUEsT0FBQVUsU0FBQTtNQUFBO0lBQ0E7RUFDQTtFQUVBLE9BQUFkLE1BQUE7QUFDQTs7QUFFQTtBQUNBZSxjQUFBO0FBQ0EsV0FBQVosZ0JBQUEsb0JBQUFBLGdCQUFBO0VBQ0FZLGNBQUEsR0FBQTVCLFNBQUEsQ0FBQTZCLGtCQUFBLFdBQUFsQixVQUFBO0FBQ0E7RUFDQWlCLGNBQUEsR0FBQWpCLFVBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9sb2dnZXIudHM/ZjBiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFdyYXBwZWRGdW5jdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBnZXRHbG9iYWxTaW5nbGV0b24sIEdMT0JBTF9PQkogfSBmcm9tICcuL3dvcmxkd2lkZSc7XG5cbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xuY29uc3QgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcblxuZXhwb3J0IGNvbnN0IENPTlNPTEVfTEVWRUxTID0gWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnbG9nJywgJ2Fzc2VydCcsICd0cmFjZSddIGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgQ29uc29sZUxldmVsID0gKHR5cGVvZiBDT05TT0xFX0xFVkVMUylbbnVtYmVyXTtcblxudHlwZSBMb2dnZXJNZXRob2QgPSAoLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkO1xudHlwZSBMb2dnZXJDb25zb2xlTWV0aG9kcyA9IFJlY29yZDwodHlwZW9mIENPTlNPTEVfTEVWRUxTKVtudW1iZXJdLCBMb2dnZXJNZXRob2Q+O1xuXG4vKiogSlNEb2MgKi9cbmludGVyZmFjZSBMb2dnZXIgZXh0ZW5kcyBMb2dnZXJDb25zb2xlTWV0aG9kcyB7XG4gIGRpc2FibGUoKTogdm9pZDtcbiAgZW5hYmxlKCk6IHZvaWQ7XG59XG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZSBzZW50cnkgY29uc29sZSBpbnN0cnVtZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcnVuIGFnYWluc3QgdGhlIG9yaWdpbmFsIGBjb25zb2xlYCBtZXNzYWdlc1xuICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlU2FuZGJveDxUPihjYWxsYmFjazogKCkgPT4gVCk6IFQge1xuICBpZiAoISgnY29uc29sZScgaW4gR0xPQkFMX09CSikpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IG9yaWdpbmFsQ29uc29sZSA9IEdMT0JBTF9PQkouY29uc29sZSBhcyBDb25zb2xlICYgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIGNvbnN0IHdyYXBwZWRMZXZlbHM6IFBhcnRpYWw8TG9nZ2VyQ29uc29sZU1ldGhvZHM+ID0ge307XG5cbiAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgLy8gVE9ETyh2Nyk6IFJlbW92ZSB0aGlzIGNoZWNrIGFzIGl0J3Mgb25seSBuZWVkZWQgZm9yIE5vZGUgNlxuICAgIGNvbnN0IG9yaWdpbmFsV3JhcHBlZEZ1bmMgPVxuICAgICAgb3JpZ2luYWxDb25zb2xlW2xldmVsXSAmJiAob3JpZ2luYWxDb25zb2xlW2xldmVsXSBhcyBXcmFwcGVkRnVuY3Rpb24pLl9fc2VudHJ5X29yaWdpbmFsX187XG4gICAgaWYgKGxldmVsIGluIG9yaWdpbmFsQ29uc29sZSAmJiBvcmlnaW5hbFdyYXBwZWRGdW5jKSB7XG4gICAgICB3cmFwcGVkTGV2ZWxzW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZVtsZXZlbF0gYXMgTG9nZ2VyQ29uc29sZU1ldGhvZHNbdHlwZW9mIGxldmVsXTtcbiAgICAgIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0gPSBvcmlnaW5hbFdyYXBwZWRGdW5jIGFzIENvbnNvbGVbdHlwZW9mIGxldmVsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gUmV2ZXJ0IHJlc3RvcmF0aW9uIHRvIHdyYXBwZWQgc3RhdGVcbiAgICBPYmplY3Qua2V5cyh3cmFwcGVkTGV2ZWxzKS5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIG9yaWdpbmFsQ29uc29sZVtsZXZlbF0gPSB3cmFwcGVkTGV2ZWxzW2xldmVsIGFzICh0eXBlb2YgQ09OU09MRV9MRVZFTFMpW251bWJlcl1dO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VMb2dnZXIoKTogTG9nZ2VyIHtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgY29uc3QgbG9nZ2VyOiBQYXJ0aWFsPExvZ2dlcj4gPSB7XG4gICAgZW5hYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICB9LFxuICB9O1xuXG4gIGlmIChfX0RFQlVHX0JVSUxEX18pIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIGxvZ2dlcltuYW1lXSA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgICAgIEdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIGFzIExvZ2dlcjtcbn1cblxuLy8gRW5zdXJlIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSBsb2dnZXIgaW5zdGFuY2UsIGV2ZW4gaWYgbXVsdGlwbGUgdmVyc2lvbnMgb2YgQHNlbnRyeS91dGlscyBhcmUgYmVpbmcgdXNlZFxubGV0IGxvZ2dlcjogTG9nZ2VyO1xuaWYgKF9fREVCVUdfQlVJTERfXykge1xuICBsb2dnZXIgPSBnZXRHbG9iYWxTaW5nbGV0b24oJ2xvZ2dlcicsIG1ha2VMb2dnZXIpO1xufSBlbHNlIHtcbiAgbG9nZ2VyID0gbWFrZUxvZ2dlcigpO1xufVxuXG5leHBvcnQgeyBsb2dnZXIgfTtcbiJdLCJuYW1lcyI6WyJQUkVGSVgiLCJDT05TT0xFX0xFVkVMUyIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJ3b3JsZHdpZGUiLCJHTE9CQUxfT0JKIiwib3JpZ2luYWxDb25zb2xlIiwiY29uc29sZSIsIndyYXBwZWRMZXZlbHMiLCJmb3JFYWNoIiwibGV2ZWwiLCJvcmlnaW5hbFdyYXBwZWRGdW5jIiwiX19zZW50cnlfb3JpZ2luYWxfXyIsIk9iamVjdCIsImtleXMiLCJtYWtlTG9nZ2VyIiwiZW5hYmxlZCIsImxvZ2dlciIsImVuYWJsZSIsImRpc2FibGUiLCJfX1NFTlRSWV9ERUJVR19fIiwibmFtZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiX3dvcmxkd2lkZSRHTE9CQUxfT0JKIiwiYXBwbHkiLCJjb25jYXQiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwiZ2V0R2xvYmFsU2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/logger.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/memo.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/memo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.weak-set.js */ \"./node_modules/core-js/modules/es.weak-set.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder() {\n  var hasWeakSet = typeof WeakSet === 'function';\n  var inner = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj) {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var i = 0; i < inner.length; i++) {\n      var value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n  function unmemoize(obj) {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (var i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\nexports.memoBuilder = memoBuilder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvbWVtby5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFTQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxZQUFBO0VBQ0EsSUFBQUMsVUFBQSxVQUFBQyxPQUFBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBRixVQUFBLE9BQUFDLE9BQUE7RUFDQSxTQUFBRSxRQUFBQyxHQUFBO0lBQ0EsSUFBQUosVUFBQTtNQUNBLElBQUFFLEtBQUEsQ0FBQUcsR0FBQSxDQUFBRCxHQUFBO1FBQ0E7TUFDQTtNQUNBRixLQUFBLENBQUFJLEdBQUEsQ0FBQUYsR0FBQTtNQUNBO0lBQ0E7SUFDQTtJQUNBLFNBQUFHLENBQUEsTUFBQUEsQ0FBQSxHQUFBTCxLQUFBLENBQUFNLE1BQUEsRUFBQUQsQ0FBQTtNQUNBLElBQUFFLEtBQUEsR0FBQVAsS0FBQSxDQUFBSyxDQUFBO01BQ0EsSUFBQUUsS0FBQSxLQUFBTCxHQUFBO1FBQ0E7TUFDQTtJQUNBO0lBQ0FGLEtBQUEsQ0FBQVEsSUFBQSxDQUFBTixHQUFBO0lBQ0E7RUFDQTtFQUVBLFNBQUFPLFVBQUFQLEdBQUE7SUFDQSxJQUFBSixVQUFBO01BQ0FFLEtBQUEsQ0FBQVUsTUFBQSxDQUFBUixHQUFBO0lBQ0E7TUFDQSxTQUFBRyxDQUFBLE1BQUFBLENBQUEsR0FBQUwsS0FBQSxDQUFBTSxNQUFBLEVBQUFELENBQUE7UUFDQSxJQUFBTCxLQUFBLENBQUFLLENBQUEsTUFBQUgsR0FBQTtVQUNBRixLQUFBLENBQUFXLE1BQUEsQ0FBQU4sQ0FBQTtVQUNBO1FBQ0E7TUFDQTtJQUNBO0VBQ0E7RUFDQSxRQUFBSixPQUFBLEVBQUFRLFNBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9tZW1vLnRzP2EyNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbmV4cG9ydCB0eXBlIE1lbW9GdW5jID0gW1xuICAvLyBtZW1vaXplXG4gIChvYmo6IGFueSkgPT4gYm9vbGVhbixcbiAgLy8gdW5tZW1vaXplXG4gIChvYmo6IGFueSkgPT4gdm9pZCxcbl07XG5cbi8qKlxuICogSGVscGVyIHRvIGRlY3ljbGUganNvbiBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vQnVpbGRlcigpOiBNZW1vRnVuYyB7XG4gIGNvbnN0IGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgY29uc3QgaW5uZXI6IGFueSA9IGhhc1dlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogW107XG4gIGZ1bmN0aW9uIG1lbW9pemUob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoaGFzV2Vha1NldCkge1xuICAgICAgaWYgKGlubmVyLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaW5uZXIuYWRkKG9iaik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5uZXJbaV07XG4gICAgICBpZiAodmFsdWUgPT09IG9iaikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5uZXIucHVzaChvYmopO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVubWVtb2l6ZShvYmo6IGFueSk6IHZvaWQge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIGlubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21lbW9pemUsIHVubWVtb2l6ZV07XG59XG4iXSwibmFtZXMiOlsibWVtb0J1aWxkZXIiLCJoYXNXZWFrU2V0IiwiV2Vha1NldCIsImlubmVyIiwibWVtb2l6ZSIsIm9iaiIsImhhcyIsImFkZCIsImkiLCJsZW5ndGgiLCJ2YWx1ZSIsInB1c2giLCJ1bm1lbW9pemUiLCJkZWxldGUiLCJzcGxpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/memo.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/misc.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/misc.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array-buffer.slice.js */ \"./node_modules/core-js/modules/es.array-buffer.slice.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.uint8-array.js */ \"./node_modules/core-js/modules/es.typed-array.uint8-array.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.copy-within.js */ \"./node_modules/core-js/modules/es.typed-array.copy-within.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.every.js */ \"./node_modules/core-js/modules/es.typed-array.every.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.fill.js */ \"./node_modules/core-js/modules/es.typed-array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.filter.js */ \"./node_modules/core-js/modules/es.typed-array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find.js */ \"./node_modules/core-js/modules/es.typed-array.find.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find-index.js */ \"./node_modules/core-js/modules/es.typed-array.find-index.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.for-each.js */ \"./node_modules/core-js/modules/es.typed-array.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.includes.js */ \"./node_modules/core-js/modules/es.typed-array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.index-of.js */ \"./node_modules/core-js/modules/es.typed-array.index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.iterator.js */ \"./node_modules/core-js/modules/es.typed-array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.join.js */ \"./node_modules/core-js/modules/es.typed-array.join.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.last-index-of.js */ \"./node_modules/core-js/modules/es.typed-array.last-index-of.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.map.js */ \"./node_modules/core-js/modules/es.typed-array.map.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce.js */ \"./node_modules/core-js/modules/es.typed-array.reduce.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reduce-right.js */ \"./node_modules/core-js/modules/es.typed-array.reduce-right.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.reverse.js */ \"./node_modules/core-js/modules/es.typed-array.reverse.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.set.js */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.slice.js */ \"./node_modules/core-js/modules/es.typed-array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.some.js */ \"./node_modules/core-js/modules/es.typed-array.some.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.sort.js */ \"./node_modules/core-js/modules/es.typed-array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.subarray.js */ \"./node_modules/core-js/modules/es.typed-array.subarray.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-locale-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-locale-string.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.to-string.js */ \"./node_modules/core-js/modules/es.typed-array.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar object = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/utils/cjs/object.js\");\nvar string = __webpack_require__(/*! ./string.js */ \"./node_modules/@sentry/utils/cjs/string.js\");\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nfunction uuid4() {\n  var gbl = worldwide.GLOBAL_OBJ;\n  var crypto = gbl.crypto || gbl.msCrypto;\n  if (crypto && crypto.randomUUID) {\n    return crypto.randomUUID().replace(/-/g, '');\n  }\n  var getRandomByte = crypto && crypto.getRandomValues ? function () {\n    return crypto.getRandomValues(new Uint8Array(1))[0];\n  } : function () {\n    return Math.random() * 16;\n  };\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, function (c) {\n    return (\n      // eslint-disable-next-line no-bitwise\n      (c ^ (getRandomByte() & 15) >> c / 4).toString(16)\n    );\n  });\n}\nfunction getFirstException(event) {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  var message = event.message,\n    eventId = event.event_id;\n  if (message) {\n    return message;\n  }\n  var firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return \"\".concat(firstException.type, \": \").concat(firstException.value);\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  var exception = event.exception = event.exception || {};\n  var values = exception.values = exception.values || [];\n  var firstException = values[0] = values[0] || {};\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  var firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n  var defaultMechanism = {\n    type: 'generic',\n    handled: true\n  };\n  var currentMechanism = firstException.mechanism;\n  firstException.mechanism = _objectSpread(_objectSpread(_objectSpread({}, defaultMechanism), currentMechanism), newMechanism);\n  if (newMechanism && 'data' in newMechanism) {\n    var mergedData = _objectSpread(_objectSpread({}, currentMechanism && currentMechanism.data), newMechanism.data);\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nvar SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  var match = input.match(SEMVER_REGEXP) || [];\n  var major = parseInt(match[1], 10);\n  var minor = parseInt(match[2], 10);\n  var patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame) {\n  var linesOfContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n  var maxLines = lines.length;\n  var sourceLine = Math.max(Math.min(maxLines, frame.lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {\n    return string.snipLine(line, 0);\n  });\n  frame.context_line = string.snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {\n    return string.snipLine(line, 0);\n  });\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && exception.__sentry_captured__) {\n    return true;\n  }\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    object.addNonEnumerableProperty(exception, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nfunction arrayify(maybeArray) {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\nexports.addContextToFrame = addContextToFrame;\nexports.addExceptionMechanism = addExceptionMechanism;\nexports.addExceptionTypeValue = addExceptionTypeValue;\nexports.arrayify = arrayify;\nexports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;\nexports.getEventDescription = getEventDescription;\nexports.parseSemver = parseSemver;\nexports.uuid4 = uuid4;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/misc.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/node-stack-trace.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/node-stack-trace.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"./node_modules/core-js/modules/es.string.starts-with.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Node Stack line parser */\n// eslint-disable-next-line complexity\nfunction node(getModule) {\n  var FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  var FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return function (line) {\n    var lineMatch = line.match(FULL_MATCH);\n    if (lineMatch) {\n      var object;\n      var method;\n      var functionName;\n      var typeName;\n      var methodName;\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        var methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          var objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n      if (functionName === undefined) {\n        methodName = methodName || '<anonymous>';\n        functionName = typeName ? \"\".concat(typeName, \".\").concat(methodName) : methodName;\n      }\n      var filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      var isNative = lineMatch[5] === 'native';\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n      var isInternal = isNative || filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.includes(':\\\\') &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n\n      // in_app is all that's not an internal Node function or a module within node_modules\n      // note that isNative appears to return true even for node core libraries\n      // see https://github.com/getsentry/raven-node/issues/176\n\n      var in_app = !isInternal && filename !== undefined && !filename.includes('node_modules/');\n      return {\n        filename: filename,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: parseInt(lineMatch[3], 10) || undefined,\n        colno: parseInt(lineMatch[4], 10) || undefined,\n        in_app: in_app\n      };\n    }\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line\n      };\n    }\n    return undefined;\n  };\n}\nexports.node = node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/node-stack-trace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/node.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/node.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar env = __webpack_require__(/*! ./env.js */ \"./node_modules/@sentry/utils/cjs/env.js\");\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return !env.isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nfunction loadModule(moduleName) {\n  var mod;\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n  try {\n    var _dynamicRequire = dynamicRequire(module, 'process'),\n      cwd = _dynamicRequire.cwd;\n    mod = dynamicRequire(module, \"\".concat(cwd(), \"/node_modules/\").concat(moduleName));\n  } catch (e) {\n    // no-empty\n  }\n  return mod;\n}\nexports.dynamicRequire = dynamicRequire;\nexports.isNodeEnv = isNodeEnv;\nexports.loadModule = loadModule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvbm9kZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxVQUFBO0VBQ0E7RUFDQTtFQUNBLE9BQ0EsQ0FBQUMsR0FBQSxDQUFBQyxlQUFBLE1BQ0FDLE1BQUEsQ0FBQUMsU0FBQSxDQUFBQyxRQUFBLENBQUFDLElBQUEsUUFBQUMsT0FBQSxtQkFBQUEsT0FBQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLGVBQUFDLEdBQUEsRUFBQUMsT0FBQTtFQUNBO0VBQ0EsT0FBQUQsR0FBQSxDQUFBRSxPQUFBLENBQUFELE9BQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFFLFdBQUFDLFVBQUE7RUFDQSxJQUFBSixHQUFBO0VBRUE7SUFDQUEsR0FBQSxHQUFBRCxjQUFBLENBQUFNLE1BQUEsRUFBQUQsVUFBQTtFQUNBLFNBQUFFLENBQUE7SUFDQTtFQUFBO0VBR0E7SUFDQSxJQUFBQyxlQUFBLEdBQUFSLGNBQUEsQ0FBQU0sTUFBQTtNQUFBRyxHQUFBLEdBQUFELGVBQUEsQ0FBQUMsR0FBQTtJQUNBUixHQUFBLEdBQUFELGNBQUEsQ0FBQU0sTUFBQSxLQUFBSSxNQUFBLENBQUFELEdBQUEsc0JBQUFDLE1BQUEsQ0FBQUwsVUFBQTtFQUNBLFNBQUFFLENBQUE7SUFDQTtFQUFBO0VBR0EsT0FBQU4sR0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vc3JjL25vZGUudHM/ODg1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE5PVEU6IEluIG9yZGVyIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcywgaWYgeW91IGFkZCBhIGZ1bmN0aW9uIHRvIHRoaXMgbW9kdWxlIGFuZCBpdCBuZWVkcyB0byBwcmludCBzb21ldGhpbmcsXG4gKiB5b3UgbXVzdCBlaXRoZXIgYSkgdXNlIGBjb25zb2xlLmxvZ2AgcmF0aGVyIHRoYW4gdGhlIGxvZ2dlciwgb3IgYikgcHV0IHlvdXIgZnVuY3Rpb24gZWxzZXdoZXJlLlxuICovXG5cbmltcG9ydCB7IGlzQnJvd3NlckJ1bmRsZSB9IGZyb20gJy4vZW52JztcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiB0aGUgTm9kZS5qcyBvciBCcm93c2VyIGVudmlyb25tZW50XG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIGdpdmVuIHF1ZXN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVFbnYoKTogYm9vbGVhbiB7XG4gIC8vIGV4cGxpY2l0bHkgY2hlY2sgZm9yIGJyb3dzZXIgYnVuZGxlcyBhcyB0aG9zZSBjYW4gYmUgb3B0aW1pemVkIHN0YXRpY2FsbHlcbiAgLy8gYnkgdGVyc2VyL3JvbGx1cC5cbiAgcmV0dXJuIChcbiAgICAhaXNCcm93c2VyQnVuZGxlKCkgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSdcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXF1aXJlcyBhIG1vZHVsZSB3aGljaCBpcyBwcm90ZWN0ZWQgYWdhaW5zdCBidW5kbGVyIG1pbmlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdCBUaGUgbW9kdWxlIHBhdGggdG8gcmVzb2x2ZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGR5bmFtaWNSZXF1aXJlKG1vZDogYW55LCByZXF1ZXN0OiBzdHJpbmcpOiBhbnkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gIHJldHVybiBtb2QucmVxdWlyZShyZXF1ZXN0KTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZm9yIGR5bmFtaWNhbGx5IGxvYWRpbmcgbW9kdWxlIHRoYXQgc2hvdWxkIHdvcmsgd2l0aCBsaW5rZWQgZGVwZW5kZW5jaWVzLlxuICogVGhlIHByb2JsZW0gaXMgdGhhdCB3ZSBfc2hvdWxkXyBiZSB1c2luZyBgcmVxdWlyZShyZXF1aXJlLnJlc29sdmUobW9kdWxlTmFtZSwgeyBwYXRoczogW2N3ZCgpXSB9KSlgXG4gKiBIb3dldmVyIGl0J3MgX25vdCBwb3NzaWJsZV8gdG8gZG8gdGhhdCB3aXRoIFdlYnBhY2ssIGFzIGl0IGhhcyB0byBrbm93IGFsbCB0aGUgZGVwZW5kZW5jaWVzIGR1cmluZ1xuICogYnVpbGQgdGltZS4gYHJlcXVpcmUucmVzb2x2ZWAgaXMgYWxzbyBub3QgYXZhaWxhYmxlIGluIGFueSBvdGhlciB3YXksIHNvIHdlIGNhbm5vdCBjcmVhdGUsXG4gKiBhIGZha2UgaGVscGVyIGxpa2Ugd2UgZG8gd2l0aCBgZHluYW1pY1JlcXVpcmVgLlxuICpcbiAqIFdlIGFsd2F5cyBwcmVmZXIgdG8gdXNlIGxvY2FsIHBhY2thZ2UsIHRodXMgdGhlIHZhbHVlIGlzIG5vdCByZXR1cm5lZCBlYXJseSBmcm9tIGVhY2ggYHRyeS9jYXRjaGAgYmxvY2suXG4gKiBUaGF0IGlzIHRvIG1pbWljIHRoZSBiZWhhdmlvciBvZiBgcmVxdWlyZS5yZXNvbHZlYCBleGFjdGx5LlxuICpcbiAqIEBwYXJhbSBtb2R1bGVOYW1lIG1vZHVsZSBuYW1lIHRvIHJlcXVpcmVcbiAqIEByZXR1cm5zIHBvc3NpYmx5IHJlcXVpcmVkIG1vZHVsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1vZHVsZTxUPihtb2R1bGVOYW1lOiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkIHtcbiAgbGV0IG1vZDogVCB8IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIG1vZCA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgbW9kdWxlTmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBuby1lbXB0eVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGN3ZCB9ID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCAncHJvY2VzcycpO1xuICAgIG1vZCA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgYCR7Y3dkKCl9L25vZGVfbW9kdWxlcy8ke21vZHVsZU5hbWV9YCkgYXMgVDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuIl0sIm5hbWVzIjpbImlzTm9kZUVudiIsImVudiIsImlzQnJvd3NlckJ1bmRsZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJyZXF1aXJlIiwibG9hZE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJlIiwiX2R5bmFtaWNSZXF1aXJlIiwiY3dkIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/node.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/normalize.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/normalize.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"./node_modules/core-js/modules/es.string.starts-with.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/web.url.to-json.js */ \"./node_modules/core-js/modules/web.url.to-json.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar memo = __webpack_require__(/*! ./memo.js */ \"./node_modules/@sentry/utils/cjs/memo.js\");\nvar object = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/utils/cjs/object.js\");\nvar stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"./node_modules/@sentry/utils/cjs/stacktrace.js\");\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var maxProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +Infinity;\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: \"**non-serializable** (\".concat(err, \")\")\n    };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var maxSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100 * 1024;\n  var normalized = normalize(object, depth);\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return normalized;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(key, value) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +Infinity;\n  var maxProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : +Infinity;\n  var memo$1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : memo.memoBuilder();\n  var _memo$ = _slicedToArray(memo$1, 2),\n    memoize = _memo$[0],\n    unmemoize = _memo$[1];\n\n  // Get the simple cases out of the way first\n  if (value == null ||\n  // this matches null and undefined -> eqeq not eqeqeq\n  ['number', 'boolean', 'string'].includes(_typeof(value)) && !is.isNaN(value)) {\n    return value;\n  }\n  var stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if (value['__sentry_skip_normalization__']) {\n    return value;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  var remainingDepth = typeof value['__sentry_override_normalization_depth__'] === 'number' ? value['__sentry_override_normalization_depth__'] : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  var valueWithToJSON = value;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      var jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo$1);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  var normalized = Array.isArray(value) ? [] : {};\n  var numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  var visitable = object.convertToPlainObject(value);\n  for (var visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    var visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo$1);\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(key,\n// this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && _typeof(value) === 'object' && value._events) {\n      return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof __webpack_require__.g !== 'undefined' && value === __webpack_require__.g) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (is.isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n    if (typeof value === 'function') {\n      return \"[Function: \".concat(stacktrace.getFunctionName(value), \"]\");\n    }\n    if (_typeof(value) === 'symbol') {\n      return \"[\".concat(String(value), \"]\");\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return \"[BigInt: \".concat(String(value), \"]\");\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    var objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return \"[HTMLElement: \".concat(objName, \"]\");\n    }\n    return \"[object \".concat(objName, \"]\");\n  } catch (err) {\n    return \"**non-serializable** (\".concat(err, \")\");\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  var prototype = Object.getPrototypeOf(value);\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\nexports.normalize = normalize;\nexports.normalizeToSize = normalizeToSize;\nexports.walk = visit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/normalize.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/object.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/object.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.array.sort.js */ \"./node_modules/core-js/modules/es.array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.map.js */ \"./node_modules/core-js/modules/es.map.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.array.fill.js */ \"./node_modules/core-js/modules/es.array.fill.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar browser = __webpack_require__(/*! ./browser.js */ \"./node_modules/@sentry/utils/cjs/browser.js\");\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar string = __webpack_require__(/*! ./string.js */ \"./node_modules/@sentry/utils/cjs/string.js\");\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  var original = source[name];\n  var wrapped = replacementFactory(original);\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  var proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nfunction urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(object[key]));\n  }).join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value) {\n  if (is.isError(value)) {\n    return _objectSpread({\n      message: value.message,\n      name: value.name,\n      stack: value.stack\n    }, getOwnProperties(value));\n  } else if (is.isEvent(value)) {\n    var newObj = _objectSpread({\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget)\n    }, getOwnProperties(value));\n    if (typeof CustomEvent !== 'undefined' && is.isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return is.isElement(target) ? browser.htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (_typeof(obj) === 'object' && obj !== null) {\n    var extractedProps = {};\n    for (var property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n  var keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n  if (keys[0].length >= maxLength) {\n    return string.truncate(keys[0], maxLength);\n  }\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return string.truncate(serialized, maxLength);\n  }\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  var memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  if (is.isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    var memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    var returnValue = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    for (var _i = 0, _Object$keys = Object.keys(inputValue); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n    return returnValue;\n  }\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    var _memoVal = memoizationMap.get(inputValue);\n    if (_memoVal !== undefined) {\n      return _memoVal;\n    }\n    var _returnValue = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, _returnValue);\n    inputValue.forEach(function (item) {\n      _returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n    return _returnValue;\n  }\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  var objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case _typeof(wat) === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case is.isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\nexports.addNonEnumerableProperty = addNonEnumerableProperty;\nexports.convertToPlainObject = convertToPlainObject;\nexports.dropUndefinedKeys = dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;\nexports.fill = fill;\nexports.getOriginalFunction = getOriginalFunction;\nexports.markFunctionWrapped = markFunctionWrapped;\nexports.objectify = objectify;\nexports.urlEncode = urlEncode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/object.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/path.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/path.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve() {\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? i < 0 || arguments.length <= i ? undefined : arguments[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = \"\".concat(path, \"/\").concat(resolvedPath);\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  var start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  var end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var _i = samePartsLength; _i < fromParts.length; _i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  var f = splitPath(path)[2];\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\nexports.basename = basename;\nexports.dirname = dirname;\nexports.isAbsolute = isAbsolute;\nexports.join = join;\nexports.normalizePath = normalizePath;\nexports.relative = relative;\nexports.resolve = resolve;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/path.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/promisebuffer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/promisebuffer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar error = __webpack_require__(/*! ./error.js */ \"./node_modules/@sentry/utils/cjs/error.js\");\nvar syncpromise = __webpack_require__(/*! ./syncpromise.js */ \"./node_modules/@sentry/utils/cjs/syncpromise.js\");\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  var buffer = [];\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return syncpromise.rejectedSyncPromise(new error.SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    var task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task.then(function () {\n      return remove(task);\n    })\n    // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, function () {\n      return remove(task).then(null, function () {\n        // We have to add another catch here because `remove()` starts a new promise chain.\n      });\n    });\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new syncpromise.SyncPromise(function (resolve, reject) {\n      var counter = buffer.length;\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(function (item) {\n        void syncpromise.resolvedSyncPromise(item).then(function () {\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n  return {\n    $: buffer,\n    add: add,\n    drain: drain\n  };\n}\nexports.makePromiseBuffer = makePromiseBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvcHJvbWlzZWJ1ZmZlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQUEsa0JBQUFDLEtBQUE7RUFDQSxJQUFBQyxNQUFBO0VBRUEsU0FBQUMsUUFBQTtJQUNBLE9BQUFGLEtBQUEsS0FBQUcsU0FBQSxJQUFBRixNQUFBLENBQUFHLE1BQUEsR0FBQUosS0FBQTtFQUNBOztFQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNBLFNBQUFLLE9BQUFDLElBQUE7SUFDQSxPQUFBTCxNQUFBLENBQUFNLE1BQUEsQ0FBQU4sTUFBQSxDQUFBTyxPQUFBLENBQUFGLElBQUE7RUFDQTs7RUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNBLFNBQUFHLElBQUFDLFlBQUE7SUFDQSxLQUFBUixPQUFBO01BQ0EsT0FBQVMsV0FBQSxDQUFBQyxtQkFBQSxLQUFBQyxLQUFBLENBQUFDLFdBQUE7SUFDQTs7SUFFQTtJQUNBLElBQUFSLElBQUEsR0FBQUksWUFBQTtJQUNBLElBQUFULE1BQUEsQ0FBQU8sT0FBQSxDQUFBRixJQUFBO01BQ0FMLE1BQUEsQ0FBQWMsSUFBQSxDQUFBVCxJQUFBO0lBQ0E7SUFDQSxLQUFBQSxJQUFBLENBQ0FVLElBQUE7TUFBQSxPQUFBWCxNQUFBLENBQUFDLElBQUE7SUFBQTtJQUNBO0lBQ0E7SUFDQTtJQUFBLENBQ0FVLElBQUE7TUFBQSxPQUNBWCxNQUFBLENBQUFDLElBQUEsRUFBQVUsSUFBQTtRQUNBO01BQUEsQ0FDQTtJQUFBLENBQ0E7SUFDQSxPQUFBVixJQUFBO0VBQ0E7O0VBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0EsU0FBQVcsTUFBQUMsT0FBQTtJQUNBLFdBQUFQLFdBQUEsQ0FBQVEsV0FBQSxXQUFBQyxPQUFBLEVBQUFDLE1BQUE7TUFDQSxJQUFBQyxPQUFBLEdBQUFyQixNQUFBLENBQUFHLE1BQUE7TUFFQSxLQUFBa0IsT0FBQTtRQUNBLE9BQUFGLE9BQUE7TUFDQTs7TUFFQTtNQUNBLElBQUFHLGtCQUFBLEdBQUFDLFVBQUE7UUFDQSxJQUFBTixPQUFBLElBQUFBLE9BQUE7VUFDQUUsT0FBQTtRQUNBO01BQ0EsR0FBQUYsT0FBQTs7TUFFQTtNQUNBakIsTUFBQSxDQUFBd0IsT0FBQSxXQUFBQyxJQUFBO1FBQ0EsS0FBQWYsV0FBQSxDQUFBZ0IsbUJBQUEsQ0FBQUQsSUFBQSxFQUFBVixJQUFBO1VBQ0EsUUFBQU0sT0FBQTtZQUNBTSxZQUFBLENBQUFMLGtCQUFBO1lBQ0FILE9BQUE7VUFDQTtRQUNBLEdBQUFDLE1BQUE7TUFDQTtJQUNBO0VBQ0E7RUFFQTtJQUNBUSxDQUFBLEVBQUE1QixNQUFBO0lBQ0FRLEdBQUEsRUFBQUEsR0FBQTtJQUNBUSxLQUFBLEVBQUFBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9wcm9taXNlYnVmZmVyLnRzPzNkZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VudHJ5RXJyb3IgfSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7IHJlamVjdGVkU3luY1Byb21pc2UsIHJlc29sdmVkU3luY1Byb21pc2UsIFN5bmNQcm9taXNlIH0gZnJvbSAnLi9zeW5jcHJvbWlzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvbWlzZUJ1ZmZlcjxUPiB7XG4gIC8vIGV4cG9zZXMgdGhlIGludGVybmFsIGFycmF5IHNvIHRlc3RzIGNhbiBhc3NlcnQgb24gdGhlIHN0YXRlIG9mIGl0LlxuICAvLyBYWFg6IHRoaXMgcmVhbGx5IHNob3VsZCBub3QgYmUgcHVibGljIGFwaS5cbiAgJDogQXJyYXk8UHJvbWlzZUxpa2U8VD4+O1xuICBhZGQodGFza1Byb2R1Y2VyOiAoKSA9PiBQcm9taXNlTGlrZTxUPik6IFByb21pc2VMaWtlPFQ+O1xuICBkcmFpbih0aW1lb3V0PzogbnVtYmVyKTogUHJvbWlzZUxpa2U8Ym9vbGVhbj47XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBuZXcgUHJvbWlzZUJ1ZmZlciBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGxpbWl0XG4gKiBAcGFyYW0gbGltaXQgbWF4IG51bWJlciBvZiBwcm9taXNlcyB0aGF0IGNhbiBiZSBzdG9yZWQgaW4gdGhlIGJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZVByb21pc2VCdWZmZXI8VD4obGltaXQ/OiBudW1iZXIpOiBQcm9taXNlQnVmZmVyPFQ+IHtcbiAgY29uc3QgYnVmZmVyOiBBcnJheTxQcm9taXNlTGlrZTxUPj4gPSBbXTtcblxuICBmdW5jdGlvbiBpc1JlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBsaW1pdCA9PT0gdW5kZWZpbmVkIHx8IGJ1ZmZlci5sZW5ndGggPCBsaW1pdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBwcm9taXNlIGZyb20gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0gdGFzayBDYW4gYmUgYW55IFByb21pc2VMaWtlPFQ+XG4gICAqIEByZXR1cm5zIFJlbW92ZWQgcHJvbWlzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbW92ZSh0YXNrOiBQcm9taXNlTGlrZTxUPik6IFByb21pc2VMaWtlPFQ+IHtcbiAgICByZXR1cm4gYnVmZmVyLnNwbGljZShidWZmZXIuaW5kZXhPZih0YXNrKSwgMSlbMF07XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcHJvbWlzZSAocmVwcmVzZW50aW5nIGFuIGluLWZsaWdodCBhY3Rpb24pIHRvIHRoZSBxdWV1ZSwgYW5kIHNldCBpdCB0byByZW1vdmUgaXRzZWxmIG9uIGZ1bGZpbGxtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gdGFza1Byb2R1Y2VyIEEgZnVuY3Rpb24gcHJvZHVjaW5nIGFueSBQcm9taXNlTGlrZTxUPjsgSW4gcHJldmlvdXMgdmVyc2lvbnMgdGhpcyB1c2VkIHRvIGJlIGB0YXNrOlxuICAgKiAgICAgICAgUHJvbWlzZUxpa2U8VD5gLCBidXQgdW5kZXIgdGhhdCBtb2RlbCwgUHJvbWlzZXMgd2VyZSBpbnN0YW50bHkgY3JlYXRlZCBvbiB0aGUgY2FsbC1zaXRlIGFuZCB0aGVpciBleGVjdXRvclxuICAgKiAgICAgICAgZnVuY3Rpb25zIHRoZXJlZm9yZSByYW4gaW1tZWRpYXRlbHkuIFRodXMsIGV2ZW4gaWYgdGhlIGJ1ZmZlciB3YXMgZnVsbCwgdGhlIGFjdGlvbiBzdGlsbCBoYXBwZW5lZC4gQnlcbiAgICogICAgICAgIHJlcXVpcmluZyB0aGUgcHJvbWlzZSB0byBiZSB3cmFwcGVkIGluIGEgZnVuY3Rpb24sIHdlIGNhbiBkZWZlciBwcm9taXNlIGNyZWF0aW9uIHVudGlsIGFmdGVyIHRoZSBidWZmZXJcbiAgICogICAgICAgIGxpbWl0IGNoZWNrLlxuICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgcHJvbWlzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZCh0YXNrUHJvZHVjZXI6ICgpID0+IFByb21pc2VMaWtlPFQ+KTogUHJvbWlzZUxpa2U8VD4ge1xuICAgIGlmICghaXNSZWFkeSgpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRTeW5jUHJvbWlzZShuZXcgU2VudHJ5RXJyb3IoJ05vdCBhZGRpbmcgUHJvbWlzZSBiZWNhdXNlIGJ1ZmZlciBsaW1pdCB3YXMgcmVhY2hlZC4nKSk7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgdGhlIHRhc2sgYW5kIGFkZCBpdHMgcHJvbWlzZSB0byB0aGUgcXVldWVcbiAgICBjb25zdCB0YXNrID0gdGFza1Byb2R1Y2VyKCk7XG4gICAgaWYgKGJ1ZmZlci5pbmRleE9mKHRhc2spID09PSAtMSkge1xuICAgICAgYnVmZmVyLnB1c2godGFzayk7XG4gICAgfVxuICAgIHZvaWQgdGFza1xuICAgICAgLnRoZW4oKCkgPT4gcmVtb3ZlKHRhc2spKVxuICAgICAgLy8gVXNlIGB0aGVuKG51bGwsIHJlamVjdGlvbkhhbmRsZXIpYCByYXRoZXIgdGhhbiBgY2F0Y2gocmVqZWN0aW9uSGFuZGxlcilgIHNvIHRoYXQgd2UgY2FuIHVzZSBgUHJvbWlzZUxpa2VgXG4gICAgICAvLyByYXRoZXIgdGhhbiBgUHJvbWlzZWAuIGBQcm9taXNlTGlrZWAgZG9lc24ndCBoYXZlIGEgYC5jYXRjaGAgbWV0aG9kLCBtYWtpbmcgaXRzIHBvbHlmaWxsIHNtYWxsZXIuIChFUzUgZGlkbid0XG4gICAgICAvLyBoYXZlIHByb21pc2VzLCBzbyBUUyBoYXMgdG8gcG9seWZpbGwgd2hlbiBkb3duLWNvbXBpbGluZy4pXG4gICAgICAudGhlbihudWxsLCAoKSA9PlxuICAgICAgICByZW1vdmUodGFzaykudGhlbihudWxsLCAoKSA9PiB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSB0byBhZGQgYW5vdGhlciBjYXRjaCBoZXJlIGJlY2F1c2UgYHJlbW92ZSgpYCBzdGFydHMgYSBuZXcgcHJvbWlzZSBjaGFpbi5cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIHJldHVybiB0YXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgZm9yIGFsbCBwcm9taXNlcyBpbiB0aGUgcXVldWUgdG8gcmVzb2x2ZSBvciBmb3IgdGltZW91dCB0byBleHBpcmUsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cbiAgICpcbiAgICogQHBhcmFtIHRpbWVvdXQgVGhlIHRpbWUsIGluIG1zLCBhZnRlciB3aGljaCB0byByZXNvbHZlIHRvIGBmYWxzZWAgaWYgdGhlIHF1ZXVlIGlzIHN0aWxsIG5vbi1lbXB0eS4gUGFzc2luZyBgMGAgKG9yXG4gICAqIG5vdCBwYXNzaW5nIGFueXRoaW5nKSB3aWxsIG1ha2UgdGhlIHByb21pc2Ugd2FpdCBhcyBsb25nIGFzIGl0IHRha2VzIGZvciB0aGUgcXVldWUgdG8gZHJhaW4gYmVmb3JlIHJlc29sdmluZyB0b1xuICAgKiBgdHJ1ZWAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCB3aWxsIHJlc29sdmUgdG8gYHRydWVgIGlmIHRoZSBxdWV1ZSBpcyBhbHJlYWR5IGVtcHR5IG9yIGRyYWlucyBiZWZvcmUgdGhlIHRpbWVvdXQsIGFuZFxuICAgKiBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZnVuY3Rpb24gZHJhaW4odGltZW91dD86IG51bWJlcik6IFByb21pc2VMaWtlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlPGJvb2xlYW4+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBjb3VudGVyID0gYnVmZmVyLmxlbmd0aDtcblxuICAgICAgaWYgKCFjb3VudGVyKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICAvLyB3YWl0IGZvciBgdGltZW91dGAgbXMgYW5kIHRoZW4gcmVzb2x2ZSB0byBgZmFsc2VgIChpZiBub3QgY2FuY2VsbGVkIGZpcnN0KVxuICAgICAgY29uc3QgY2FwdHVyZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICAvLyBpZiBhbGwgcHJvbWlzZXMgcmVzb2x2ZSBpbiB0aW1lLCBjYW5jZWwgdGhlIHRpbWVyIGFuZCByZXNvbHZlIHRvIGB0cnVlYFxuICAgICAgYnVmZmVyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIHZvaWQgcmVzb2x2ZWRTeW5jUHJvbWlzZShpdGVtKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBpZiAoIS0tY291bnRlcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhcHR1cmVkU2V0VGltZW91dCk7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAkOiBidWZmZXIsXG4gICAgYWRkLFxuICAgIGRyYWluLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbIm1ha2VQcm9taXNlQnVmZmVyIiwibGltaXQiLCJidWZmZXIiLCJpc1JlYWR5IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicmVtb3ZlIiwidGFzayIsInNwbGljZSIsImluZGV4T2YiLCJhZGQiLCJ0YXNrUHJvZHVjZXIiLCJzeW5jcHJvbWlzZSIsInJlamVjdGVkU3luY1Byb21pc2UiLCJlcnJvciIsIlNlbnRyeUVycm9yIiwicHVzaCIsInRoZW4iLCJkcmFpbiIsInRpbWVvdXQiLCJTeW5jUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb3VudGVyIiwiY2FwdHVyZWRTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsImZvckVhY2giLCJpdGVtIiwicmVzb2x2ZWRTeW5jUHJvbWlzZSIsImNsZWFyVGltZW91dCIsIiQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/promisebuffer.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/ratelimit.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/ratelimit.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.string.trim.js */ \"./node_modules/core-js/modules/es.string.trim.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nvar DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header) {\n  var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  var headerDelay = parseInt(\"\".concat(header), 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  var headerDate = Date.parse(\"\".concat(header));\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, category) {\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, _ref) {\n  var statusCode = _ref.statusCode,\n    headers = _ref.headers;\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  var updatedRateLimits = _objectSpread({}, limits);\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  var rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  var retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    var _iterator = _createForOfIteratorHelper(rateLimitHeader.trim().split(',')),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var limit = _step.value;\n        var _limit$split = limit.split(':', 2),\n          _limit$split2 = _slicedToArray(_limit$split, 2),\n          retryAfter = _limit$split2[0],\n          categories = _limit$split2[1];\n        var headerDelay = parseInt(retryAfter, 10);\n        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        if (!categories) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          var _iterator2 = _createForOfIteratorHelper(categories.split(';')),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var category = _step2.value;\n              updatedRateLimits[category] = now + delay;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexports.DEFAULT_RETRY_AFTER = DEFAULT_RETRY_AFTER;\nexports.disabledUntil = disabledUntil;\nexports.isRateLimited = isRateLimited;\nexports.parseRetryAfterHeader = parseRetryAfterHeader;\nexports.updateRateLimits = updateRateLimits;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/ratelimit.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/requestdata.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/requestdata.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"./node_modules/core-js/modules/es.string.starts-with.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.url.js */ \"./node_modules/core-js/modules/web.url.js\");\n__webpack_require__(/*! core-js/modules/web.url-search-params.js */ \"./node_modules/core-js/modules/web.url-search-params.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.string.search.js */ \"./node_modules/core-js/modules/es.string.search.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\nvar normalize = __webpack_require__(/*! ./normalize.js */ \"./node_modules/@sentry/utils/cjs/normalize.js\");\nvar url = __webpack_require__(/*! ./url.js */ \"./node_modules/@sentry/utils/cjs/url.js\");\nvar DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true\n};\nvar DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nvar DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addRequestDataToTransaction(transaction, req, deps) {\n  if (!transaction) return;\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    transaction.setName.apply(transaction, _toConsumableArray(extractPathForTransaction(req, {\n      path: true,\n      method: true\n    })));\n  }\n  transaction.setData('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setData('baseUrl', req.baseUrl);\n  }\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nfunction extractPathForTransaction(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var method = req.method && req.method.toUpperCase();\n  var path = '';\n  var source = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || \"\".concat(req.baseUrl || '').concat(req.route && req.route.path);\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = url.stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n  var name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n  return [name, source];\n}\n\n/** JSDoc */\nfunction extractTransaction(req, type) {\n  switch (type) {\n    case 'path':\n      {\n        return extractPathForTransaction(req, {\n          path: true\n        })[0];\n      }\n    case 'handler':\n      {\n        return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || '<anonymous>';\n      }\n    case 'methodPath':\n    default:\n      {\n        return extractPathForTransaction(req, {\n          path: true,\n          method: true\n        })[0];\n      }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(user, keys) {\n  var extractedUser = {};\n  var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n  attributes.forEach(function (key) {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nfunction extractRequestData(req, options) {\n  var _ref = options || {},\n    _ref$include = _ref.include,\n    include = _ref$include === void 0 ? DEFAULT_REQUEST_INCLUDES : _ref$include,\n    deps = _ref.deps;\n  var requestData = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  var headers = req.headers || {};\n  // method:\n  //   node, express, koa, nextjs: req.method\n  var method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  var host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  var protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  var originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  var absoluteUrl = \"\".concat(protocol, \"://\").concat(host).concat(originalUrl);\n  include.forEach(function (key) {\n    switch (key) {\n      case 'headers':\n        {\n          requestData.headers = headers;\n          break;\n        }\n      case 'method':\n        {\n          requestData.method = method;\n          break;\n        }\n      case 'url':\n        {\n          requestData.url = absoluteUrl;\n          break;\n        }\n      case 'cookies':\n        {\n          // cookies:\n          //   node, express, koa: req.headers.cookie\n          //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie) || {};\n          break;\n        }\n      case 'query_string':\n        {\n          // query string:\n          //   node: req.url (raw)\n          //   express, koa, nextjs: req.query\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          requestData.query_string = extractQueryParams(req, deps);\n          break;\n        }\n      case 'data':\n        {\n          if (method === 'GET' || method === 'HEAD') {\n            break;\n          }\n          // body data:\n          //   express, koa, nextjs: req.body\n          //\n          //   when using node by itself, you have to read the incoming stream(see\n          //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n          //   where they're going to store the final result, so they'll have to capture this data themselves\n          if (req.body !== undefined) {\n            requestData.data = is.isString(req.body) ? req.body : JSON.stringify(normalize.normalize(req.body));\n          }\n          break;\n        }\n      default:\n        {\n          if ({}.hasOwnProperty.call(req, key)) {\n            requestData[key] = req[key];\n          }\n        }\n    }\n  });\n  return requestData;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @hidden\n */\nfunction addRequestDataToEvent(event, req, options) {\n  var include = _objectSpread(_objectSpread({}, DEFAULT_INCLUDES), options && options.include);\n  if (include.request) {\n    var extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n      include: include.request,\n      deps: options && options.deps\n    }) : extractRequestData(req, {\n      deps: options && options.deps\n    });\n    event.request = _objectSpread(_objectSpread({}, event.request), extractedRequestData);\n  }\n  if (include.user) {\n    var extractedUser = req.user && is.isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = _objectSpread(_objectSpread({}, event.user), extractedUser);\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    var ip = req.ip || req.socket && req.socket.remoteAddress;\n    if (ip) {\n      event.user = _objectSpread(_objectSpread({}, event.user), {}, {\n        ip_address: ip\n      });\n    }\n  }\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n  return event;\n}\nfunction extractQueryParams(req, deps) {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  var originalUrl = req.originalUrl || req.url || '';\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = \"http://dogs.are.great\".concat(originalUrl);\n  }\n  return req.query || (typeof URL === \"undefined\" ? \"undefined\" : _typeof(URL)) !== undefined && new URL(originalUrl).search.replace('?', '') ||\n  // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n  deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n}\nexports.addRequestDataToEvent = addRequestDataToEvent;\nexports.addRequestDataToTransaction = addRequestDataToTransaction;\nexports.extractPathForTransaction = extractPathForTransaction;\nexports.extractRequestData = extractRequestData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/requestdata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/severity.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/severity.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nvar validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nfunction severityFromString(level) {\n  return severityLevelFromString(level);\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log';\n}\nexports.severityFromString = severityFromString;\nexports.severityLevelFromString = severityLevelFromString;\nexports.validSeverityLevels = validSeverityLevels;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvc2V2ZXJpdHkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBQUEsbUJBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLG1CQUFBQyxLQUFBO0VBQ0EsT0FBQUMsdUJBQUEsQ0FBQUQsS0FBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLHdCQUFBRCxLQUFBO0VBQ0EsT0FBQUEsS0FBQSwwQkFBQUYsbUJBQUEsQ0FBQUksUUFBQSxDQUFBRixLQUFBLElBQUFBLEtBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy9zZXZlcml0eS50cz8wNmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uICovXG5pbXBvcnQgdHlwZSB7IFNldmVyaXR5LCBTZXZlcml0eUxldmVsIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5cbi8vIE5vdGU6IElkZWFsbHkgdGhlIGBTZXZlcml0eUxldmVsYCB0eXBlIHdvdWxkIGJlIGRlcml2ZWQgZnJvbSBgdmFsaWRTZXZlcml0eUxldmVsc2AsIGJ1dCB0aGF0IHdvdWxkIG1lYW4gZWl0aGVyXG4vL1xuLy8gYSkgbW92aW5nIGB2YWxpZFNldmVyaXR5TGV2ZWxzYCB0byBgQHNlbnRyeS90eXBlc2AsXG4vLyBiKSBtb3ZpbmcgdGhlYFNldmVyaXR5TGV2ZWxgIHR5cGUgaGVyZSwgb3Jcbi8vIGMpIGltcG9ydGluZyBgdmFsaWRTZXZlcml0eUxldmVsc2AgZnJvbSBoZXJlIGludG8gYEBzZW50cnkvdHlwZXNgLlxuLy9cbi8vIE9wdGlvbiBBIHdvdWxkIG1ha2UgYEBzZW50cnkvdHlwZXNgIGEgcnVudGltZSBkZXBlbmRlbmN5IG9mIGBAc2VudHJ5L3V0aWxzYCAobm90IGdvb2QpLCBhbmQgb3B0aW9ucyBCIGFuZCBDIHdvdWxkXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkZXBlbmRlbmN5IGJldHdlZW4gYEBzZW50cnkvdHlwZXNgIGFuZCBgQHNlbnRyeS91dGlsc2AgKGFsc28gbm90IGdvb2QpLiBTbyBhIFRPRE8gYWNjb21wYW55aW5nIHRoZVxuLy8gdHlwZSwgcmVtaW5kaW5nIGFueW9uZSB3aG8gY2hhbmdlcyBpdCB0byBjaGFuZ2UgdGhpcyBsaXN0IGFsc28sIHdpbGwgaGF2ZSB0byBkby5cblxuZXhwb3J0IGNvbnN0IHZhbGlkU2V2ZXJpdHlMZXZlbHMgPSBbJ2ZhdGFsJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnbG9nJywgJ2luZm8nLCAnZGVidWcnXTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZy1iYXNlZCBsZXZlbCBpbnRvIGEgbWVtYmVyIG9mIHRoZSBkZXByZWNhdGVkIHtAbGluayBTZXZlcml0eX0gZW51bS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBgc2V2ZXJpdHlGcm9tU3RyaW5nYCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBzZXZlcml0eUxldmVsRnJvbVN0cmluZ2AgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIFNldmVyaXR5XG4gKiBAcmV0dXJucyBTZXZlcml0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V2ZXJpdHlGcm9tU3RyaW5nKGxldmVsOiBTZXZlcml0eSB8IFNldmVyaXR5TGV2ZWwgfCBzdHJpbmcpOiBTZXZlcml0eSB7XG4gIHJldHVybiBzZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCkgYXMgU2V2ZXJpdHk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIGBTZXZlcml0eUxldmVsYCwgbm9ybWFsaXppbmcgaXQgYWxvbmcgdGhlIHdheS5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRlc2lyZWQgYFNldmVyaXR5TGV2ZWxgLlxuICogQHJldHVybnMgVGhlIGBTZXZlcml0eUxldmVsYCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBzdHJpbmcsIG9yICdsb2cnIGlmIHRoZSBzdHJpbmcgaXNuJ3QgYSB2YWxpZCBsZXZlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsOiBTZXZlcml0eUxldmVsIHwgc3RyaW5nKTogU2V2ZXJpdHlMZXZlbCB7XG4gIHJldHVybiAobGV2ZWwgPT09ICd3YXJuJyA/ICd3YXJuaW5nJyA6IHZhbGlkU2V2ZXJpdHlMZXZlbHMuaW5jbHVkZXMobGV2ZWwpID8gbGV2ZWwgOiAnbG9nJykgYXMgU2V2ZXJpdHlMZXZlbDtcbn1cbiJdLCJuYW1lcyI6WyJ2YWxpZFNldmVyaXR5TGV2ZWxzIiwic2V2ZXJpdHlGcm9tU3RyaW5nIiwibGV2ZWwiLCJzZXZlcml0eUxldmVsRnJvbVN0cmluZyIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/severity.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/stacktrace.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/stacktrace.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n__webpack_require__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n__webpack_require__(/*! core-js/modules/es.array.sort.js */ \"./node_modules/core-js/modules/es.array.sort.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ \"./node_modules/core-js/modules/es.object.get-own-property-descriptors.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar nodeStackTrace = __webpack_require__(/*! ./node-stack-trace.js */ \"./node_modules/@sentry/utils/cjs/node-stack-trace.js\");\nvar STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nvar WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser() {\n  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {\n    parsers[_key] = arguments[_key];\n  }\n  var sortedParsers = parsers.sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (p) {\n    return p[1];\n  });\n  return function (stack) {\n    var skipFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var frames = [];\n    var lines = stack.split('\\n');\n    for (var i = skipFirst; i < lines.length; i++) {\n      var line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      var cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n      var _iterator = _createForOfIteratorHelper(sortedParsers),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var parser = _step.value;\n          var frame = parser(cleanedLine);\n          if (frame) {\n            frames.push(frame);\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser.apply(void 0, _toConsumableArray(stackParser));\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n  var localStack = stack.slice(0, STACKTRACE_FRAME_LIMIT);\n  var lastFrameFunction = localStack[localStack.length - 1].function;\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (lastFrameFunction && /sentryWrapped/.test(lastFrameFunction)) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n  var firstFrameFunction = localStack[localStack.length - 1].function;\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (firstFrameFunction && /captureMessage|captureException/.test(firstFrameFunction)) {\n    localStack.pop();\n  }\n  return localStack.map(function (frame) {\n    return _objectSpread(_objectSpread({}, frame), {}, {\n      filename: frame.filename || localStack[localStack.length - 1].filename,\n      function: frame.function || '?'\n    });\n  });\n}\nvar defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, nodeStackTrace.node(getModule)];\n}\nexports.createStackParser = createStackParser;\nexports.getFunctionName = getFunctionName;\nexports.nodeStackLineParser = nodeStackLineParser;\nexports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/stacktrace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/string.js":
/*!**************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/string.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"./node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : \"\".concat(str.slice(0, max), \"...\");\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  var newLine = line;\n  var lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n  var start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  var end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = \"'{snip} \".concat(newLine);\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n  var output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (var i = 0; i < input.length; i++) {\n    var value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(value, pattern) {\n  var requireExactStringMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!is.isString(value)) {\n    return false;\n  }\n  if (is.isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (is.isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(testString) {\n  var patterns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var requireExactStringMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return patterns.some(function (pattern) {\n    return isMatchingPattern(testString, pattern, requireExactStringMatch);\n  });\n}\nexports.isMatchingPattern = isMatchingPattern;\nexports.safeJoin = safeJoin;\nexports.snipLine = snipLine;\nexports.stringMatchesSomePattern = stringMatchesSomePattern;\nexports.truncate = truncate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/string.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/supports.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/supports.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar logger = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/utils/cjs/logger.js\");\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = worldwide.getGlobalObject();\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsFetch() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  var result = false;\n  var doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      var sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexports.isNativeFetch = isNativeFetch;\nexports.supportsDOMError = supportsDOMError;\nexports.supportsDOMException = supportsDOMException;\nexports.supportsErrorEvent = supportsErrorEvent;\nexports.supportsFetch = supportsFetch;\nexports.supportsNativeFetch = supportsNativeFetch;\nexports.supportsReferrerPolicy = supportsReferrerPolicy;\nexports.supportsReportingObserver = supportsReportingObserver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvc3VwcG9ydHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLFNBQUEsQ0FBQUMsZUFBQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxtQkFBQTtFQUNBO0lBQ0EsSUFBQUMsVUFBQTtJQUNBO0VBQ0EsU0FBQUMsQ0FBQTtJQUNBO0VBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQyxpQkFBQTtFQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsSUFBQUMsUUFBQTtJQUNBO0VBQ0EsU0FBQUYsQ0FBQTtJQUNBO0VBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBRyxxQkFBQTtFQUNBO0lBQ0EsSUFBQUMsWUFBQTtJQUNBO0VBQ0EsU0FBQUosQ0FBQTtJQUNBO0VBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBSyxjQUFBO0VBQ0EsaUJBQUFWLE1BQUE7SUFDQTtFQUNBO0VBRUE7SUFDQSxJQUFBVyxPQUFBO0lBQ0EsSUFBQUMsT0FBQTtJQUNBLElBQUFDLFFBQUE7SUFDQTtFQUNBLFNBQUFSLENBQUE7SUFDQTtFQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFTLGNBQUFDLElBQUE7RUFDQSxPQUFBQSxJQUFBLHVEQUFBQyxJQUFBLENBQUFELElBQUEsQ0FBQUUsUUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLG9CQUFBO0VBQ0EsS0FBQVIsYUFBQTtJQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBLElBQUFJLGFBQUEsQ0FBQWQsTUFBQSxDQUFBbUIsS0FBQTtJQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBLElBQUFDLE1BQUE7RUFDQSxJQUFBQyxHQUFBLEdBQUFyQixNQUFBLENBQUFzQixRQUFBO0VBQ0E7RUFDQSxJQUFBRCxHQUFBLFdBQUFBLEdBQUEsQ0FBQUUsYUFBQTtJQUNBO01BQ0EsSUFBQUMsT0FBQSxHQUFBSCxHQUFBLENBQUFFLGFBQUE7TUFDQUMsT0FBQSxDQUFBQyxNQUFBO01BQ0FKLEdBQUEsQ0FBQUssSUFBQSxDQUFBQyxXQUFBLENBQUFILE9BQUE7TUFDQSxJQUFBQSxPQUFBLENBQUFJLGFBQUEsSUFBQUosT0FBQSxDQUFBSSxhQUFBLENBQUFULEtBQUE7UUFDQTtRQUNBQyxNQUFBLEdBQUFOLGFBQUEsQ0FBQVUsT0FBQSxDQUFBSSxhQUFBLENBQUFULEtBQUE7TUFDQTtNQUNBRSxHQUFBLENBQUFLLElBQUEsQ0FBQUcsV0FBQSxDQUFBTCxPQUFBO0lBQ0EsU0FBQU0sR0FBQTtNQUNBLFFBQUFDLGdCQUFBLG9CQUFBQSxnQkFBQSxLQUNBQyxNQUFBLENBQUFBLE1BQUEsQ0FBQUMsSUFBQSxvRkFBQUgsR0FBQTtJQUNBO0VBQ0E7RUFFQSxPQUFBVixNQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBQWMsMEJBQUE7RUFDQSw4QkFBQWxDLE1BQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBbUMsdUJBQUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxLQUFBekIsYUFBQTtJQUNBO0VBQ0E7RUFFQTtJQUNBLElBQUFFLE9BQUE7TUFDQXdCLGNBQUE7SUFDQTtJQUNBO0VBQ0EsU0FBQS9CLENBQUE7SUFDQTtFQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi9zcmMvc3VwcG9ydHMudHM/NjcxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRHbG9iYWxPYmplY3QgfSBmcm9tICcuL3dvcmxkd2lkZSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuY29uc3QgV0lORE9XID0gZ2V0R2xvYmFsT2JqZWN0PFdpbmRvdz4oKTtcblxuZXhwb3J0IHsgc3VwcG9ydHNIaXN0b3J5IH0gZnJvbSAnLi92ZW5kb3Ivc3VwcG9ydHNIaXN0b3J5JztcblxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRXJyb3JFdmVudCBvYmplY3RzXG4gKiB7QGxpbmsgc3VwcG9ydHNFcnJvckV2ZW50fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNFcnJvckV2ZW50KCk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIG5ldyBFcnJvckV2ZW50KCcnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBET01FcnJvciBvYmplY3RzXG4gKiB7QGxpbmsgc3VwcG9ydHNET01FcnJvcn0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRE9NRXJyb3IoKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgLy8gQ2hyb21lOiBWTTg5OjEgVW5jYXVnaHQgVHlwZUVycm9yOiBGYWlsZWQgdG8gY29uc3RydWN0ICdET01FcnJvcic6XG4gICAgLy8gMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlxuICAgIC8vIEB0cy1pZ25vcmUgSXQgcmVhbGx5IG5lZWRzIDEgYXJndW1lbnQsIG5vdCAwLlxuICAgIG5ldyBET01FcnJvcignJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgRE9NRXhjZXB0aW9uIG9iamVjdHNcbiAqIHtAbGluayBzdXBwb3J0c0RPTUV4Y2VwdGlvbn0uXG4gKlxuICogQHJldHVybnMgQW5zd2VyIHRvIHRoZSBnaXZlbiBxdWVzdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzRE9NRXhjZXB0aW9uKCk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIG5ldyBET01FeGNlcHRpb24oJycpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEZldGNoIEFQSVxuICoge0BsaW5rIHN1cHBvcnRzRmV0Y2h9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0ZldGNoKCk6IGJvb2xlYW4ge1xuICBpZiAoISgnZmV0Y2gnIGluIFdJTkRPVykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIG5ldyBIZWFkZXJzKCk7XG4gICAgbmV3IFJlcXVlc3QoJ2h0dHA6Ly93d3cuZXhhbXBsZS5jb20nKTtcbiAgICBuZXcgUmVzcG9uc2UoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuLyoqXG4gKiBpc05hdGl2ZUZldGNoIGNoZWNrcyBpZiB0aGUgZ2l2ZW4gZnVuY3Rpb24gaXMgYSBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZmV0Y2goKVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmF0aXZlRmV0Y2goZnVuYzogRnVuY3Rpb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGZ1bmMgJiYgL15mdW5jdGlvbiBmZXRjaFxcKFxcKVxccytcXHtcXHMrXFxbbmF0aXZlIGNvZGVcXF1cXHMrXFx9JC8udGVzdChmdW5jLnRvU3RyaW5nKCkpO1xufVxuXG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgY3VycmVudCBlbnZpcm9ubWVudCBzdXBwb3J0cyBGZXRjaCBBUEkgbmF0aXZlbHlcbiAqIHtAbGluayBzdXBwb3J0c05hdGl2ZUZldGNofS5cbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIGB3aW5kb3cuZmV0Y2hgIGlzIG5hdGl2ZWx5IGltcGxlbWVudGVkLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzTmF0aXZlRmV0Y2goKTogYm9vbGVhbiB7XG4gIGlmICghc3VwcG9ydHNGZXRjaCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRmFzdCBwYXRoIHRvIGF2b2lkIERPTSBJL09cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICBpZiAoaXNOYXRpdmVGZXRjaChXSU5ET1cuZmV0Y2gpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB3aW5kb3cuZmV0Y2ggaXMgaW1wbGVtZW50ZWQsIGJ1dCBpcyBwb2x5ZmlsbGVkIG9yIGFscmVhZHkgd3JhcHBlZCAoZS5nOiBieSBhIGNocm9tZSBleHRlbnNpb24pXG4gIC8vIHNvIGNyZWF0ZSBhIFwicHVyZVwiIGlmcmFtZSB0byBzZWUgaWYgdGhhdCBoYXMgbmF0aXZlIGZldGNoXG4gIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgY29uc3QgZG9jID0gV0lORE9XLmRvY3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgaWYgKGRvYyAmJiB0eXBlb2YgKGRvYy5jcmVhdGVFbGVtZW50IGFzIHVua25vd24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNhbmRib3ggPSBkb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBzYW5kYm94LmhpZGRlbiA9IHRydWU7XG4gICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChzYW5kYm94KTtcbiAgICAgIGlmIChzYW5kYm94LmNvbnRlbnRXaW5kb3cgJiYgc2FuZGJveC5jb250ZW50V2luZG93LmZldGNoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgcmVzdWx0ID0gaXNOYXRpdmVGZXRjaChzYW5kYm94LmNvbnRlbnRXaW5kb3cuZmV0Y2gpO1xuICAgICAgfVxuICAgICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQoc2FuZGJveCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfX0RFQlVHX0JVSUxEX18gJiZcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0NvdWxkIG5vdCBjcmVhdGUgc2FuZGJveCBpZnJhbWUgZm9yIHB1cmUgZmV0Y2ggY2hlY2ssIGJhaWxpbmcgdG8gd2luZG93LmZldGNoOiAnLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIFJlcG9ydGluZ09ic2VydmVyIEFQSVxuICoge0BsaW5rIHN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXJ9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c1JlcG9ydGluZ09ic2VydmVyKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gJ1JlcG9ydGluZ09ic2VydmVyJyBpbiBXSU5ET1c7XG59XG5cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIFJlZmVycmVyIFBvbGljeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c1JlZmVycmVyUG9saWN5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNSZWZlcnJlclBvbGljeSgpOiBib29sZWFuIHtcbiAgLy8gRGVzcGl0ZSBhbGwgc3RhcnMgaW4gdGhlIHNreSBzYXlpbmcgdGhhdCBFZGdlIHN1cHBvcnRzIG9sZCBkcmFmdCBzeW50YXgsIGFrYSAnbmV2ZXInLCAnYWx3YXlzJywgJ29yaWdpbicgYW5kICdkZWZhdWx0J1xuICAvLyAoc2VlIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9cmVmZXJyZXItcG9saWN5KSxcbiAgLy8gaXQgZG9lc24ndC4gQW5kIGl0IHRocm93cyBhbiBleGNlcHRpb24gaW5zdGVhZCBvZiBpZ25vcmluZyB0aGlzIHBhcmFtZXRlci4uLlxuICAvLyBSRUY6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvcmF2ZW4tanMvaXNzdWVzLzEyMzNcblxuICBpZiAoIXN1cHBvcnRzRmV0Y2goKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbmV3IFJlcXVlc3QoJ18nLCB7XG4gICAgICByZWZlcnJlclBvbGljeTogJ29yaWdpbicgYXMgUmVmZXJyZXJQb2xpY3ksXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJXSU5ET1ciLCJ3b3JsZHdpZGUiLCJnZXRHbG9iYWxPYmplY3QiLCJzdXBwb3J0c0Vycm9yRXZlbnQiLCJFcnJvckV2ZW50IiwiZSIsInN1cHBvcnRzRE9NRXJyb3IiLCJET01FcnJvciIsInN1cHBvcnRzRE9NRXhjZXB0aW9uIiwiRE9NRXhjZXB0aW9uIiwic3VwcG9ydHNGZXRjaCIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJpc05hdGl2ZUZldGNoIiwiZnVuYyIsInRlc3QiLCJ0b1N0cmluZyIsInN1cHBvcnRzTmF0aXZlRmV0Y2giLCJmZXRjaCIsInJlc3VsdCIsImRvYyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNhbmRib3giLCJoaWRkZW4iLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93IiwicmVtb3ZlQ2hpbGQiLCJlcnIiLCJfX1NFTlRSWV9ERUJVR19fIiwibG9nZ2VyIiwid2FybiIsInN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXIiLCJzdXBwb3J0c1JlZmVycmVyUG9saWN5IiwicmVmZXJyZXJQb2xpY3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/supports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/syncpromise.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/syncpromise.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ \"./node_modules/core-js/modules/es.symbol.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ \"./node_modules/core-js/modules/es.date.to-primitive.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar is = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/utils/cjs/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/** SyncPromise internal states */\nvar States;\n(function (States) {\n  /** Pending */\n  var PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  var RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  var REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(function (resolve) {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise(function (_, reject) {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nvar SyncPromise = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SyncPromise(executor) {\n    _classCallCheck(this, SyncPromise);\n    SyncPromise.prototype.__init.call(this);\n    SyncPromise.prototype.__init2.call(this);\n    SyncPromise.prototype.__init3.call(this);\n    SyncPromise.prototype.__init4.call(this);\n    SyncPromise.prototype.__init5.call(this);\n    SyncPromise.prototype.__init6.call(this);\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  _createClass(SyncPromise, [{\n    key: \"__init\",\n    value: function __init() {\n      this._state = States.PENDING;\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._handlers = [];\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n      return new SyncPromise(function (resolve, reject) {\n        _this._handlers.push([false, function (result) {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }, function (reason) {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }]);\n        _this._executeHandlers();\n      });\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"catch\",\n    value: function _catch(onrejected) {\n      return this.then(function (val) {\n        return val;\n      }, onrejected);\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"finally\",\n    value: function _finally(onfinally) {\n      var _this2 = this;\n      return new SyncPromise(function (resolve, reject) {\n        var val;\n        var isRejected;\n        return _this2.then(function (value) {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        }, function (reason) {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        }).then(function () {\n          if (isRejected) {\n            reject(val);\n            return;\n          }\n          resolve(val);\n        });\n      });\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      var _this3 = this;\n      this._resolve = function (value) {\n        _this3._setResult(States.RESOLVED, value);\n      };\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      var _this4 = this;\n      this._reject = function (reason) {\n        _this4._setResult(States.REJECTED, reason);\n      };\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      var _this5 = this;\n      this._setResult = function (state, value) {\n        if (_this5._state !== States.PENDING) {\n          return;\n        }\n        if (is.isThenable(value)) {\n          void value.then(_this5._resolve, _this5._reject);\n          return;\n        }\n        _this5._state = state;\n        _this5._value = value;\n        _this5._executeHandlers();\n      };\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      var _this6 = this;\n      this._executeHandlers = function () {\n        if (_this6._state === States.PENDING) {\n          return;\n        }\n        var cachedHandlers = _this6._handlers.slice();\n        _this6._handlers = [];\n        cachedHandlers.forEach(function (handler) {\n          if (handler[0]) {\n            return;\n          }\n          if (_this6._state === States.RESOLVED) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            handler[1](_this6._value);\n          }\n          if (_this6._state === States.REJECTED) {\n            handler[2](_this6._value);\n          }\n          handler[0] = true;\n        });\n      };\n    }\n  }]);\n  return SyncPromise;\n}();\nexports.SyncPromise = SyncPromise;\nexports.rejectedSyncPromise = rejectedSyncPromise;\nexports.resolvedSyncPromise = resolvedSyncPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/syncpromise.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/time.js":
/*!************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/time.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar node = __webpack_require__(/*! ./node.js */ \"./node_modules/@sentry/utils/cjs/node.js\");\nvar worldwide = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = worldwide.getGlobalObject();\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nvar dateTimestampSource = {\n  nowSeconds: function nowSeconds() {\n    return Date.now() / 1000;\n  }\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance() {\n  var performance = WINDOW.performance;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function now() {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance() {\n  try {\n    var perfHooks = node.dynamicRequire(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nvar platformPerformance = node.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function nowSeconds() {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nvar dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nvar timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nvar timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nvar usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexports._browserPerformanceTimeOriginMode = void 0;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nvar browserPerformanceTimeOrigin = function () {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  var performance = WINDOW.performance;\n  if (!performance || !performance.now) {\n    exports._browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n  var threshold = 3600 * 1000;\n  var performanceNow = performance.now();\n  var dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  var timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n  var timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  var navigationStart = performance.timing && performance.timing.navigationStart;\n  var hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  var navigationStartIsReliable = navigationStartDelta < threshold;\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      exports._browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      exports._browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  exports._browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n}();\nexports.browserPerformanceTimeOrigin = browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = dateTimestampInSeconds;\nexports.timestampInSeconds = timestampInSeconds;\nexports.timestampWithMs = timestampWithMs;\nexports.usingPerformanceAPI = usingPerformanceAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/time.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/tracing.js":
/*!***************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/tracing.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$') // whitespace\n;\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!traceparent || !matches) {\n    // empty string or no matches is invalid traceparent data\n    return undefined;\n  }\n  var parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n  return {\n    traceId: matches[1],\n    parentSampled: parentSampled,\n    parentSpanId: matches[2]\n  };\n}\nexports.TRACEPARENT_REGEXP = TRACEPARENT_REGEXP;\nexports.extractTraceparentData = extractTraceparentData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvdHJhY2luZy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBQUEsa0JBQUEsT0FBQUMsTUFBQSxDQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQSxVQUNBLEVBREE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLHVCQUFBQyxXQUFBO0VBQ0EsSUFBQUMsT0FBQSxHQUFBRCxXQUFBLENBQUFFLEtBQUEsQ0FBQUwsa0JBQUE7RUFFQSxLQUFBRyxXQUFBLEtBQUFDLE9BQUE7SUFDQTtJQUNBLE9BQUFFLFNBQUE7RUFDQTtFQUVBLElBQUFDLGFBQUE7RUFDQSxJQUFBSCxPQUFBO0lBQ0FHLGFBQUE7RUFDQSxXQUFBSCxPQUFBO0lBQ0FHLGFBQUE7RUFDQTtFQUVBO0lBQ0FDLE9BQUEsRUFBQUosT0FBQTtJQUNBRyxhQUFBLEVBQUFBLGFBQUE7SUFDQUUsWUFBQSxFQUFBTCxPQUFBO0VBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy90cmFjaW5nLnRzP2VkZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBUcmFjZXBhcmVudERhdGEgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IFRSQUNFUEFSRU5UX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeWyBcXFxcdF0qJyArIC8vIHdoaXRlc3BhY2VcbiAgICAnKFswLTlhLWZdezMyfSk/JyArIC8vIHRyYWNlX2lkXG4gICAgJy0/KFswLTlhLWZdezE2fSk/JyArIC8vIHNwYW5faWRcbiAgICAnLT8oWzAxXSk/JyArIC8vIHNhbXBsZWRcbiAgICAnWyBcXFxcdF0qJCcsIC8vIHdoaXRlc3BhY2Vcbik7XG5cbi8qKlxuICogRXh0cmFjdCB0cmFuc2FjdGlvbiBjb250ZXh0IGRhdGEgZnJvbSBhIGBzZW50cnktdHJhY2VgIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0gdHJhY2VwYXJlbnQgVHJhY2VwYXJlbnQgc3RyaW5nXG4gKlxuICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBmcm9tIHRoZSBoZWFkZXIsIG9yIHVuZGVmaW5lZCBpZiB0cmFjZXBhcmVudCBzdHJpbmcgaXMgbWFsZm9ybWVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHRyYWNlcGFyZW50OiBzdHJpbmcpOiBUcmFjZXBhcmVudERhdGEgfCB1bmRlZmluZWQge1xuICBjb25zdCBtYXRjaGVzID0gdHJhY2VwYXJlbnQubWF0Y2goVFJBQ0VQQVJFTlRfUkVHRVhQKTtcblxuICBpZiAoIXRyYWNlcGFyZW50IHx8ICFtYXRjaGVzKSB7XG4gICAgLy8gZW1wdHkgc3RyaW5nIG9yIG5vIG1hdGNoZXMgaXMgaW52YWxpZCB0cmFjZXBhcmVudCBkYXRhXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxldCBwYXJlbnRTYW1wbGVkOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICBpZiAobWF0Y2hlc1szXSA9PT0gJzEnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAobWF0Y2hlc1szXSA9PT0gJzAnKSB7XG4gICAgcGFyZW50U2FtcGxlZCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0cmFjZUlkOiBtYXRjaGVzWzFdLFxuICAgIHBhcmVudFNhbXBsZWQsXG4gICAgcGFyZW50U3BhbklkOiBtYXRjaGVzWzJdLFxuICB9O1xufVxuIl0sIm5hbWVzIjpbIlRSQUNFUEFSRU5UX1JFR0VYUCIsIlJlZ0V4cCIsImV4dHJhY3RUcmFjZXBhcmVudERhdGEiLCJ0cmFjZXBhcmVudCIsIm1hdGNoZXMiLCJtYXRjaCIsInVuZGVmaW5lZCIsInBhcmVudFNhbXBsZWQiLCJ0cmFjZUlkIiwicGFyZW50U3BhbklkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/tracing.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/url.js":
/*!***********************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/url.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n__webpack_require__(/*! core-js/modules/es.array.filter.js */ \"./node_modules/core-js/modules/es.array.filter.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n  var match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nfunction getNumberOfUrlSegments(url) {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(function (s) {\n    return s.length > 0 && s !== ',';\n  }).length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  var protocol = url.protocol,\n    host = url.host,\n    path = url.path;\n  var filteredHost = host && host\n  // Always filter out authority\n  .replace(/^.*@/, '[filtered]:[filtered]@')\n  // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n  .replace(':80', '').replace(':443', '') || '';\n  return \"\".concat(protocol ? \"\".concat(protocol, \"://\") : '').concat(filteredHost).concat(path);\n}\nexports.getNumberOfUrlSegments = getNumberOfUrlSegments;\nexports.getSanitizedUrlString = getSanitizedUrlString;\nexports.parseUrl = parseUrl;\nexports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvdXJsLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBQSxTQUFBQyxHQUFBO0VBQ0EsS0FBQUEsR0FBQTtJQUNBO0VBQ0E7RUFFQSxJQUFBQyxLQUFBLEdBQUFELEdBQUEsQ0FBQUMsS0FBQTtFQUVBLEtBQUFBLEtBQUE7SUFDQTtFQUNBOztFQUVBO0VBQ0EsSUFBQUMsS0FBQSxHQUFBRCxLQUFBO0VBQ0EsSUFBQUUsUUFBQSxHQUFBRixLQUFBO0VBQ0E7SUFDQUcsSUFBQSxFQUFBSCxLQUFBO0lBQ0FJLElBQUEsRUFBQUosS0FBQTtJQUNBSyxRQUFBLEVBQUFMLEtBQUE7SUFDQU0sTUFBQSxFQUFBTCxLQUFBO0lBQ0FNLElBQUEsRUFBQUwsUUFBQTtJQUNBTSxRQUFBLEVBQUFSLEtBQUEsTUFBQUMsS0FBQSxHQUFBQyxRQUFBO0VBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFBTyx5QkFBQUMsT0FBQTtFQUNBO0VBQ0EsT0FBQUEsT0FBQSxDQUFBQyxLQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBQUMsdUJBQUFiLEdBQUE7RUFDQTtFQUNBLE9BQUFBLEdBQUEsQ0FBQVksS0FBQSxVQUFBRSxNQUFBLFdBQUFDLENBQUE7SUFBQSxPQUFBQSxDQUFBLENBQUFDLE1BQUEsUUFBQUQsQ0FBQTtFQUFBLEdBQUFDLE1BQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLHNCQUFBakIsR0FBQTtFQUNBLElBQUFNLFFBQUEsR0FBQU4sR0FBQSxDQUFBTSxRQUFBO0lBQUFGLElBQUEsR0FBQUosR0FBQSxDQUFBSSxJQUFBO0lBQUFDLElBQUEsR0FBQUwsR0FBQSxDQUFBSyxJQUFBO0VBRUEsSUFBQWEsWUFBQSxHQUNBZCxJQUFBLElBQ0FBO0VBQ0E7RUFBQSxDQUNBZSxPQUFBO0VBQ0E7RUFBQSxDQUNBQSxPQUFBLFlBQ0FBLE9BQUEsZ0JBQ0E7RUFFQSxVQUFBQyxNQUFBLENBQUFkLFFBQUEsTUFBQWMsTUFBQSxDQUFBZCxRQUFBLGVBQUFjLE1BQUEsQ0FBQUYsWUFBQSxFQUFBRSxNQUFBLENBQUFmLElBQUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4uLy4uL3NyYy91cmwudHM/MmRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFBhcnRpYWxVUkwgPSB7XG4gIGhvc3Q/OiBzdHJpbmc7XG4gIHBhdGg/OiBzdHJpbmc7XG4gIHByb3RvY29sPzogc3RyaW5nO1xuICByZWxhdGl2ZT86IHN0cmluZztcbiAgc2VhcmNoPzogc3RyaW5nO1xuICBoYXNoPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgc3RyaW5nIGZvcm0gb2YgVVJMIGludG8gYW4gb2JqZWN0XG4gKiAvLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbiAqIC8vIGludGVudGlvbmFsbHkgdXNpbmcgcmVnZXggYW5kIG5vdCA8YS8+IGhyZWYgcGFyc2luZyB0cmljayBiZWNhdXNlIFJlYWN0IE5hdGl2ZSBhbmQgb3RoZXJcbiAqIC8vIGVudmlyb25tZW50cyB3aGVyZSBET00gbWlnaHQgbm90IGJlIGF2YWlsYWJsZVxuICogQHJldHVybnMgcGFyc2VkIFVSTCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybDogc3RyaW5nKTogUGFydGlhbFVSTCB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvLyBjb2VyY2UgdG8gdW5kZWZpbmVkIHZhbHVlcyB0byBlbXB0eSBzdHJpbmcgc28gd2UgZG9uJ3QgZ2V0ICd1bmRlZmluZWQnXG4gIGNvbnN0IHF1ZXJ5ID0gbWF0Y2hbNl0gfHwgJyc7XG4gIGNvbnN0IGZyYWdtZW50ID0gbWF0Y2hbOF0gfHwgJyc7XG4gIHJldHVybiB7XG4gICAgaG9zdDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV0sXG4gICAgcHJvdG9jb2w6IG1hdGNoWzJdLFxuICAgIHNlYXJjaDogcXVlcnksXG4gICAgaGFzaDogZnJhZ21lbnQsXG4gICAgcmVsYXRpdmU6IG1hdGNoWzVdICsgcXVlcnkgKyBmcmFnbWVudCwgLy8gZXZlcnl0aGluZyBtaW51cyBvcmlnaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBTdHJpcCB0aGUgcXVlcnkgc3RyaW5nIGFuZCBmcmFnbWVudCBvZmYgb2YgYSBnaXZlbiBVUkwgb3IgcGF0aCAoaWYgcHJlc2VudClcbiAqXG4gKiBAcGFyYW0gdXJsUGF0aCBGdWxsIFVSTCBvciBwYXRoLCBpbmNsdWRpbmcgcG9zc2libGUgcXVlcnkgc3RyaW5nIGFuZC9vciBmcmFnbWVudFxuICogQHJldHVybnMgVVJMIG9yIHBhdGggd2l0aG91dCBxdWVyeSBzdHJpbmcgb3IgZnJhZ21lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCh1cmxQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgcmV0dXJuIHVybFBhdGguc3BsaXQoL1tcXD8jXS8sIDEpWzBdO1xufVxuXG4vKipcbiAqIFJldHVybnMgbnVtYmVyIG9mIFVSTCBzZWdtZW50cyBvZiBhIHBhc3NlZCBzdHJpbmcgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmw6IHN0cmluZyk6IG51bWJlciB7XG4gIC8vIHNwbGl0IGF0ICcvJyBvciBhdCAnXFwvJyB0byBzcGxpdCByZWdleCB1cmxzIGNvcnJlY3RseVxuICByZXR1cm4gdXJsLnNwbGl0KC9cXFxcP1xcLy8pLmZpbHRlcihzID0+IHMubGVuZ3RoID4gMCAmJiBzICE9PSAnLCcpLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIFVSTCBvYmplY3QgYW5kIHJldHVybnMgYSBzYW5pdGl6ZWQgc3RyaW5nIHdoaWNoIGlzIHNhZmUgdG8gdXNlIGFzIHNwYW4gZGVzY3JpcHRpb25cbiAqIHNlZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2RhdGEtaGFuZGxpbmcvI3N0cnVjdHVyaW5nLWRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNhbml0aXplZFVybFN0cmluZyh1cmw6IFBhcnRpYWxVUkwpOiBzdHJpbmcge1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0LCBwYXRoIH0gPSB1cmw7XG5cbiAgY29uc3QgZmlsdGVyZWRIb3N0ID1cbiAgICAoaG9zdCAmJlxuICAgICAgaG9zdFxuICAgICAgICAvLyBBbHdheXMgZmlsdGVyIG91dCBhdXRob3JpdHlcbiAgICAgICAgLnJlcGxhY2UoL14uKkAvLCAnW2ZpbHRlcmVkXTpbZmlsdGVyZWRdQCcpXG4gICAgICAgIC8vIERvbid0IHNob3cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgICAgICAgLnJlcGxhY2UoJzo4MCcsICcnKVxuICAgICAgICAucmVwbGFjZSgnOjQ0MycsICcnKSkgfHxcbiAgICAnJztcblxuICByZXR1cm4gYCR7cHJvdG9jb2wgPyBgJHtwcm90b2NvbH06Ly9gIDogJyd9JHtmaWx0ZXJlZEhvc3R9JHtwYXRofWA7XG59XG4iXSwibmFtZXMiOlsicGFyc2VVcmwiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwic2VhcmNoIiwiaGFzaCIsInJlbGF0aXZlIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwidXJsUGF0aCIsInNwbGl0IiwiZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyIsImZpbHRlciIsInMiLCJsZW5ndGgiLCJnZXRTYW5pdGl6ZWRVcmxTdHJpbmciLCJmaWx0ZXJlZEhvc3QiLCJyZXBsYWNlIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/url.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/userIntegrations.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/userIntegrations.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.array.find.js */ \"./node_modules/core-js/modules/es.array.find.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.entries.js */ \"./node_modules/core-js/modules/es.object.entries.js\");\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"./node_modules/core-js/modules/es.array.from.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Recursively traverses an object to update an existing nested key.\n * Note: The provided key path must include existing properties,\n * the function will not create objects while traversing.\n *\n * @param obj An object to update\n * @param value The value to update the nested key with\n * @param keyPath The path to the key to update ex. fizz.buzz.foo\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setNestedKey(obj, keyPath, value) {\n  // Ex. foo.bar.zoop will extract foo and bar.zoop\n  var match = keyPath.match(/([a-z_]+)\\.(.*)/i);\n  // The match will be null when there's no more recursing to do, i.e., when we've reached the right level of the object\n  if (match === null) {\n    obj[keyPath] = value;\n  } else {\n    // `match[1]` is the initial segment of the path, and `match[2]` is the remainder of the path\n    var innerObj = obj[match[1]];\n    setNestedKey(innerObj, match[2], value);\n  }\n}\n\n/**\n * Enforces inclusion of a given integration with specified options in an integration array originally determined by the\n * user, by either including the given default instance or by patching an existing user instance with the given options.\n *\n * Ideally this would happen when integrations are set up, but there isn't currently a mechanism there for merging\n * options from a default integration instance with those from a user-provided instance of the same integration, only\n * for allowing the user to override a default instance entirely. (TODO: Fix that.)\n *\n * @param defaultIntegrationInstance An instance of the integration with the correct options already set\n * @param userIntegrations Integrations defined by the user.\n * @param forcedOptions Options with which to patch an existing user-derived instance on the integration.\n * @returns A final integrations array.\n */\nfunction addOrUpdateIntegration(defaultIntegrationInstance, userIntegrations) {\n  var forcedOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return Array.isArray(userIntegrations) ? addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions) : addOrUpdateIntegrationInFunction(defaultIntegrationInstance,\n  // Somehow TS can't figure out that not being an array makes this necessarily a function\n  userIntegrations, forcedOptions);\n}\nfunction addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions) {\n  var userInstance = userIntegrations.find(function (integration) {\n    return integration.name === defaultIntegrationInstance.name;\n  });\n  if (userInstance) {\n    for (var _i = 0, _Object$entries = Object.entries(forcedOptions); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        keyPath = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n      setNestedKey(userInstance, keyPath, value);\n    }\n    return userIntegrations;\n  }\n  return [].concat(_toConsumableArray(userIntegrations), [defaultIntegrationInstance]);\n}\nfunction addOrUpdateIntegrationInFunction(defaultIntegrationInstance, userIntegrationsFunc, forcedOptions) {\n  var wrapper = function wrapper(defaultIntegrations) {\n    var userFinalIntegrations = userIntegrationsFunc(defaultIntegrations);\n\n    // There are instances where we want the user to be able to prevent an integration from appearing at all, which they\n    // would do by providing a function which filters out the integration in question. If that's happened in one of\n    // those cases, don't add our default back in.\n    if (defaultIntegrationInstance.allowExclusionByUser) {\n      var userFinalInstance = userFinalIntegrations.find(function (integration) {\n        return integration.name === defaultIntegrationInstance.name;\n      });\n      if (!userFinalInstance) {\n        return userFinalIntegrations;\n      }\n    }\n    return addOrUpdateIntegrationInArray(defaultIntegrationInstance, userFinalIntegrations, forcedOptions);\n  };\n  return wrapper;\n}\nexports.addOrUpdateIntegration = addOrUpdateIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/userIntegrations.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/vendor/escapeStringForRegex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/vendor/escapeStringForRegex.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 12+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\nexports.escapeStringForRegex = escapeStringForRegex;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFBLHFCQUFBQyxXQUFBO0VBQ0E7RUFDQTtFQUNBLE9BQUFBLFdBQUEsQ0FBQUMsT0FBQSxnQ0FBQUEsT0FBQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi4vLi4vLi4vc3JjL3ZlbmRvci9lc2NhcGVTdHJpbmdGb3JSZWdleC50cz80ZmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHAgYnV0IHdpdGggbW9kaWZpY2F0aW9ucyB0bzpcbi8vICAgYSkgcmVkdWNlIHRoZSBzaXplIGJ5IHNraXBwaW5nIHRoZSBydW50aW1lIHR5cGUgLSBjaGVja2luZ1xuLy8gICBiKSBlbnN1cmUgaXQgZ2V0cyBkb3duIC0gY29tcGlsZWQgZm9yIG9sZCB2ZXJzaW9ucyBvZiBOb2RlKHRoZSBwdWJsaXNoZWQgcGFja2FnZSBvbmx5IHN1cHBvcnRzIE5vZGUgMTIrKS5cbi8vXG4vLyBNSVQgTGljZW5zZVxuLy9cbi8vIENvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKGh0dHBzOi8vc2luZHJlc29yaHVzLmNvbSlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWRcbi8vIGRvY3VtZW50YXRpb24gZmlsZXModGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb25cbi8vIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQgLyBvciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZFxuLy8gdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mXG4vLyB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPXG4vLyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4vLyBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTXG4vLyBJTiBUSEUgU09GVFdBUkUuXG5cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcsIGVzY2FwZSBjaGFyYWN0ZXJzIHdoaWNoIGhhdmUgbWVhbmluZyBpbiB0aGUgcmVnZXggZ3JhbW1hciwgc3VjaCB0aGF0IHRoZSByZXN1bHQgaXMgc2FmZSB0byBmZWVkIHRvXG4gKiBgbmV3IFJlZ0V4cCgpYC5cbiAqXG4gKiBAcGFyYW0gcmVnZXhTdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGVcbiAqIEByZXR1cm5zIEFuIHZlcnNpb24gb2YgdGhlIHN0cmluZyB3aXRoIGFsbCBzcGVjaWFsIHJlZ2V4IGNoYXJhY3RlcnMgZXNjYXBlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlU3RyaW5nRm9yUmVnZXgocmVnZXhTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIGVzY2FwZSB0aGUgaHlwaGVuIHNlcGFyYXRlbHkgc28gd2UgY2FuIGFsc28gcmVwbGFjZSBpdCB3aXRoIGEgdW5pY29kZSBsaXRlcmFsIGh5cGhlbiwgdG8gYXZvaWQgdGhlIHByb2JsZW1zXG4gIC8vIGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2lzc3Vlcy8yMC5cbiAgcmV0dXJuIHJlZ2V4U3RyaW5nLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJykucmVwbGFjZSgvLS9nLCAnXFxcXHgyZCcpO1xufVxuIl0sIm5hbWVzIjpbImVzY2FwZVN0cmluZ0ZvclJlZ2V4IiwicmVnZXhTdHJpbmciLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/vendor/supportsHistory.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/vendor/supportsHistory.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar worldwide = __webpack_require__(/*! ../worldwide.js */ \"./node_modules/@sentry/utils/cjs/worldwide.js\");\n\n// Based on https://github.com/angular/angular.js/pull/13945/files\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = worldwide.getGlobalObject();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var chrome = WINDOW.chrome;\n  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  var hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}\nexports.supportsHistory = supportsHistory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS91dGlscy9janMvdmVuZG9yL3N1cHBvcnRzSGlzdG9yeS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQXlCQTtBQUNBLElBQUFBLE1BQUEsR0FBQUMsU0FBQSxDQUFBQyxlQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUFDLGdCQUFBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUFDLE1BQUEsR0FBQUosTUFBQSxDQUFBSSxNQUFBO0VBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsTUFBQSxJQUFBQSxNQUFBLENBQUFFLEdBQUEsSUFBQUYsTUFBQSxDQUFBRSxHQUFBLENBQUFDLE9BQUE7RUFDQTtFQUNBLElBQUFDLGFBQUEsZ0JBQUFSLE1BQUEsTUFBQUEsTUFBQSxDQUFBUyxPQUFBLENBQUFDLFNBQUEsTUFBQVYsTUFBQSxDQUFBUyxPQUFBLENBQUFFLFlBQUE7RUFFQSxRQUFBTixtQkFBQSxJQUFBRyxhQUFBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi8uLi8uLi9zcmMvdmVuZG9yL3N1cHBvcnRzSGlzdG9yeS50cz8zYzEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMzk0NS9maWxlc1xuLy8gVGhlIE1JVCBMaWNlbnNlXG5cbi8vIENvcHlyaWdodCAoYykgMjAxMC0yMDE2IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7IGdldEdsb2JhbE9iamVjdCB9IGZyb20gJy4uL3dvcmxkd2lkZSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuY29uc3QgV0lORE9XID0gZ2V0R2xvYmFsT2JqZWN0PFdpbmRvdz4oKTtcblxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgSGlzdG9yeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c0hpc3Rvcnl9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKTogYm9vbGVhbiB7XG4gIC8vIE5PVEU6IGluIENocm9tZSBBcHAgZW52aXJvbm1lbnQsIHRvdWNoaW5nIGhpc3RvcnkucHVzaFN0YXRlLCAqZXZlbiBpbnNpZGVcbiAgLy8gICAgICAgYSB0cnkvY2F0Y2ggYmxvY2sqLCB3aWxsIGNhdXNlIENocm9tZSB0byBvdXRwdXQgYW4gZXJyb3IgdG8gY29uc29sZS5lcnJvclxuICAvLyBib3Jyb3dlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTM5NDUvZmlsZXNcbiAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0IGNocm9tZSA9IChXSU5ET1cgYXMgYW55KS5jaHJvbWU7XG4gIGNvbnN0IGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWUgJiYgY2hyb21lLmFwcCAmJiBjaHJvbWUuYXBwLnJ1bnRpbWU7XG4gIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4gIGNvbnN0IGhhc0hpc3RvcnlBcGkgPSAnaGlzdG9yeScgaW4gV0lORE9XICYmICEhV0lORE9XLmhpc3RvcnkucHVzaFN0YXRlICYmICEhV0lORE9XLmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuXG4gIHJldHVybiAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiBoYXNIaXN0b3J5QXBpO1xufVxuIl0sIm5hbWVzIjpbIldJTkRPVyIsIndvcmxkd2lkZSIsImdldEdsb2JhbE9iamVjdCIsInN1cHBvcnRzSGlzdG9yeSIsImNocm9tZSIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJhcHAiLCJydW50aW1lIiwiaGFzSGlzdG9yeUFwaSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/vendor/supportsHistory.js\n");

/***/ }),

/***/ "./node_modules/@sentry/utils/cjs/worldwide.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/utils/cjs/worldwide.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("__webpack_require__(/*! core-js/modules/esnext.global-this.js */ \"./node_modules/core-js/modules/esnext.global-this.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Internal global with common properties and Sentry extensions  */\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj) {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nvar GLOBAL_OBJ = (typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) == 'object' && isGlobalObj(globalThis) ||\n// eslint-disable-next-line no-restricted-globals\n(typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) == 'object' && isGlobalObj(window) || (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == 'object' && isGlobalObj(self) || (typeof __webpack_require__.g === \"undefined\" ? \"undefined\" : _typeof(__webpack_require__.g)) == 'object' && isGlobalObj(__webpack_require__.g) || function () {\n  return this;\n}() || {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nfunction getGlobalObject() {\n  return GLOBAL_OBJ;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(name, creator, obj) {\n  var gbl = obj || GLOBAL_OBJ;\n  var __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n  var singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\nexports.GLOBAL_OBJ = GLOBAL_OBJ;\nexports.getGlobalObject = getGlobalObject;\nexports.getGlobalSingleton = getGlobalSingleton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/utils/cjs/worldwide.js\n");

/***/ })

}]);